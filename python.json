[
  [
    {
      "name": "setup",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 43
          }
        }
      },
      "kind": "Module",
      "code_string": "from setuptools import setup, find_packages",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "find_packages",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 43
          }
        }
      },
      "kind": "Module",
      "code_string": "from setuptools import setup, find_packages",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "fh",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
        "range": {
          "start": {
            "line": 6,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(\"README.md\", \"r\", encoding=\"utf-8\") as fh:\n    long_description = fh.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "long_description",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
        "range": {
          "start": {
            "line": 7,
            "character": 4
          },
          "end": {
            "line": 7,
            "character": 32
          }
        }
      },
      "kind": "Variable",
      "code_string": "long_description = fh.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
          "range": {
            "start": {
              "line": 7,
              "character": 4
            },
            "end": {
              "line": 7,
              "character": 20
            }
          },
          "code_string": "long_description = f"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/setup.py",
          "range": {
            "start": {
              "line": 15,
              "character": 21
            },
            "end": {
              "line": 15,
              "character": 37
            }
          },
          "code_string": "long_description,\n"
        }
      ]
    }
  ],
  [
    {
      "name": "os",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 9
          }
        }
      },
      "kind": "Module",
      "code_string": "import os",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "json",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 1,
            "character": 0
          },
          "end": {
            "line": 1,
            "character": 11
          }
        }
      },
      "kind": "Module",
      "code_string": "import json",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "asyncio",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 2,
            "character": 0
          },
          "end": {
            "line": 2,
            "character": 14
          }
        }
      },
      "kind": "Module",
      "code_string": "import asyncio",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "traceback",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 3,
            "character": 0
          },
          "end": {
            "line": 3,
            "character": 16
          }
        }
      },
      "kind": "Module",
      "code_string": "import traceback",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Dict",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 51
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Optional, Any, Union",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "List",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 51
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Optional, Any, Union",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Optional",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 51
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Optional, Any, Union",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Any",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 51
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Optional, Any, Union",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Union",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 51
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Optional, Any, Union",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Path",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 5,
            "character": 0
          },
          "end": {
            "line": 5,
            "character": 24
          }
        }
      },
      "kind": "Class",
      "code_string": "from pathlib import Path",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "LSPClient",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 7,
            "character": 0
          },
          "end": {
            "line": 7,
            "character": 32
          }
        }
      },
      "kind": "Class",
      "code_string": "from lsp_client import LSPClient",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "SYMBOL_KIND_MAP",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 9,
            "character": 0
          },
          "end": {
            "line": 36,
            "character": 1
          }
        }
      },
      "kind": "Variable",
      "code_string": "SYMBOL_KIND_MAP = {\n    1: \"File\",\n    2: \"Module\",\n    3: \"Namespace\",\n    4: \"Package\",\n    5: \"Class\",\n    6: \"Method\",\n    7: \"Property\",\n    8: \"Field\",\n    9: \"Constructor\",\n    10: \"Enum\",\n    11: \"Interface\",\n    12: \"Function\",\n    13: \"Variable\",\n    14: \"Constant\",\n    15: \"String\",\n    16: \"Number\",\n    17: \"Boolean\",\n    18: \"Array\",\n    19: \"Object\",\n    20: \"Key\",\n    21: \"Null\",\n    22: \"EnumMember\",\n    23: \"Struct\",\n    24: \"Event\",\n    25: \"Operator\",\n    26: \"TypeParameter\",\n}",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 9,
              "character": 0
            },
            "end": {
              "line": 9,
              "character": 15
            }
          },
          "code_string": "SYMBOL_KIND_MAP"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 182,
              "character": 28
            },
            "end": {
              "line": 182,
              "character": 43
            }
          },
          "code_string": "SYMBOL_KIND_MAP[i.get(\"kind\")]\n"
        }
      ]
    },
    {
      "name": "AsyncUniversalExtractor",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 39,
            "character": 0
          },
          "end": {
            "line": 281,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class AsyncUniversalExtractor:\n    \"\"\"Async universal code extractor using LSP\"\"\"\n\n    def __init__(self):\n        self.lsp_clients: Dict[str, LSPClient] = {}\n        self.language_server_configs = {\n            \"python\": [\"pylsp\"],  # python-lsp-server\n            \"javascript\": [\"typescript-language-server\", \"--stdio\"],\n            \"typescript\": [\"typescript-language-server\", \"--stdio\"],\n            \"java\": [\"jdtls\"],  # Eclipse JDT Language Server\n            \"go\": [\"gopls\"],\n            \"rust\": [\"rust-analyzer\"],\n            \"cpp\": [\"clangd\"],\n            \"c\": [\"clangd\"],\n        }\n\n    async def cleanup(self):\n        \"\"\"Clean up all LSP clients and their subprocesses\"\"\"\n        print(\"\ud83e\uddf9 Cleaning up LSP clients...\")\n        for language, client in self.lsp_clients.items():\n            try:\n                print(f\"  Stopping {language} LSP client...\")\n                await client.stop()\n                print(f\"  \u2705 Stopped {language} LSP client\")\n            except Exception as e:\n                print(f\"  \u274c Error stopping {language} client: {e}\")\n        self.lsp_clients.clear()\n        print(\"\u2705 All LSP clients cleaned up\")\n\n    def detect_language(self, file_path: str) -> str:\n        \"\"\"Detect language from file extension\"\"\"\n        ext = Path(file_path).suffix.lower()\n\n        language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".java\": \"java\",\n            \".cpp\": \"cpp\",\n            \".c\": \"c\",\n            \".cs\": \"csharp\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".hs\": \"haskell\",\n        }\n\n        return language_map.get(ext, \"unknown\")\n\n    async def get_or_create_lsp_client(\n        self, language: str, workspace_path: str\n    ) -> Optional[LSPClient]:\n        \"\"\"Get or create LSP client for a language\"\"\"\n        if language in self.lsp_clients:\n            return self.lsp_clients[language]\n\n        if language not in self.language_server_configs:\n            print(f\"No LSP server config for {language}\")\n            return None\n\n        try:\n            command = self.language_server_configs[language][0]\n            args = self.language_server_configs[language][1:]\n\n            client = LSPClient(command, args, workspace_path)\n            await client.start()\n            await client.initialize(workspace_path)\n\n            self.lsp_clients[language] = client\n            print(f\"\u2705 Initialized LSP client for {language}\")\n            return client\n\n        except Exception as e:\n            print(f\"\u274c Failed to initialize LSP client for {language}: {e}\")\n            return None\n\n    def get_code_from_symbols(self, d, path, language):\n        if language == \"rust\" or \"range\" in d.keys():\n            file_path = path\n            start_line = d.get(\"range\").get(\"start\").get(\"line\")\n            start_char = d.get(\"range\").get(\"start\").get(\"character\")\n            end_line = d.get(\"range\").get(\"end\").get(\"line\")\n            end_char = d.get(\"range\").get(\"end\").get(\"character\")\n        else:\n            file_path = d.get(\"location\").get(\"uri\")\n            start_line = d.get(\"location\").get(\"range\").get(\"start\").get(\"line\")\n            start_char = d.get(\"location\").get(\"range\").get(\"start\").get(\"character\")\n            end_line = d.get(\"location\").get(\"range\").get(\"end\").get(\"line\")\n            end_char = d.get(\"location\").get(\"range\").get(\"end\").get(\"character\")\n\n        with open(file_path.replace(\"file:///\", \"/\"), \"r\") as f:\n            lines = f.readlines()\n\n        # Adjust lines because lists are 0-indexed\n        selected_lines = lines[start_line : end_line + 1]\n\n        # Trim the first and last lines by character indices\n        if selected_lines:\n            selected_lines[0] = selected_lines[0][start_char:]\n            selected_lines[-1] = selected_lines[-1][:end_char]\n\n        return (\"\".join(selected_lines), start_line, start_char, end_line, end_char)\n\n    async def extract_module_from_file(self, file_path: str, workspace_path: str):\n        \"\"\"Extract a single module from a file using LSP\"\"\"\n        try:\n            language = self.detect_language(file_path)\n            if language == \"unknown\":\n                print(f\"Unknown language for {file_path}\")\n                return None\n\n            # Get or create LSP client\n            lsp_client = await self.get_or_create_lsp_client(language, workspace_path)\n            if not lsp_client:\n                print(f\"No LSP client available for {language}\")\n                return None\n\n            # Get document symbols\n            symbols = await lsp_client.get_document_symbols(file_path)\n            for i in symbols:\n                (i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )\n                hover_details = await lsp_client.get_hover(\n                    file_path, l1, c1\n                )\n                refs = await lsp_client.get_references(\n                    file_path, l1, c1, include_declaration=True\n                )\n                i[\"hover_details\"] = hover_details\n                i[\"references\"] = []\n                for references in refs:\n                    code_string = \"\"\n                    (code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )\n                    reference_updated = references.model_dump()\n                    reference_updated[\"code_string\"] = code_string\n                    i[\"references\"].append(reference_updated)\n                i[\"kind\"] = SYMBOL_KIND_MAP[i.get(\"kind\")]\n\n            return symbols\n\n        except Exception as e:\n            print(f\"Error extracting from {file_path}: {e}\")\n            traceback.print_exc()\n            return None\n\n    async def extract_codebase(self, root_path: str):\n        \"\"\"Extract entire codebase from a directory\"\"\"\n        try:\n            file_patterns = [\n                \"*.py\",\n                \"*.js\",\n                \"*.ts\",\n                \"*.java\",\n                \"*.cpp\",\n                \"*.c\",\n                \"*.cs\",\n                \"*.go\",\n                \"*.rs\",\n            ]\n\n            root_path_obj = Path(root_path)\n            files_to_process = []\n            codebase = []\n            for pattern in file_patterns:\n                files_to_process.extend(root_path_obj.rglob(pattern))\n            # Filter out files in common ignore directories\n            ignore_dirs = {\n                \".git\",\n                \"__pycache__\",\n                \".pytest_cache\",\n                \"node_modules\",\n                \".venv\",\n                \"venv\",\n                \"env\",\n                \"target\",\n                \"build\",\n                \"dist\",\n            }\n\n            filtered_files = []\n            for file_path in files_to_process:\n                if file_path.is_file():\n                    # Check if any parent directory is in ignore list\n                    if not any(part in ignore_dirs for part in file_path.parts):\n                        filtered_files.append(file_path)\n\n            # Group files by language\n            language_files = {}\n            for file_path in filtered_files:\n                language = self.detect_language(str(file_path))\n                if language != \"unknown\":\n                    if language not in language_files:\n                        language_files[language] = []\n                    language_files[language].append(file_path)\n\n            print(f\"Found files in languages: {list(language_files.keys())}\")\n\n            # Process files by language\n            for language, files in language_files.items():\n                print(f\"Processing {len(files)} {language} files...\")\n\n                # Initialize LSP for this language\n                lsp_client = await self.get_or_create_lsp_client(\n                    language, str(root_path_obj.absolute())\n                )\n                if not lsp_client:\n                    print(\n                        f\"Skipping {language} files due to LSP initialization failure\"\n                    )\n                    continue\n\n                # Process files\n                successful = 0\n                for file_path in files:\n                    try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n\n                print(\n                    f\"Successfully processed {successful}/{len(files)} {language} files\"\n                )\n            return codebase\n        finally:\n            # Always clean up LSP clients\n            await self.cleanup()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__init__",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 42,
            "character": 4
          },
          "end": {
            "line": 54,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __init__(self):\n        self.lsp_clients: Dict[str, LSPClient] = {}\n        self.language_server_configs = {\n            \"python\": [\"pylsp\"],  # python-lsp-server\n            \"javascript\": [\"typescript-language-server\", \"--stdio\"],\n            \"typescript\": [\"typescript-language-server\", \"--stdio\"],\n            \"java\": [\"jdtls\"],  # Eclipse JDT Language Server\n            \"go\": [\"gopls\"],\n            \"rust\": [\"rust-analyzer\"],\n            \"cpp\": [\"clangd\"],\n            \"c\": [\"clangd\"],\n        }\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "cleanup",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 55,
            "character": 10
          },
          "end": {
            "line": 67,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def cleanup(self):\n        \"\"\"Clean up all LSP clients and their subprocesses\"\"\"\n        print(\"\ud83e\uddf9 Cleaning up LSP clients...\")\n        for language, client in self.lsp_clients.items():\n            try:\n                print(f\"  Stopping {language} LSP client...\")\n                await client.stop()\n                print(f\"  \u2705 Stopped {language} LSP client\")\n            except Exception as e:\n                print(f\"  \u274c Error stopping {language} client: {e}\")\n        self.lsp_clients.clear()\n        print(\"\u2705 All LSP clients cleaned up\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "detect_language",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 68,
            "character": 4
          },
          "end": {
            "line": 91,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def detect_language(self, file_path: str) -> str:\n        \"\"\"Detect language from file extension\"\"\"\n        ext = Path(file_path).suffix.lower()\n\n        language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".java\": \"java\",\n            \".cpp\": \"cpp\",\n            \".c\": \"c\",\n            \".cs\": \"csharp\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".hs\": \"haskell\",\n        }\n\n        return language_map.get(ext, \"unknown\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_or_create_lsp_client",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 92,
            "character": 10
          },
          "end": {
            "line": 118,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_or_create_lsp_client(\n        self, language: str, workspace_path: str\n    ) -> Optional[LSPClient]:\n        \"\"\"Get or create LSP client for a language\"\"\"\n        if language in self.lsp_clients:\n            return self.lsp_clients[language]\n\n        if language not in self.language_server_configs:\n            print(f\"No LSP server config for {language}\")\n            return None\n\n        try:\n            command = self.language_server_configs[language][0]\n            args = self.language_server_configs[language][1:]\n\n            client = LSPClient(command, args, workspace_path)\n            await client.start()\n            await client.initialize(workspace_path)\n\n            self.lsp_clients[language] = client\n            print(f\"\u2705 Initialized LSP client for {language}\")\n            return client\n\n        except Exception as e:\n            print(f\"\u274c Failed to initialize LSP client for {language}: {e}\")\n            return None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_code_from_symbols",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 119,
            "character": 4
          },
          "end": {
            "line": 145,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_code_from_symbols(self, d, path, language):\n        if language == \"rust\" or \"range\" in d.keys():\n            file_path = path\n            start_line = d.get(\"range\").get(\"start\").get(\"line\")\n            start_char = d.get(\"range\").get(\"start\").get(\"character\")\n            end_line = d.get(\"range\").get(\"end\").get(\"line\")\n            end_char = d.get(\"range\").get(\"end\").get(\"character\")\n        else:\n            file_path = d.get(\"location\").get(\"uri\")\n            start_line = d.get(\"location\").get(\"range\").get(\"start\").get(\"line\")\n            start_char = d.get(\"location\").get(\"range\").get(\"start\").get(\"character\")\n            end_line = d.get(\"location\").get(\"range\").get(\"end\").get(\"line\")\n            end_char = d.get(\"location\").get(\"range\").get(\"end\").get(\"character\")\n\n        with open(file_path.replace(\"file:///\", \"/\"), \"r\") as f:\n            lines = f.readlines()\n\n        # Adjust lines because lists are 0-indexed\n        selected_lines = lines[start_line : end_line + 1]\n\n        # Trim the first and last lines by character indices\n        if selected_lines:\n            selected_lines[0] = selected_lines[0][start_char:]\n            selected_lines[-1] = selected_lines[-1][:end_char]\n\n        return (\"\".join(selected_lines), start_line, start_char, end_line, end_char)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "extract_module_from_file",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 146,
            "character": 10
          },
          "end": {
            "line": 190,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def extract_module_from_file(self, file_path: str, workspace_path: str):\n        \"\"\"Extract a single module from a file using LSP\"\"\"\n        try:\n            language = self.detect_language(file_path)\n            if language == \"unknown\":\n                print(f\"Unknown language for {file_path}\")\n                return None\n\n            # Get or create LSP client\n            lsp_client = await self.get_or_create_lsp_client(language, workspace_path)\n            if not lsp_client:\n                print(f\"No LSP client available for {language}\")\n                return None\n\n            # Get document symbols\n            symbols = await lsp_client.get_document_symbols(file_path)\n            for i in symbols:\n                (i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )\n                hover_details = await lsp_client.get_hover(\n                    file_path, l1, c1\n                )\n                refs = await lsp_client.get_references(\n                    file_path, l1, c1, include_declaration=True\n                )\n                i[\"hover_details\"] = hover_details\n                i[\"references\"] = []\n                for references in refs:\n                    code_string = \"\"\n                    (code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )\n                    reference_updated = references.model_dump()\n                    reference_updated[\"code_string\"] = code_string\n                    i[\"references\"].append(reference_updated)\n                i[\"kind\"] = SYMBOL_KIND_MAP[i.get(\"kind\")]\n\n            return symbols\n\n        except Exception as e:\n            print(f\"Error extracting from {file_path}: {e}\")\n            traceback.print_exc()\n            return None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "extract_codebase",
      "containerName": "AsyncUniversalExtractor",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 191,
            "character": 10
          },
          "end": {
            "line": 281,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def extract_codebase(self, root_path: str):\n        \"\"\"Extract entire codebase from a directory\"\"\"\n        try:\n            file_patterns = [\n                \"*.py\",\n                \"*.js\",\n                \"*.ts\",\n                \"*.java\",\n                \"*.cpp\",\n                \"*.c\",\n                \"*.cs\",\n                \"*.go\",\n                \"*.rs\",\n            ]\n\n            root_path_obj = Path(root_path)\n            files_to_process = []\n            codebase = []\n            for pattern in file_patterns:\n                files_to_process.extend(root_path_obj.rglob(pattern))\n            # Filter out files in common ignore directories\n            ignore_dirs = {\n                \".git\",\n                \"__pycache__\",\n                \".pytest_cache\",\n                \"node_modules\",\n                \".venv\",\n                \"venv\",\n                \"env\",\n                \"target\",\n                \"build\",\n                \"dist\",\n            }\n\n            filtered_files = []\n            for file_path in files_to_process:\n                if file_path.is_file():\n                    # Check if any parent directory is in ignore list\n                    if not any(part in ignore_dirs for part in file_path.parts):\n                        filtered_files.append(file_path)\n\n            # Group files by language\n            language_files = {}\n            for file_path in filtered_files:\n                language = self.detect_language(str(file_path))\n                if language != \"unknown\":\n                    if language not in language_files:\n                        language_files[language] = []\n                    language_files[language].append(file_path)\n\n            print(f\"Found files in languages: {list(language_files.keys())}\")\n\n            # Process files by language\n            for language, files in language_files.items():\n                print(f\"Processing {len(files)} {language} files...\")\n\n                # Initialize LSP for this language\n                lsp_client = await self.get_or_create_lsp_client(\n                    language, str(root_path_obj.absolute())\n                )\n                if not lsp_client:\n                    print(\n                        f\"Skipping {language} files due to LSP initialization failure\"\n                    )\n                    continue\n\n                # Process files\n                successful = 0\n                for file_path in files:\n                    try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n\n                print(\n                    f\"Successfully processed {successful}/{len(files)} {language} files\"\n                )\n            return codebase\n        finally:\n            # Always clean up LSP clients\n            await self.cleanup()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lsp_clients",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 43,
            "character": 8
          },
          "end": {
            "line": 43,
            "character": 51
          }
        }
      },
      "kind": "Field",
      "code_string": "self.lsp_clients: Dict[str, LSPClient] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 42,
              "character": 17
            },
            "end": {
              "line": 42,
              "character": 21
            }
          },
          "code_string": "self):\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 43,
              "character": 8
            },
            "end": {
              "line": 43,
              "character": 12
            }
          },
          "code_string": "self.lsp_cli"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 44,
              "character": 8
            },
            "end": {
              "line": 44,
              "character": 12
            }
          },
          "code_string": "self.languag"
        }
      ]
    },
    {
      "name": "language_server_configs",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 44,
            "character": 8
          },
          "end": {
            "line": 53,
            "character": 9
          }
        }
      },
      "kind": "Field",
      "code_string": "self.language_server_configs = {\n            \"python\": [\"pylsp\"],  # python-lsp-server\n            \"javascript\": [\"typescript-language-server\", \"--stdio\"],\n            \"typescript\": [\"typescript-language-server\", \"--stdio\"],\n            \"java\": [\"jdtls\"],  # Eclipse JDT Language Server\n            \"go\": [\"gopls\"],\n            \"rust\": [\"rust-analyzer\"],\n            \"cpp\": [\"clangd\"],\n            \"c\": [\"clangd\"],\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 42,
              "character": 17
            },
            "end": {
              "line": 42,
              "character": 21
            }
          },
          "code_string": "self):\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 43,
              "character": 8
            },
            "end": {
              "line": 43,
              "character": 12
            }
          },
          "code_string": "self.lsp_cli"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 44,
              "character": 8
            },
            "end": {
              "line": 44,
              "character": 12
            }
          },
          "code_string": "self.languag"
        }
      ]
    },
    {
      "name": "language",
      "containerName": "cleanup",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 58,
            "character": 8
          },
          "end": {
            "line": 65,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for language, client in self.lsp_clients.items():\n            try:\n                print(f\"  Stopping {language} LSP client...\")\n                await client.stop()\n                print(f\"  \u2705 Stopped {language} LSP client\")\n            except Exception as e:\n                print(f\"  \u274c Error stopping {language} client: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "client",
      "containerName": "cleanup",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 58,
            "character": 8
          },
          "end": {
            "line": 65,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for language, client in self.lsp_clients.items():\n            try:\n                print(f\"  Stopping {language} LSP client...\")\n                await client.stop()\n                print(f\"  \u2705 Stopped {language} LSP client\")\n            except Exception as e:\n                print(f\"  \u274c Error stopping {language} client: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "cleanup",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 59,
            "character": 12
          },
          "end": {
            "line": 65,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                print(f\"  Stopping {language} LSP client...\")\n                await client.stop()\n                print(f\"  \u2705 Stopped {language} LSP client\")\n            except Exception as e:\n                print(f\"  \u274c Error stopping {language} client: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "ext",
      "containerName": "detect_language",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 70,
            "character": 8
          },
          "end": {
            "line": 70,
            "character": 44
          }
        }
      },
      "kind": "Variable",
      "code_string": "ext = Path(file_path).suffix.lower()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 70,
              "character": 8
            },
            "end": {
              "line": 70,
              "character": 11
            }
          },
          "code_string": "ext = Path("
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 90,
              "character": 32
            },
            "end": {
              "line": 90,
              "character": 35
            }
          },
          "code_string": "ext, \"unknown\")\n"
        }
      ]
    },
    {
      "name": "language_map",
      "containerName": "detect_language",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 72,
            "character": 8
          },
          "end": {
            "line": 88,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".java\": \"java\",\n            \".cpp\": \"cpp\",\n            \".c\": \"c\",\n            \".cs\": \"csharp\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".hs\": \"haskell\",\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 72,
              "character": 8
            },
            "end": {
              "line": 72,
              "character": 20
            }
          },
          "code_string": "language_map = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 90,
              "character": 15
            },
            "end": {
              "line": 90,
              "character": 27
            }
          },
          "code_string": "language_map.get(ext, \"unkn"
        }
      ]
    },
    {
      "name": "command",
      "containerName": "get_or_create_lsp_client",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 104,
            "character": 12
          },
          "end": {
            "line": 104,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "command = self.language_server_configs[language][0]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 104,
              "character": 12
            },
            "end": {
              "line": 104,
              "character": 19
            }
          },
          "code_string": "command = self.lang"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 107,
              "character": 31
            },
            "end": {
              "line": 107,
              "character": 38
            }
          },
          "code_string": "command, args, workspace_path)\n"
        }
      ]
    },
    {
      "name": "args",
      "containerName": "get_or_create_lsp_client",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 105,
            "character": 12
          },
          "end": {
            "line": 105,
            "character": 61
          }
        }
      },
      "kind": "Variable",
      "code_string": "args = self.language_server_configs[language][1:]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 105,
              "character": 12
            },
            "end": {
              "line": 105,
              "character": 16
            }
          },
          "code_string": "args = self.lang"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 107,
              "character": 40
            },
            "end": {
              "line": 107,
              "character": 44
            }
          },
          "code_string": "args, workspace_path)\n"
        }
      ]
    },
    {
      "name": "client",
      "containerName": "get_or_create_lsp_client",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 107,
            "character": 12
          },
          "end": {
            "line": 107,
            "character": 61
          }
        }
      },
      "kind": "Variable",
      "code_string": "client = LSPClient(command, args, workspace_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Language Server Protocol Client implementation"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 107,
              "character": 12
            },
            "end": {
              "line": 107,
              "character": 18
            }
          },
          "code_string": "client = LSPClient"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 108,
              "character": 18
            },
            "end": {
              "line": 108,
              "character": 24
            }
          },
          "code_string": "client.start()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 109,
              "character": 18
            },
            "end": {
              "line": 109,
              "character": 24
            }
          },
          "code_string": "client.initialize(worksp"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 111,
              "character": 41
            },
            "end": {
              "line": 111,
              "character": 47
            }
          },
          "code_string": "client\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 113,
              "character": 19
            },
            "end": {
              "line": 113,
              "character": 25
            }
          },
          "code_string": "client\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "get_or_create_lsp_client",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 103,
            "character": 8
          },
          "end": {
            "line": 118,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            command = self.language_server_configs[language][0]\n            args = self.language_server_configs[language][1:]\n\n            client = LSPClient(command, args, workspace_path)\n            await client.start()\n            await client.initialize(workspace_path)\n\n            self.lsp_clients[language] = client\n            print(f\"\u2705 Initialized LSP client for {language}\")\n            return client\n\n        except Exception as e:\n            print(f\"\u274c Failed to initialize LSP client for {language}: {e}\")\n            return None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "file_path",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 121,
            "character": 12
          },
          "end": {
            "line": 121,
            "character": 28
          }
        }
      },
      "kind": "Variable",
      "code_string": "file_path = path\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 121,
              "character": 12
            },
            "end": {
              "line": 121,
              "character": 21
            }
          },
          "code_string": "file_path = path\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 127,
              "character": 12
            },
            "end": {
              "line": 127,
              "character": 21
            }
          },
          "code_string": "file_path = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 133,
              "character": 18
            },
            "end": {
              "line": 133,
              "character": 27
            }
          },
          "code_string": "file_path.replace(\"file:///"
        }
      ]
    },
    {
      "name": "start_line",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 122,
            "character": 12
          },
          "end": {
            "line": 122,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_line = d.get(\"range\").get(\"start\").get(\"line\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 122,
              "character": 12
            },
            "end": {
              "line": 122,
              "character": 22
            }
          },
          "code_string": "start_line = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 128,
              "character": 12
            },
            "end": {
              "line": 128,
              "character": 22
            }
          },
          "code_string": "start_line = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 31
            },
            "end": {
              "line": 137,
              "character": 41
            }
          },
          "code_string": "start_line : end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 41
            },
            "end": {
              "line": 144,
              "character": 51
            }
          },
          "code_string": "start_line, start_char, end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "start_char",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 123,
            "character": 12
          },
          "end": {
            "line": 123,
            "character": 69
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_char = d.get(\"range\").get(\"start\").get(\"character\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 123,
              "character": 12
            },
            "end": {
              "line": 123,
              "character": 22
            }
          },
          "code_string": "start_char = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 129,
              "character": 12
            },
            "end": {
              "line": 129,
              "character": 22
            }
          },
          "code_string": "start_char = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 141,
              "character": 50
            },
            "end": {
              "line": 141,
              "character": 60
            }
          },
          "code_string": "start_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 53
            },
            "end": {
              "line": 144,
              "character": 63
            }
          },
          "code_string": "start_char, end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "end_line",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 124,
            "character": 12
          },
          "end": {
            "line": 124,
            "character": 60
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_line = d.get(\"range\").get(\"end\").get(\"line\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 124,
              "character": 12
            },
            "end": {
              "line": 124,
              "character": 20
            }
          },
          "code_string": "end_line = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 130,
              "character": 12
            },
            "end": {
              "line": 130,
              "character": 20
            }
          },
          "code_string": "end_line = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 44
            },
            "end": {
              "line": 137,
              "character": 52
            }
          },
          "code_string": "end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 65
            },
            "end": {
              "line": 144,
              "character": 73
            }
          },
          "code_string": "end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "end_char",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 125,
            "character": 12
          },
          "end": {
            "line": 125,
            "character": 65
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_char = d.get(\"range\").get(\"end\").get(\"character\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 125,
              "character": 12
            },
            "end": {
              "line": 125,
              "character": 20
            }
          },
          "code_string": "end_char = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 131,
              "character": 12
            },
            "end": {
              "line": 131,
              "character": 20
            }
          },
          "code_string": "end_char = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 142,
              "character": 53
            },
            "end": {
              "line": 142,
              "character": 61
            }
          },
          "code_string": "end_char]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 75
            },
            "end": {
              "line": 144,
              "character": 83
            }
          },
          "code_string": "end_char)\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 127,
            "character": 12
          },
          "end": {
            "line": 127,
            "character": 52
          }
        }
      },
      "kind": "Variable",
      "code_string": "file_path = d.get(\"location\").get(\"uri\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 121,
              "character": 12
            },
            "end": {
              "line": 121,
              "character": 21
            }
          },
          "code_string": "file_path = path\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 127,
              "character": 12
            },
            "end": {
              "line": 127,
              "character": 21
            }
          },
          "code_string": "file_path = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 133,
              "character": 18
            },
            "end": {
              "line": 133,
              "character": 27
            }
          },
          "code_string": "file_path.replace(\"file:///"
        }
      ]
    },
    {
      "name": "start_line",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 128,
            "character": 12
          },
          "end": {
            "line": 128,
            "character": 80
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_line = d.get(\"location\").get(\"range\").get(\"start\").get(\"line\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 122,
              "character": 12
            },
            "end": {
              "line": 122,
              "character": 22
            }
          },
          "code_string": "start_line = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 128,
              "character": 12
            },
            "end": {
              "line": 128,
              "character": 22
            }
          },
          "code_string": "start_line = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 31
            },
            "end": {
              "line": 137,
              "character": 41
            }
          },
          "code_string": "start_line : end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 41
            },
            "end": {
              "line": 144,
              "character": 51
            }
          },
          "code_string": "start_line, start_char, end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "start_char",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 129,
            "character": 12
          },
          "end": {
            "line": 129,
            "character": 85
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_char = d.get(\"location\").get(\"range\").get(\"start\").get(\"character\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 123,
              "character": 12
            },
            "end": {
              "line": 123,
              "character": 22
            }
          },
          "code_string": "start_char = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 129,
              "character": 12
            },
            "end": {
              "line": 129,
              "character": 22
            }
          },
          "code_string": "start_char = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 141,
              "character": 50
            },
            "end": {
              "line": 141,
              "character": 60
            }
          },
          "code_string": "start_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 53
            },
            "end": {
              "line": 144,
              "character": 63
            }
          },
          "code_string": "start_char, end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "end_line",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 130,
            "character": 12
          },
          "end": {
            "line": 130,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_line = d.get(\"location\").get(\"range\").get(\"end\").get(\"line\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 124,
              "character": 12
            },
            "end": {
              "line": 124,
              "character": 20
            }
          },
          "code_string": "end_line = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 130,
              "character": 12
            },
            "end": {
              "line": 130,
              "character": 20
            }
          },
          "code_string": "end_line = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 44
            },
            "end": {
              "line": 137,
              "character": 52
            }
          },
          "code_string": "end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 65
            },
            "end": {
              "line": 144,
              "character": 73
            }
          },
          "code_string": "end_line, end_char)\n"
        }
      ]
    },
    {
      "name": "end_char",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 131,
            "character": 12
          },
          "end": {
            "line": 131,
            "character": 81
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_char = d.get(\"location\").get(\"range\").get(\"end\").get(\"character\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 125,
              "character": 12
            },
            "end": {
              "line": 125,
              "character": 20
            }
          },
          "code_string": "end_char = d.get(\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 131,
              "character": 12
            },
            "end": {
              "line": 131,
              "character": 20
            }
          },
          "code_string": "end_char = d.get(\"lo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 142,
              "character": 53
            },
            "end": {
              "line": 142,
              "character": 61
            }
          },
          "code_string": "end_char]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 75
            },
            "end": {
              "line": 144,
              "character": 83
            }
          },
          "code_string": "end_char)\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 133,
            "character": 8
          },
          "end": {
            "line": 135,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path.replace(\"file:///\", \"/\"), \"r\") as f:\n            lines = f.readlines()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lines",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 134,
            "character": 12
          },
          "end": {
            "line": 134,
            "character": 33
          }
        }
      },
      "kind": "Variable",
      "code_string": "lines = f.readlines()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 134,
              "character": 12
            },
            "end": {
              "line": 134,
              "character": 17
            }
          },
          "code_string": "lines = f.readlin"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 25
            },
            "end": {
              "line": 137,
              "character": 30
            }
          },
          "code_string": "lines[start_line : end_line + "
        }
      ]
    },
    {
      "name": "selected_lines",
      "containerName": "get_code_from_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 137,
            "character": 8
          },
          "end": {
            "line": 137,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "selected_lines = lines[start_line : end_line + 1]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 137,
              "character": 8
            },
            "end": {
              "line": 137,
              "character": 22
            }
          },
          "code_string": "selected_lines = lines"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 140,
              "character": 11
            },
            "end": {
              "line": 140,
              "character": 25
            }
          },
          "code_string": "selected_lines:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 141,
              "character": 12
            },
            "end": {
              "line": 141,
              "character": 26
            }
          },
          "code_string": "selected_lines[0] = select"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 141,
              "character": 32
            },
            "end": {
              "line": 141,
              "character": 46
            }
          },
          "code_string": "selected_lines[0][start_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 142,
              "character": 12
            },
            "end": {
              "line": 142,
              "character": 26
            }
          },
          "code_string": "selected_lines[-1] = selec"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 142,
              "character": 33
            },
            "end": {
              "line": 142,
              "character": 47
            }
          },
          "code_string": "selected_lines[-1][:end_char]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 144,
              "character": 24
            },
            "end": {
              "line": 144,
              "character": 38
            }
          },
          "code_string": "selected_lines), start_line, start_cha"
        }
      ]
    },
    {
      "name": "language",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 149,
            "character": 12
          },
          "end": {
            "line": 149,
            "character": 54
          }
        }
      },
      "kind": "Variable",
      "code_string": "language = self.detect_language(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 149,
              "character": 12
            },
            "end": {
              "line": 149,
              "character": 20
            }
          },
          "code_string": "language = self.dete"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 150,
              "character": 15
            },
            "end": {
              "line": 150,
              "character": 23
            }
          },
          "code_string": "language == \"unknown\":\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 155,
              "character": 61
            },
            "end": {
              "line": 155,
              "character": 69
            }
          },
          "code_string": "language, workspace_path)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 157,
              "character": 53
            },
            "end": {
              "line": 157,
              "character": 61
            }
          },
          "code_string": "language}\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 164,
              "character": 34
            },
            "end": {
              "line": 164,
              "character": 42
            }
          },
          "code_string": "language\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 177,
              "character": 60
            },
            "end": {
              "line": 177,
              "character": 68
            }
          },
          "code_string": "language\n"
        }
      ]
    },
    {
      "name": "lsp_client",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 155,
            "character": 12
          },
          "end": {
            "line": 155,
            "character": 86
          }
        }
      },
      "kind": "Variable",
      "code_string": "lsp_client = await self.get_or_create_lsp_client(language, workspace_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 155,
              "character": 12
            },
            "end": {
              "line": 155,
              "character": 22
            }
          },
          "code_string": "lsp_client = await sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 156,
              "character": 19
            },
            "end": {
              "line": 156,
              "character": 29
            }
          },
          "code_string": "lsp_client:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 161,
              "character": 28
            },
            "end": {
              "line": 161,
              "character": 38
            }
          },
          "code_string": "lsp_client.get_document_symbols(file_p"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 166,
              "character": 38
            },
            "end": {
              "line": 166,
              "character": 48
            }
          },
          "code_string": "lsp_client.get_hover(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 169,
              "character": 29
            },
            "end": {
              "line": 169,
              "character": 39
            }
          },
          "code_string": "lsp_client.get_references(\n"
        }
      ]
    },
    {
      "name": "symbols",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 161,
            "character": 12
          },
          "end": {
            "line": 161,
            "character": 70
          }
        }
      },
      "kind": "Variable",
      "code_string": "symbols = await lsp_client.get_document_symbols(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 161,
              "character": 12
            },
            "end": {
              "line": 161,
              "character": 19
            }
          },
          "code_string": "symbols = await lsp"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 162,
              "character": 21
            },
            "end": {
              "line": 162,
              "character": 28
            }
          },
          "code_string": "symbols:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 184,
              "character": 19
            },
            "end": {
              "line": 184,
              "character": 26
            }
          },
          "code_string": "symbols\n"
        }
      ]
    },
    {
      "name": "i",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 162,
            "character": 12
          },
          "end": {
            "line": 183,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i in symbols:\n                (i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )\n                hover_details = await lsp_client.get_hover(\n                    file_path, l1, c1\n                )\n                refs = await lsp_client.get_references(\n                    file_path, l1, c1, include_declaration=True\n                )\n                i[\"hover_details\"] = hover_details\n                i[\"references\"] = []\n                for references in refs:\n                    code_string = \"\"\n                    (code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )\n                    reference_updated = references.model_dump()\n                    reference_updated[\"code_string\"] = code_string\n                    i[\"references\"].append(reference_updated)\n                i[\"kind\"] = SYMBOL_KIND_MAP[i.get(\"kind\")]\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "l1",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 163,
            "character": 16
          },
          "end": {
            "line": 165,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "(i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "c1",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 163,
            "character": 16
          },
          "end": {
            "line": 165,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "(i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "l2",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 163,
            "character": 16
          },
          "end": {
            "line": 165,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "(i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "c2",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 163,
            "character": 16
          },
          "end": {
            "line": 165,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "(i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "hover_details",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 166,
            "character": 16
          },
          "end": {
            "line": 168,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "hover_details = await lsp_client.get_hover(\n                    file_path, l1, c1\n                )",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 166,
              "character": 16
            },
            "end": {
              "line": 166,
              "character": 29
            }
          },
          "code_string": "hover_details = await lsp_cli"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 172,
              "character": 37
            },
            "end": {
              "line": 172,
              "character": 50
            }
          },
          "code_string": "hover_details\n"
        }
      ]
    },
    {
      "name": "refs",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 169,
            "character": 16
          },
          "end": {
            "line": 171,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "refs = await lsp_client.get_references(\n                    file_path, l1, c1, include_declaration=True\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 169,
              "character": 16
            },
            "end": {
              "line": 169,
              "character": 20
            }
          },
          "code_string": "refs = await lsp_cli"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 174,
              "character": 34
            },
            "end": {
              "line": 174,
              "character": 38
            }
          },
          "code_string": "refs:\n"
        }
      ]
    },
    {
      "name": "references",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 174,
            "character": 16
          },
          "end": {
            "line": 182,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for references in refs:\n                    code_string = \"\"\n                    (code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )\n                    reference_updated = references.model_dump()\n                    reference_updated[\"code_string\"] = code_string\n                    i[\"references\"].append(reference_updated)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "code_string",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 175,
            "character": 20
          },
          "end": {
            "line": 175,
            "character": 36
          }
        }
      },
      "kind": "Variable",
      "code_string": "code_string = \"\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 175,
              "character": 20
            },
            "end": {
              "line": 175,
              "character": 31
            }
          },
          "code_string": "code_string = \"\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 176,
              "character": 21
            },
            "end": {
              "line": 176,
              "character": 32
            }
          },
          "code_string": "code_string, l1, c1, l2, c2) = s"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 180,
              "character": 55
            },
            "end": {
              "line": 180,
              "character": 66
            }
          },
          "code_string": "code_string\n"
        }
      ]
    },
    {
      "name": "code_string",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 176,
            "character": 20
          },
          "end": {
            "line": 178,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "(code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "l1",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 176,
            "character": 20
          },
          "end": {
            "line": 178,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "(code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "c1",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 176,
            "character": 20
          },
          "end": {
            "line": 178,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "(code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "l2",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 176,
            "character": 20
          },
          "end": {
            "line": 178,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "(code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "c2",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 176,
            "character": 20
          },
          "end": {
            "line": 178,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "(code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": []
    },
    {
      "name": "reference_updated",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 179,
            "character": 20
          },
          "end": {
            "line": 179,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "reference_updated = references.model_dump()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 179,
              "character": 20
            },
            "end": {
              "line": 179,
              "character": 37
            }
          },
          "code_string": "reference_updated = references.model_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 180,
              "character": 20
            },
            "end": {
              "line": 180,
              "character": 37
            }
          },
          "code_string": "reference_updated[\"code_string\"] = co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 181,
              "character": 43
            },
            "end": {
              "line": 181,
              "character": 60
            }
          },
          "code_string": "reference_updated)\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "extract_module_from_file",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 148,
            "character": 8
          },
          "end": {
            "line": 190,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            language = self.detect_language(file_path)\n            if language == \"unknown\":\n                print(f\"Unknown language for {file_path}\")\n                return None\n\n            # Get or create LSP client\n            lsp_client = await self.get_or_create_lsp_client(language, workspace_path)\n            if not lsp_client:\n                print(f\"No LSP client available for {language}\")\n                return None\n\n            # Get document symbols\n            symbols = await lsp_client.get_document_symbols(file_path)\n            for i in symbols:\n                (i[\"code_string\"], l1, c1, l2, c2) = self.get_code_from_symbols(\n                    i, file_path, language\n                )\n                hover_details = await lsp_client.get_hover(\n                    file_path, l1, c1\n                )\n                refs = await lsp_client.get_references(\n                    file_path, l1, c1, include_declaration=True\n                )\n                i[\"hover_details\"] = hover_details\n                i[\"references\"] = []\n                for references in refs:\n                    code_string = \"\"\n                    (code_string, l1, c1, l2, c2) = self.get_code_from_symbols(\n                        references.model_dump(), file_path, language\n                    )\n                    reference_updated = references.model_dump()\n                    reference_updated[\"code_string\"] = code_string\n                    i[\"references\"].append(reference_updated)\n                i[\"kind\"] = SYMBOL_KIND_MAP[i.get(\"kind\")]\n\n            return symbols\n\n        except Exception as e:\n            print(f\"Error extracting from {file_path}: {e}\")\n            traceback.print_exc()\n            return None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "file_patterns",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 194,
            "character": 12
          },
          "end": {
            "line": 204,
            "character": 13
          }
        }
      },
      "kind": "Variable",
      "code_string": "file_patterns = [\n                \"*.py\",\n                \"*.js\",\n                \"*.ts\",\n                \"*.java\",\n                \"*.cpp\",\n                \"*.c\",\n                \"*.cs\",\n                \"*.go\",\n                \"*.rs\",\n            ]",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 194,
              "character": 12
            },
            "end": {
              "line": 194,
              "character": 25
            }
          },
          "code_string": "file_patterns = [\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 209,
              "character": 27
            },
            "end": {
              "line": 209,
              "character": 40
            }
          },
          "code_string": "file_patterns:\n"
        }
      ]
    },
    {
      "name": "root_path_obj",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 206,
            "character": 12
          },
          "end": {
            "line": 206,
            "character": 43
          }
        }
      },
      "kind": "Variable",
      "code_string": "root_path_obj = Path(root_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "PurePath subclass that can make system calls.\n\nPath represents a filesystem path but unlike PurePath, also offers\nmethods to do system calls on path objects. Depending on your system,\ninstantiating a Path will return either a PosixPath or a WindowsPath\nobject. You can also instantiate a PosixPath or WindowsPath directly,\nbut cannot instantiate a WindowsPath on a POSIX system or vice versa."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 206,
              "character": 12
            },
            "end": {
              "line": 206,
              "character": 25
            }
          },
          "code_string": "root_path_obj = Path(root"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 210,
              "character": 40
            },
            "end": {
              "line": 210,
              "character": 53
            }
          },
          "code_string": "root_path_obj.rglob(pattern))\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 249,
              "character": 34
            },
            "end": {
              "line": 249,
              "character": 47
            }
          },
          "code_string": "root_path_obj.absolute())\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 263,
              "character": 48
            },
            "end": {
              "line": 263,
              "character": 61
            }
          },
          "code_string": "root_path_obj.absolute())\n"
        }
      ]
    },
    {
      "name": "files_to_process",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 207,
            "character": 12
          },
          "end": {
            "line": 207,
            "character": 33
          }
        }
      },
      "kind": "Variable",
      "code_string": "files_to_process = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 207,
              "character": 12
            },
            "end": {
              "line": 207,
              "character": 28
            }
          },
          "code_string": "files_to_process = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 210,
              "character": 16
            },
            "end": {
              "line": 210,
              "character": 32
            }
          },
          "code_string": "files_to_process.extend(root_pat"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 226,
              "character": 29
            },
            "end": {
              "line": 226,
              "character": 45
            }
          },
          "code_string": "files_to_process:\n"
        }
      ]
    },
    {
      "name": "codebase",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 208,
            "character": 12
          },
          "end": {
            "line": 208,
            "character": 25
          }
        }
      },
      "kind": "Variable",
      "code_string": "codebase = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 208,
              "character": 12
            },
            "end": {
              "line": 208,
              "character": 20
            }
          },
          "code_string": "codebase = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 266,
              "character": 28
            },
            "end": {
              "line": 266,
              "character": 36
            }
          },
          "code_string": "codebase.append(module)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 277,
              "character": 19
            },
            "end": {
              "line": 277,
              "character": 27
            }
          },
          "code_string": "codebase\n"
        }
      ]
    },
    {
      "name": "pattern",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 209,
            "character": 12
          },
          "end": {
            "line": 211,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for pattern in file_patterns:\n                files_to_process.extend(root_path_obj.rglob(pattern))\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "ignore_dirs",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 212,
            "character": 12
          },
          "end": {
            "line": 223,
            "character": 13
          }
        }
      },
      "kind": "Variable",
      "code_string": "ignore_dirs = {\n                \".git\",\n                \"__pycache__\",\n                \".pytest_cache\",\n                \"node_modules\",\n                \".venv\",\n                \"venv\",\n                \"env\",\n                \"target\",\n                \"build\",\n                \"dist\",\n            }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nset() -> new empty set object\nset(iterable) -> new set object\n```\n\nBuild an unordered collection of unique elements."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 212,
              "character": 12
            },
            "end": {
              "line": 212,
              "character": 23
            }
          },
          "code_string": "ignore_dirs = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 229,
              "character": 39
            },
            "end": {
              "line": 229,
              "character": 50
            }
          },
          "code_string": "ignore_dirs for part in file_path.parts):\n"
        }
      ]
    },
    {
      "name": "filtered_files",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 225,
            "character": 12
          },
          "end": {
            "line": 225,
            "character": 31
          }
        }
      },
      "kind": "Variable",
      "code_string": "filtered_files = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 225,
              "character": 12
            },
            "end": {
              "line": 225,
              "character": 26
            }
          },
          "code_string": "filtered_files = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 230,
              "character": 24
            },
            "end": {
              "line": 230,
              "character": 38
            }
          },
          "code_string": "filtered_files.append(file_path)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 234,
              "character": 29
            },
            "end": {
              "line": 234,
              "character": 43
            }
          },
          "code_string": "filtered_files:\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 226,
            "character": 12
          },
          "end": {
            "line": 231,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for file_path in files_to_process:\n                if file_path.is_file():\n                    # Check if any parent directory is in ignore list\n                    if not any(part in ignore_dirs for part in file_path.parts):\n                        filtered_files.append(file_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "part",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 229,
            "character": 51
          },
          "end": {
            "line": 229,
            "character": 78
          }
        }
      },
      "kind": "Variable",
      "code_string": "for part in file_path.parts):\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "language_files",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 233,
            "character": 12
          },
          "end": {
            "line": 233,
            "character": 31
          }
        }
      },
      "kind": "Variable",
      "code_string": "language_files = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 233,
              "character": 12
            },
            "end": {
              "line": 233,
              "character": 26
            }
          },
          "code_string": "language_files = {}\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 237,
              "character": 39
            },
            "end": {
              "line": 237,
              "character": 53
            }
          },
          "code_string": "language_files:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 238,
              "character": 24
            },
            "end": {
              "line": 238,
              "character": 38
            }
          },
          "code_string": "language_files[language] = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 239,
              "character": 20
            },
            "end": {
              "line": 239,
              "character": 34
            }
          },
          "code_string": "language_files[language].append(fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 241,
              "character": 52
            },
            "end": {
              "line": 241,
              "character": 66
            }
          },
          "code_string": "language_files.keys())}\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 244,
              "character": 35
            },
            "end": {
              "line": 244,
              "character": 49
            }
          },
          "code_string": "language_files.items():\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 234,
            "character": 12
          },
          "end": {
            "line": 240,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for file_path in filtered_files:\n                language = self.detect_language(str(file_path))\n                if language != \"unknown\":\n                    if language not in language_files:\n                        language_files[language] = []\n                    language_files[language].append(file_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "language",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 235,
            "character": 16
          },
          "end": {
            "line": 235,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "language = self.detect_language(str(file_path))\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 235,
              "character": 16
            },
            "end": {
              "line": 235,
              "character": 24
            }
          },
          "code_string": "language = self.detect_l"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 236,
              "character": 19
            },
            "end": {
              "line": 236,
              "character": 27
            }
          },
          "code_string": "language != \"unknown\":\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 237,
              "character": 23
            },
            "end": {
              "line": 237,
              "character": 31
            }
          },
          "code_string": "language not in language_files:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 238,
              "character": 39
            },
            "end": {
              "line": 238,
              "character": 47
            }
          },
          "code_string": "language] = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 239,
              "character": 35
            },
            "end": {
              "line": 239,
              "character": 43
            }
          },
          "code_string": "language].append(file_path)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 244,
              "character": 16
            },
            "end": {
              "line": 244,
              "character": 24
            }
          },
          "code_string": "language, files in langu"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 245,
              "character": 49
            },
            "end": {
              "line": 245,
              "character": 57
            }
          },
          "code_string": "language} files...\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 249,
              "character": 20
            },
            "end": {
              "line": 249,
              "character": 28
            }
          },
          "code_string": "language, str(root_path_obj."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 253,
              "character": 36
            },
            "end": {
              "line": 253,
              "character": 44
            }
          },
          "code_string": "language} files due to LSP initialization fa"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 275,
              "character": 72
            },
            "end": {
              "line": 275,
              "character": 80
            }
          },
          "code_string": "language} files\"\n"
        }
      ]
    },
    {
      "name": "language",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 244,
            "character": 12
          },
          "end": {
            "line": 277,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for language, files in language_files.items():\n                print(f\"Processing {len(files)} {language} files...\")\n\n                # Initialize LSP for this language\n                lsp_client = await self.get_or_create_lsp_client(\n                    language, str(root_path_obj.absolute())\n                )\n                if not lsp_client:\n                    print(\n                        f\"Skipping {language} files due to LSP initialization failure\"\n                    )\n                    continue\n\n                # Process files\n                successful = 0\n                for file_path in files:\n                    try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n\n                print(\n                    f\"Successfully processed {successful}/{len(files)} {language} files\"\n                )\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "files",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 244,
            "character": 12
          },
          "end": {
            "line": 277,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for language, files in language_files.items():\n                print(f\"Processing {len(files)} {language} files...\")\n\n                # Initialize LSP for this language\n                lsp_client = await self.get_or_create_lsp_client(\n                    language, str(root_path_obj.absolute())\n                )\n                if not lsp_client:\n                    print(\n                        f\"Skipping {language} files due to LSP initialization failure\"\n                    )\n                    continue\n\n                # Process files\n                successful = 0\n                for file_path in files:\n                    try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n\n                print(\n                    f\"Successfully processed {successful}/{len(files)} {language} files\"\n                )\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lsp_client",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 248,
            "character": 16
          },
          "end": {
            "line": 250,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "lsp_client = await self.get_or_create_lsp_client(\n                    language, str(root_path_obj.absolute())\n                )",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 248,
              "character": 16
            },
            "end": {
              "line": 248,
              "character": 26
            }
          },
          "code_string": "lsp_client = await self.ge"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 251,
              "character": 23
            },
            "end": {
              "line": 251,
              "character": 33
            }
          },
          "code_string": "lsp_client:\n"
        }
      ]
    },
    {
      "name": "successful",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 258,
            "character": 16
          },
          "end": {
            "line": 258,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "successful = 0\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 258,
              "character": 16
            },
            "end": {
              "line": 258,
              "character": 26
            }
          },
          "code_string": "successful = 0\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 267,
              "character": 28
            },
            "end": {
              "line": 267,
              "character": 38
            }
          },
          "code_string": "successful += 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 275,
              "character": 46
            },
            "end": {
              "line": 275,
              "character": 56
            }
          },
          "code_string": "successful}/{len(files)} {language} files\"\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 259,
            "character": 16
          },
          "end": {
            "line": 273,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for file_path in files:\n                    try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "module",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 262,
            "character": 24
          },
          "end": {
            "line": 264,
            "character": 25
          }
        }
      },
      "kind": "Variable",
      "code_string": "module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 262,
              "character": 24
            },
            "end": {
              "line": 262,
              "character": 30
            }
          },
          "code_string": "module = await self.extract_mo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 265,
              "character": 27
            },
            "end": {
              "line": 265,
              "character": 33
            }
          },
          "code_string": "module:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 266,
              "character": 44
            },
            "end": {
              "line": 266,
              "character": 50
            }
          },
          "code_string": "module)\n"
        }
      ]
    },
    {
      "name": "successful",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 267,
            "character": 28
          },
          "end": {
            "line": 267,
            "character": 43
          }
        }
      },
      "kind": "Variable",
      "code_string": "successful += 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 258,
              "character": 16
            },
            "end": {
              "line": 258,
              "character": 26
            }
          },
          "code_string": "successful = 0\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 267,
              "character": 28
            },
            "end": {
              "line": 267,
              "character": 38
            }
          },
          "code_string": "successful += 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 275,
              "character": 46
            },
            "end": {
              "line": 275,
              "character": 56
            }
          },
          "code_string": "successful}/{len(files)} {language} files\"\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "extract_codebase",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 260,
            "character": 20
          },
          "end": {
            "line": 273,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                        print(file_path)\n                        module = await self.extract_module_from_file(\n                            str(file_path), str(root_path_obj.absolute())\n                        )\n                        if module:\n                            codebase.append(module)\n                            successful += 1\n                            print(f\"  \u2705 {file_path.name}\")\n                        else:\n                            print(f\"  \u274c {file_path.name}\")\n                    except Exception as e:\n                        print(f\"  \u274c {file_path.name}: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "extract_codebase_simple",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 283,
            "character": 6
          },
          "end": {
            "line": 298,
            "character": 0
          }
        }
      },
      "kind": "Function",
      "code_string": "def extract_codebase_simple(root_path: str, output_file: str = None):\n    \"\"\"Simple synchronous function to extract codebase\"\"\"\n    extractor = AsyncUniversalExtractor()\n    try:\n        codebase = await extractor.extract_codebase(root_path)\n        if output_file:\n            with open(output_file, \"w\", encoding=\"utf-8\") as f:\n                json.dump(codebase, f, indent=2, default=str)\n            print(f\"Codebase model saved to {output_file}\")\n        return codebase\n    except Exception as e:\n        print(f\"Error during extraction: {e}\")\n        # Ensure cleanup happens even if there's an error\n        await extractor.cleanup()\n        raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "extractor",
      "containerName": "extract_codebase_simple",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 285,
            "character": 4
          },
          "end": {
            "line": 285,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "extractor = AsyncUniversalExtractor()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Async universal code extractor using LSP"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 285,
              "character": 4
            },
            "end": {
              "line": 285,
              "character": 13
            }
          },
          "code_string": "extractor = A"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 287,
              "character": 25
            },
            "end": {
              "line": 287,
              "character": 34
            }
          },
          "code_string": "extractor.extract_codebase(root_pa"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 296,
              "character": 14
            },
            "end": {
              "line": 296,
              "character": 23
            }
          },
          "code_string": "extractor.cleanup()\n"
        }
      ]
    },
    {
      "name": "codebase",
      "containerName": "extract_codebase_simple",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 287,
            "character": 8
          },
          "end": {
            "line": 287,
            "character": 62
          }
        }
      },
      "kind": "Variable",
      "code_string": "codebase = await extractor.extract_codebase(root_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 287,
              "character": 8
            },
            "end": {
              "line": 287,
              "character": 16
            }
          },
          "code_string": "codebase = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 290,
              "character": 26
            },
            "end": {
              "line": 290,
              "character": 34
            }
          },
          "code_string": "codebase, f, indent=2, default=str"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 292,
              "character": 15
            },
            "end": {
              "line": 292,
              "character": 23
            }
          },
          "code_string": "codebase\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "extract_codebase_simple",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 289,
            "character": 12
          },
          "end": {
            "line": 291,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(output_file, \"w\", encoding=\"utf-8\") as f:\n                json.dump(codebase, f, indent=2, default=str)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "extract_codebase_simple",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 286,
            "character": 4
          },
          "end": {
            "line": 298,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n        codebase = await extractor.extract_codebase(root_path)\n        if output_file:\n            with open(output_file, \"w\", encoding=\"utf-8\") as f:\n                json.dump(codebase, f, indent=2, default=str)\n            print(f\"Codebase model saved to {output_file}\")\n        return codebase\n    except Exception as e:\n        print(f\"Error during extraction: {e}\")\n        # Ensure cleanup happens even if there's an error\n        await extractor.cleanup()\n        raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "codebase",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
        "range": {
          "start": {
            "line": 300,
            "character": 0
          },
          "end": {
            "line": 300,
            "character": 18
          }
        }
      },
      "kind": "Variable",
      "code_string": "codebase = (\"./\",)",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in immutable sequence.\n\nIf no argument is given, the constructor returns an empty tuple.\nIf iterable is specified the tuple is initialized from iterable's items.\n\nIf the argument is a tuple, the return value is the same object."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 300,
              "character": 0
            },
            "end": {
              "line": 300,
              "character": 8
            }
          },
          "code_string": "codebase"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_extractor.py",
          "range": {
            "start": {
              "line": 301,
              "character": 36
            },
            "end": {
              "line": 301,
              "character": 44
            }
          },
          "code_string": "codebase[0], \"python.json\"))\n"
        }
      ]
    }
  ],
  [
    {
      "name": "json",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 0,
            "character": 0
          },
          "end": {
            "line": 0,
            "character": 11
          }
        }
      },
      "kind": "Module",
      "code_string": "import json",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "asyncio",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1,
            "character": 0
          },
          "end": {
            "line": 1,
            "character": 14
          }
        }
      },
      "kind": "Module",
      "code_string": "import asyncio",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "subprocess",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 2,
            "character": 0
          },
          "end": {
            "line": 2,
            "character": 17
          }
        }
      },
      "kind": "Module",
      "code_string": "import subprocess",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "os",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 3,
            "character": 0
          },
          "end": {
            "line": 3,
            "character": 9
          }
        }
      },
      "kind": "Module",
      "code_string": "import os",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "threading",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 4,
            "character": 0
          },
          "end": {
            "line": 4,
            "character": 16
          }
        }
      },
      "kind": "Module",
      "code_string": "import threading",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uuid",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 5,
            "character": 0
          },
          "end": {
            "line": 5,
            "character": 11
          }
        }
      },
      "kind": "Module",
      "code_string": "import uuid",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "time",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 6,
            "character": 0
          },
          "end": {
            "line": 6,
            "character": 11
          }
        }
      },
      "kind": "Module",
      "code_string": "import time",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "logging",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 7,
            "character": 0
          },
          "end": {
            "line": 7,
            "character": 14
          }
        }
      },
      "kind": "Module",
      "code_string": "import logging",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Dict",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "List",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Any",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Optional",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Callable",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Union",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Tuple",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 8,
            "character": 0
          },
          "end": {
            "line": 8,
            "character": 68
          }
        }
      },
      "kind": "Class",
      "code_string": "from typing import Dict, List, Any, Optional, Callable, Union, Tuple",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Enum",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 9,
            "character": 0
          },
          "end": {
            "line": 9,
            "character": 21
          }
        }
      },
      "kind": "Class",
      "code_string": "from enum import Enum",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "Path",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 10,
            "character": 0
          },
          "end": {
            "line": 10,
            "character": 24
          }
        }
      },
      "kind": "Class",
      "code_string": "from pathlib import Path",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "urllib",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 11,
            "character": 0
          },
          "end": {
            "line": 11,
            "character": 19
          }
        }
      },
      "kind": "Module",
      "code_string": "import urllib.parse",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "BaseModel",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 13,
            "character": 0
          },
          "end": {
            "line": 13,
            "character": 30
          }
        }
      },
      "kind": "Class",
      "code_string": "from pydantic import BaseModel",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "logger",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 17,
            "character": 0
          },
          "end": {
            "line": 17,
            "character": 36
          }
        }
      },
      "kind": "Variable",
      "code_string": "logger = logging.getLogger(__name__)",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Instances of the Logger class represent a single logging channel. A\n\"logging channel\" indicates an area of an application. Exactly how an\n\"area\" is defined is up to the application developer. Since an\napplication can have any number of areas, logging channels are identified\nby a unique string. Application areas can be nested (e.g. an area\nof \"input processing\" might include sub-areas \"read CSV files\", \"read\nXLS files\" and \"read Gnumeric files\"). To cater for this natural nesting,\nchannel names are organized into a namespace hierarchy where levels are\nseparated by periods, much like the Java or Python package namespace. So\nin the instance given above, channel names might be \"input\" for the upper\nlevel, and \"input.csv\", \"input.xls\" and \"input.gnu\" for the sub-levels.\nThere is no arbitrary limit to the depth of nesting."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 17,
              "character": 0
            },
            "end": {
              "line": 17,
              "character": 6
            }
          },
          "code_string": "logger"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 194,
              "character": 12
            },
            "end": {
              "line": 194,
              "character": 18
            }
          },
          "code_string": "logger.info(f\"Star"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 203,
              "character": 12
            },
            "end": {
              "line": 203,
              "character": 18
            }
          },
          "code_string": "logger.error(f\"Fai"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 218,
              "character": 24
            },
            "end": {
              "line": 218,
              "character": 30
            }
          },
          "code_string": "logger.info(f\"LSP stderr: {dec"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 222,
              "character": 16
            },
            "end": {
              "line": 222,
              "character": 22
            }
          },
          "code_string": "logger.error(f\"Error r"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 254,
              "character": 24
            },
            "end": {
              "line": 254,
              "character": 30
            }
          },
          "code_string": "logger.error(\"No Content-Lengt"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 274,
              "character": 24
            },
            "end": {
              "line": 274,
              "character": 30
            }
          },
          "code_string": "logger.error(f\"Error processin"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 277,
              "character": 16
            },
            "end": {
              "line": 277,
              "character": 22
            }
          },
          "code_string": "logger.error(f\"Error r"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 322,
              "character": 28
            },
            "end": {
              "line": 322,
              "character": 34
            }
          },
          "code_string": "logger.error(f\"Error handling noti"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 328,
              "character": 12
            },
            "end": {
              "line": 328,
              "character": 18
            }
          },
          "code_string": "logger.error(f\"Err"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 361,
              "character": 12
            },
            "end": {
              "line": 361,
              "character": 18
            }
          },
          "code_string": "logger.debug(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 380,
              "character": 12
            },
            "end": {
              "line": 380,
              "character": 18
            }
          },
          "code_string": "logger.error(f\"Err"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 496,
              "character": 8
            },
            "end": {
              "line": 496,
              "character": 14
            }
          },
          "code_string": "logger.info(\"L"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 517,
              "character": 12
            },
            "end": {
              "line": 517,
              "character": 18
            }
          },
          "code_string": "logger.error(f\"Err"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 534,
              "character": 16
            },
            "end": {
              "line": 534,
              "character": 22
            }
          },
          "code_string": "logger.error(f\"Error s"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 536,
              "character": 8
            },
            "end": {
              "line": 536,
              "character": 14
            }
          },
          "code_string": "logger.info(\"L"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 566,
              "character": 8
            },
            "end": {
              "line": 566,
              "character": 14
            }
          },
          "code_string": "logger.debug(f"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 609,
              "character": 8
            },
            "end": {
              "line": 609,
              "character": 14
            }
          },
          "code_string": "logger.debug(f"
        }
      ]
    },
    {
      "name": "LSPMessageType",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 20,
            "character": 0
          },
          "end": {
            "line": 24,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class LSPMessageType(Enum):\n    REQUEST = \"request\"\n    RESPONSE = \"response\"\n    NOTIFICATION = \"notification\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "REQUEST",
      "containerName": "LSPMessageType",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 21,
            "character": 4
          },
          "end": {
            "line": 21,
            "character": 23
          }
        }
      },
      "kind": "Field",
      "code_string": "REQUEST = \"request\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 21,
              "character": 4
            },
            "end": {
              "line": 21,
              "character": 11
            }
          },
          "code_string": "REQUEST = \""
        }
      ]
    },
    {
      "name": "RESPONSE",
      "containerName": "LSPMessageType",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 22,
            "character": 4
          },
          "end": {
            "line": 22,
            "character": 25
          }
        }
      },
      "kind": "Field",
      "code_string": "RESPONSE = \"response\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 22,
              "character": 4
            },
            "end": {
              "line": 22,
              "character": 12
            }
          },
          "code_string": "RESPONSE = \""
        }
      ]
    },
    {
      "name": "NOTIFICATION",
      "containerName": "LSPMessageType",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 23,
            "character": 4
          },
          "end": {
            "line": 23,
            "character": 33
          }
        }
      },
      "kind": "Field",
      "code_string": "NOTIFICATION = \"notification\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 23,
              "character": 4
            },
            "end": {
              "line": 23,
              "character": 16
            }
          },
          "code_string": "NOTIFICATION = \""
        }
      ]
    },
    {
      "name": "Position",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 26,
            "character": 0
          },
          "end": {
            "line": 31,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class Position(BaseModel):\n    \"\"\"LSP Position structure\"\"\"\n\n    line: int  # 0-based\n    character: int  # 0-based\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "line",
      "containerName": "Position",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 29,
            "character": 4
          },
          "end": {
            "line": 29,
            "character": 13
          }
        }
      },
      "kind": "Field",
      "code_string": "line: int  # ",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 29,
              "character": 4
            },
            "end": {
              "line": 29,
              "character": 8
            }
          },
          "code_string": "line: in"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 881,
              "character": 57
            },
            "end": {
              "line": 881,
              "character": 61
            }
          },
          "code_string": "line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 885,
              "character": 55
            },
            "end": {
              "line": 885,
              "character": 59
            }
          },
          "code_string": "line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 977,
              "character": 46
            },
            "end": {
              "line": 977,
              "character": 50
            }
          },
          "code_string": "line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 979,
              "character": 42
            },
            "end": {
              "line": 979,
              "character": 46
            }
          },
          "code_string": "line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1065,
              "character": 46
            },
            "end": {
              "line": 1065,
              "character": 50
            }
          },
          "code_string": "line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1066,
              "character": 42
            },
            "end": {
              "line": 1066,
              "character": 46
            }
          },
          "code_string": "line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1100,
              "character": 39
            },
            "end": {
              "line": 1100,
              "character": 43
            }
          },
          "code_string": "line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1145,
              "character": 44
            },
            "end": {
              "line": 1145,
              "character": 48
            }
          },
          "code_string": "line + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1158,
              "character": 36
            },
            "end": {
              "line": 1158,
              "character": 40
            }
          },
          "code_string": "line < len(lines):\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1159,
              "character": 58
            },
            "end": {
              "line": 1159,
              "character": 62
            }
          },
          "code_string": "line].rstrip()\n"
        }
      ]
    },
    {
      "name": "character",
      "containerName": "Position",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 30,
            "character": 4
          },
          "end": {
            "line": 30,
            "character": 18
          }
        }
      },
      "kind": "Field",
      "code_string": "character: int  # ",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 30,
              "character": 4
            },
            "end": {
              "line": 30,
              "character": 13
            }
          },
          "code_string": "character: in"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 882,
              "character": 62
            },
            "end": {
              "line": 882,
              "character": 71
            }
          },
          "code_string": "character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 886,
              "character": 60
            },
            "end": {
              "line": 886,
              "character": 69
            }
          },
          "code_string": "character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 978,
              "character": 46
            },
            "end": {
              "line": 978,
              "character": 55
            }
          },
          "code_string": "character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 980,
              "character": 42
            },
            "end": {
              "line": 980,
              "character": 51
            }
          },
          "code_string": "character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 72
            },
            "end": {
              "line": 1079,
              "character": 81
            }
          },
          "code_string": "character + 1} - L{end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 126
            },
            "end": {
              "line": 1079,
              "character": 135
            }
          },
          "code_string": "character + 1}\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1101,
              "character": 39
            },
            "end": {
              "line": 1101,
              "character": 48
            }
          },
          "code_string": "character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1146,
              "character": 44
            },
            "end": {
              "line": 1146,
              "character": 53
            }
          },
          "code_string": "character + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 38
            },
            "end": {
              "line": 1164,
              "character": 47
            }
          },
          "code_string": "character > diag.range.start.character:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 67
            },
            "end": {
              "line": 1164,
              "character": 76
            }
          },
          "code_string": "character:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1166,
              "character": 43
            },
            "end": {
              "line": 1166,
              "character": 52
            }
          },
          "code_string": "character - diag.range.start.character - 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1166,
              "character": 72
            },
            "end": {
              "line": 1166,
              "character": 81
            }
          },
          "code_string": "character - 1\n"
        }
      ]
    },
    {
      "name": "Range",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 33,
            "character": 0
          },
          "end": {
            "line": 38,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class Range(BaseModel):\n    \"\"\"LSP Range structure\"\"\"\n\n    start: Position\n    end: Position\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "start",
      "containerName": "Range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 36,
            "character": 4
          },
          "end": {
            "line": 36,
            "character": 19
          }
        }
      },
      "kind": "Field",
      "code_string": "start: Position\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Position structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 36,
              "character": 4
            },
            "end": {
              "line": 36,
              "character": 9
            }
          },
          "code_string": "start: Po"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 881,
              "character": 51
            },
            "end": {
              "line": 881,
              "character": 56
            }
          },
          "code_string": "start.line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 882,
              "character": 56
            },
            "end": {
              "line": 882,
              "character": 61
            }
          },
          "code_string": "start.character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 977,
              "character": 40
            },
            "end": {
              "line": 977,
              "character": 45
            }
          },
          "code_string": "start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 978,
              "character": 40
            },
            "end": {
              "line": 978,
              "character": 45
            }
          },
          "code_string": "start.character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1065,
              "character": 40
            },
            "end": {
              "line": 1065,
              "character": 45
            }
          },
          "code_string": "start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 66
            },
            "end": {
              "line": 1079,
              "character": 71
            }
          },
          "code_string": "start.character + 1} - L{end_line + 1}:C{location.range.end.character +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1100,
              "character": 33
            },
            "end": {
              "line": 1100,
              "character": 38
            }
          },
          "code_string": "start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1101,
              "character": 33
            },
            "end": {
              "line": 1101,
              "character": 38
            }
          },
          "code_string": "start.character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1145,
              "character": 38
            },
            "end": {
              "line": 1145,
              "character": 43
            }
          },
          "code_string": "start.line + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1146,
              "character": 38
            },
            "end": {
              "line": 1146,
              "character": 43
            }
          },
          "code_string": "start.character + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1158,
              "character": 30
            },
            "end": {
              "line": 1158,
              "character": 35
            }
          },
          "code_string": "start.line < len(lines):\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1159,
              "character": 52
            },
            "end": {
              "line": 1159,
              "character": 57
            }
          },
          "code_string": "start.line].rstrip()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 61
            },
            "end": {
              "line": 1164,
              "character": 66
            }
          },
          "code_string": "start.character:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1166,
              "character": 66
            },
            "end": {
              "line": 1166,
              "character": 71
            }
          },
          "code_string": "start.character - 1\n"
        }
      ]
    },
    {
      "name": "end",
      "containerName": "Range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 37,
            "character": 4
          },
          "end": {
            "line": 37,
            "character": 17
          }
        }
      },
      "kind": "Field",
      "code_string": "end: Position\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Position structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 37,
              "character": 4
            },
            "end": {
              "line": 37,
              "character": 7
            }
          },
          "code_string": "end: Po"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 885,
              "character": 51
            },
            "end": {
              "line": 885,
              "character": 54
            }
          },
          "code_string": "end.line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 886,
              "character": 56
            },
            "end": {
              "line": 886,
              "character": 59
            }
          },
          "code_string": "end.character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 979,
              "character": 38
            },
            "end": {
              "line": 979,
              "character": 41
            }
          },
          "code_string": "end.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 980,
              "character": 38
            },
            "end": {
              "line": 980,
              "character": 41
            }
          },
          "code_string": "end.character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1066,
              "character": 38
            },
            "end": {
              "line": 1066,
              "character": 41
            }
          },
          "code_string": "end.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 122
            },
            "end": {
              "line": 1079,
              "character": 125
            }
          },
          "code_string": "end.character + 1}\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 34
            },
            "end": {
              "line": 1164,
              "character": 37
            }
          },
          "code_string": "end.character > diag.range.start.char"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1166,
              "character": 39
            },
            "end": {
              "line": 1166,
              "character": 42
            }
          },
          "code_string": "end.character - diag.range.start.character"
        }
      ]
    },
    {
      "name": "Location",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 40,
            "character": 0
          },
          "end": {
            "line": 45,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class Location(BaseModel):\n    \"\"\"LSP Location structure\"\"\"\n\n    uri: str\n    range: Range\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "Location",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 43,
            "character": 4
          },
          "end": {
            "line": 43,
            "character": 12
          }
        }
      },
      "kind": "Field",
      "code_string": "uri: str\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 43,
              "character": 4
            },
            "end": {
              "line": 43,
              "character": 7
            }
          },
          "code_string": "uri: st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1059,
              "character": 53
            },
            "end": {
              "line": 1059,
              "character": 56
            }
          },
          "code_string": "uri)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1099,
              "character": 51
            },
            "end": {
              "line": 1099,
              "character": 54
            }
          },
          "code_string": "uri)\n"
        }
      ]
    },
    {
      "name": "range",
      "containerName": "Location",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 44,
            "character": 4
          },
          "end": {
            "line": 44,
            "character": 16
          }
        }
      },
      "kind": "Field",
      "code_string": "range: Range\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Range structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 44,
              "character": 4
            },
            "end": {
              "line": 44,
              "character": 9
            }
          },
          "code_string": "range: Ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1065,
              "character": 34
            },
            "end": {
              "line": 1065,
              "character": 39
            }
          },
          "code_string": "range.start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1066,
              "character": 32
            },
            "end": {
              "line": 1066,
              "character": 37
            }
          },
          "code_string": "range.end.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 60
            },
            "end": {
              "line": 1079,
              "character": 65
            }
          },
          "code_string": "range.start.character + 1} - L{end_line + 1}:C{location.range.end"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 116
            },
            "end": {
              "line": 1079,
              "character": 121
            }
          },
          "code_string": "range.end.character + 1}\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1100,
              "character": 27
            },
            "end": {
              "line": 1100,
              "character": 32
            }
          },
          "code_string": "range.start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1101,
              "character": 27
            },
            "end": {
              "line": 1101,
              "character": 32
            }
          },
          "code_string": "range.start.character\n"
        }
      ]
    },
    {
      "name": "TextEdit",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 47,
            "character": 0
          },
          "end": {
            "line": 52,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class TextEdit(BaseModel):\n    \"\"\"LSP TextEdit structure\"\"\"\n\n    range: Range\n    newText: str\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "range",
      "containerName": "TextEdit",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 50,
            "character": 4
          },
          "end": {
            "line": 50,
            "character": 16
          }
        }
      },
      "kind": "Field",
      "code_string": "range: Range\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Range structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 50,
              "character": 4
            },
            "end": {
              "line": 50,
              "character": 9
            }
          },
          "code_string": "range: Ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 977,
              "character": 34
            },
            "end": {
              "line": 977,
              "character": 39
            }
          },
          "code_string": "range.start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 978,
              "character": 34
            },
            "end": {
              "line": 978,
              "character": 39
            }
          },
          "code_string": "range.start.character\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 979,
              "character": 32
            },
            "end": {
              "line": 979,
              "character": 37
            }
          },
          "code_string": "range.end.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 980,
              "character": 32
            },
            "end": {
              "line": 980,
              "character": 37
            }
          },
          "code_string": "range.end.character\n"
        }
      ]
    },
    {
      "name": "newText",
      "containerName": "TextEdit",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 51,
            "character": 4
          },
          "end": {
            "line": 51,
            "character": 16
          }
        }
      },
      "kind": "Field",
      "code_string": "newText: str\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 51,
              "character": 4
            },
            "end": {
              "line": 51,
              "character": 11
            }
          },
          "code_string": "newText: st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 986,
              "character": 49
            },
            "end": {
              "line": 986,
              "character": 56
            }
          },
          "code_string": "newText + line[end_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 994,
              "character": 60
            },
            "end": {
              "line": 994,
              "character": 67
            }
          },
          "code_string": "newText + end_line_content\n"
        }
      ]
    },
    {
      "name": "Diagnostic",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 54,
            "character": 0
          },
          "end": {
            "line": 62,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class Diagnostic(BaseModel):\n    \"\"\"LSP Diagnostic structure\"\"\"\n\n    range: Range\n    message: str\n    severity: Optional[int] = None\n    code: Optional[Union[int, str]] = None\n    source: Optional[str] = None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "range",
      "containerName": "Diagnostic",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 57,
            "character": 4
          },
          "end": {
            "line": 57,
            "character": 16
          }
        }
      },
      "kind": "Field",
      "code_string": "range: Range\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Range structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 57,
              "character": 4
            },
            "end": {
              "line": 57,
              "character": 9
            }
          },
          "code_string": "range: Ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 881,
              "character": 45
            },
            "end": {
              "line": 881,
              "character": 50
            }
          },
          "code_string": "range.start.line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 882,
              "character": 50
            },
            "end": {
              "line": 882,
              "character": 55
            }
          },
          "code_string": "range.start.character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 885,
              "character": 45
            },
            "end": {
              "line": 885,
              "character": 50
            }
          },
          "code_string": "range.end.line,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 886,
              "character": 50
            },
            "end": {
              "line": 886,
              "character": 55
            }
          },
          "code_string": "range.end.character,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1145,
              "character": 32
            },
            "end": {
              "line": 1145,
              "character": 37
            }
          },
          "code_string": "range.start.line + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1146,
              "character": 32
            },
            "end": {
              "line": 1146,
              "character": 37
            }
          },
          "code_string": "range.start.character + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1158,
              "character": 24
            },
            "end": {
              "line": 1158,
              "character": 29
            }
          },
          "code_string": "range.start.line < len(lines)"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1159,
              "character": 46
            },
            "end": {
              "line": 1159,
              "character": 51
            }
          },
          "code_string": "range.start.line].rstrip()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 28
            },
            "end": {
              "line": 1164,
              "character": 33
            }
          },
          "code_string": "range.end.character > diag.range."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1164,
              "character": 55
            },
            "end": {
              "line": 1164,
              "character": 60
            }
          },
          "code_string": "range.start.character:\n"
        }
      ]
    },
    {
      "name": "message",
      "containerName": "Diagnostic",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 58,
            "character": 4
          },
          "end": {
            "line": 58,
            "character": 16
          }
        }
      },
      "kind": "Field",
      "code_string": "message: str\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 58,
              "character": 4
            },
            "end": {
              "line": 58,
              "character": 11
            }
          },
          "code_string": "message: st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 889,
              "character": 40
            },
            "end": {
              "line": 889,
              "character": 47
            }
          },
          "code_string": "message,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 43
            },
            "end": {
              "line": 1150,
              "character": 50
            }
          },
          "code_string": "message}\\n\"\n"
        }
      ]
    },
    {
      "name": "severity",
      "containerName": "Diagnostic",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 59,
            "character": 4
          },
          "end": {
            "line": 59,
            "character": 34
          }
        }
      },
      "kind": "Field",
      "code_string": "severity: Optional[int] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 59,
              "character": 4
            },
            "end": {
              "line": 59,
              "character": 12
            }
          },
          "code_string": "severity: Op"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 890,
              "character": 41
            },
            "end": {
              "line": 890,
              "character": 49
            }
          },
          "code_string": "severity,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1144,
              "character": 49
            },
            "end": {
              "line": 1144,
              "character": 57
            }
          },
          "code_string": "severity, \"UNKNOWN\")\n"
        }
      ]
    },
    {
      "name": "code",
      "containerName": "Diagnostic",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 60,
            "character": 4
          },
          "end": {
            "line": 60,
            "character": 42
          }
        }
      },
      "kind": "Field",
      "code_string": "code: Optional[Union[int, str]] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 60,
              "character": 4
            },
            "end": {
              "line": 60,
              "character": 8
            }
          },
          "code_string": "code: Op"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 891,
              "character": 37
            },
            "end": {
              "line": 891,
              "character": 41
            }
          },
          "code_string": "code,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1152,
              "character": 24
            },
            "end": {
              "line": 1152,
              "character": 28
            }
          },
          "code_string": "code:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 44
            },
            "end": {
              "line": 1153,
              "character": 48
            }
          },
          "code_string": "code}\\n\"\n"
        }
      ]
    },
    {
      "name": "source",
      "containerName": "Diagnostic",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 61,
            "character": 4
          },
          "end": {
            "line": 61,
            "character": 32
          }
        }
      },
      "kind": "Field",
      "code_string": "source: Optional[str] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 61,
              "character": 4
            },
            "end": {
              "line": 61,
              "character": 10
            }
          },
          "code_string": "source: Op"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 892,
              "character": 39
            },
            "end": {
              "line": 892,
              "character": 45
            }
          },
          "code_string": "source,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1154,
              "character": 24
            },
            "end": {
              "line": 1154,
              "character": 30
            }
          },
          "code_string": "source:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 46
            },
            "end": {
              "line": 1155,
              "character": 52
            }
          },
          "code_string": "source}\\n\"\n"
        }
      ]
    },
    {
      "name": "LSPMessage",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 64,
            "character": 0
          },
          "end": {
            "line": 73,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class LSPMessage(BaseModel):\n    \"\"\"LSP Message structure\"\"\"\n\n    jsonrpc: str = \"2.0\"\n    id: Optional[Union[str, int]] = None\n    method: Optional[str] = None\n    params: Optional[Dict[str, Any]] = None\n    result: Optional[Any] = None\n    error: Optional[Dict[str, Any]] = None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "jsonrpc",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 67,
            "character": 4
          },
          "end": {
            "line": 67,
            "character": 24
          }
        }
      },
      "kind": "Field",
      "code_string": "jsonrpc: str = \"2.0\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 67,
              "character": 4
            },
            "end": {
              "line": 67,
              "character": 11
            }
          },
          "code_string": "jsonrpc: st"
        }
      ]
    },
    {
      "name": "id",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 68,
            "character": 4
          },
          "end": {
            "line": 68,
            "character": 40
          }
        }
      },
      "kind": "Field",
      "code_string": "id: Optional[Union[str, int]] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 68,
              "character": 4
            },
            "end": {
              "line": 68,
              "character": 6
            }
          },
          "code_string": "id: Op"
        }
      ]
    },
    {
      "name": "method",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 69,
            "character": 4
          },
          "end": {
            "line": 69,
            "character": 32
          }
        }
      },
      "kind": "Field",
      "code_string": "method: Optional[str] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 69,
              "character": 4
            },
            "end": {
              "line": 69,
              "character": 10
            }
          },
          "code_string": "method: Op"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 70,
            "character": 4
          },
          "end": {
            "line": 70,
            "character": 43
          }
        }
      },
      "kind": "Field",
      "code_string": "params: Optional[Dict[str, Any]] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 70,
              "character": 4
            },
            "end": {
              "line": 70,
              "character": 10
            }
          },
          "code_string": "params: Op"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 71,
            "character": 4
          },
          "end": {
            "line": 71,
            "character": 32
          }
        }
      },
      "kind": "Field",
      "code_string": "result: Optional[Any] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 71,
              "character": 4
            },
            "end": {
              "line": 71,
              "character": 10
            }
          },
          "code_string": "result: Op"
        }
      ]
    },
    {
      "name": "error",
      "containerName": "LSPMessage",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 72,
            "character": 4
          },
          "end": {
            "line": 72,
            "character": 42
          }
        }
      },
      "kind": "Field",
      "code_string": "error: Optional[Dict[str, Any]] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 72,
              "character": 4
            },
            "end": {
              "line": 72,
              "character": 9
            }
          },
          "code_string": "error: Op"
        }
      ]
    },
    {
      "name": "LSPError",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 75,
            "character": 0
          },
          "end": {
            "line": 83,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class LSPError(Exception):\n    \"\"\"LSP specific error\"\"\"\n\n    def __init__(self, code: int, message: str, data: Any = None):\n        self.code = code\n        self.message = message\n        self.data = data\n        super().__init__(f\"LSP Error {code}: {message}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__init__",
      "containerName": "LSPError",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 78,
            "character": 4
          },
          "end": {
            "line": 83,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __init__(self, code: int, message: str, data: Any = None):\n        self.code = code\n        self.message = message\n        self.data = data\n        super().__init__(f\"LSP Error {code}: {message}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "code",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 79,
            "character": 8
          },
          "end": {
            "line": 79,
            "character": 24
          }
        }
      },
      "kind": "Field",
      "code_string": "self.code = code\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 78,
              "character": 17
            },
            "end": {
              "line": 78,
              "character": 21
            }
          },
          "code_string": "self, code: int, mess"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 79,
              "character": 8
            },
            "end": {
              "line": 79,
              "character": 12
            }
          },
          "code_string": "self.code = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 80,
              "character": 8
            },
            "end": {
              "line": 80,
              "character": 12
            }
          },
          "code_string": "self.message"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 81,
              "character": 8
            },
            "end": {
              "line": 81,
              "character": 12
            }
          },
          "code_string": "self.data = "
        }
      ]
    },
    {
      "name": "message",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 80,
            "character": 8
          },
          "end": {
            "line": 80,
            "character": 30
          }
        }
      },
      "kind": "Field",
      "code_string": "self.message = message\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 78,
              "character": 17
            },
            "end": {
              "line": 78,
              "character": 21
            }
          },
          "code_string": "self, code: int, mess"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 79,
              "character": 8
            },
            "end": {
              "line": 79,
              "character": 12
            }
          },
          "code_string": "self.code = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 80,
              "character": 8
            },
            "end": {
              "line": 80,
              "character": 12
            }
          },
          "code_string": "self.message"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 81,
              "character": 8
            },
            "end": {
              "line": 81,
              "character": 12
            }
          },
          "code_string": "self.data = "
        }
      ]
    },
    {
      "name": "data",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 81,
            "character": 8
          },
          "end": {
            "line": 81,
            "character": 24
          }
        }
      },
      "kind": "Field",
      "code_string": "self.data = data\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 78,
              "character": 17
            },
            "end": {
              "line": 78,
              "character": 21
            }
          },
          "code_string": "self, code: int, mess"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 79,
              "character": 8
            },
            "end": {
              "line": 79,
              "character": 12
            }
          },
          "code_string": "self.code = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 80,
              "character": 8
            },
            "end": {
              "line": 80,
              "character": 12
            }
          },
          "code_string": "self.message"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 81,
              "character": 8
            },
            "end": {
              "line": 81,
              "character": 12
            }
          },
          "code_string": "self.data = "
        }
      ]
    },
    {
      "name": "LSPClient",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 85,
            "character": 0
          },
          "end": {
            "line": 1028,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class LSPClient:\n    \"\"\"\n    Language Server Protocol Client implementation\n    \"\"\"\n\n    def __init__(self, command: str, args: List[str] = None, cwd: str = None):\n        self.command = command\n        self.args = args or []\n        self.cwd = cwd or os.getcwd()\n\n        # Process management\n        self.process: Optional[subprocess.Popen] = None\n        self.running = False\n\n        # Message handling\n        self.request_id = 0\n        self.pending_requests: Dict[Union[str, int], asyncio.Future] = {}\n        self.notification_handlers: Dict[str, Callable] = {}\n        self.request_handlers: Dict[str, Callable] = {}\n\n        # State management\n        self.initialized = False\n        self.server_capabilities: Dict[str, Any] = {}\n        self.open_files: Dict[str, Dict[str, Any]] = {}\n        self.diagnostics: Dict[str, List[Diagnostic]] = {}\n\n        # Async management\n        self.read_task: Optional[asyncio.Task] = None\n        self.lock = asyncio.Lock()\n\n    def path_to_uri(self, path: str) -> str:\n        \"\"\"Convert file path to URI\"\"\"\n        abs_path = os.path.abspath(path)\n        return f\"file://{urllib.parse.quote(abs_path)}\"\n\n    def uri_to_path(self, uri: str) -> str:\n        \"\"\"Convert URI to file path\"\"\"\n        if uri.startswith(\"file://\"):\n            return urllib.parse.unquote(uri[7:])\n        return uri\n\n    def detect_language_id(self, file_path: str) -> str:\n        \"\"\"Detect language ID from file extension\"\"\"\n        ext = Path(file_path).suffix.lower()\n        language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".java\": \"java\",\n            \".c\": \"c\",\n            \".cpp\": \"cpp\",\n            \".cc\": \"cpp\",\n            \".cxx\": \"cpp\",\n            \".h\": \"c\",\n            \".hpp\": \"cpp\",\n            \".cs\": \"csharp\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".clj\": \"clojure\",\n            \".dart\": \"dart\",\n            \".lua\": \"lua\",\n            \".sh\": \"shellscript\",\n            \".bash\": \"shellscript\",\n            \".zsh\": \"shellscript\",\n            \".fish\": \"shellscript\",\n            \".ps1\": \"powershell\",\n            \".sql\": \"sql\",\n            \".html\": \"html\",\n            \".htm\": \"html\",\n            \".css\": \"css\",\n            \".scss\": \"scss\",\n            \".sass\": \"sass\",\n            \".less\": \"less\",\n            \".xml\": \"xml\",\n            \".json\": \"json\",\n            \".yaml\": \"yaml\",\n            \".yml\": \"yaml\",\n            \".toml\": \"toml\",\n            \".md\": \"markdown\",\n            \".tex\": \"latex\",\n            \".r\": \"r\",\n            \".R\": \"r\",\n        }\n        return language_map.get(ext, \"plaintext\")\n\n    async def start(self) -> None:\n        \"\"\"Start the LSP server process\"\"\"\n        if self.running:\n            return\n\n        try:\n            # Start the language server process\n            cmd = [self.command] + self.args\n            self.process = subprocess.Popen(\n                cmd,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                cwd=self.cwd,\n                text=False,\n                bufsize=0,\n            )\n\n            self.running = True\n            logger.info(f\"Started LSP server: {' '.join(cmd)}\")\n\n            # Start reading messages\n            self.read_task = asyncio.create_task(self._read_messages())\n\n            # Start stderr monitoring\n            asyncio.create_task(self._monitor_stderr())\n\n        except Exception as e:\n            logger.error(f\"Failed to start LSP server: {e}\")\n            raise\n\n    async def _monitor_stderr(self) -> None:\n        \"\"\"Monitor stderr output from the language server\"\"\"\n        if not self.process or not self.process.stderr:\n            return\n\n        loop = asyncio.get_event_loop()\n        while self.running:\n            try:\n                line = await loop.run_in_executor(None, self.process.stderr.readline)\n                if line:\n                    decoded_line = line.decode(\"utf-8\", errors=\"ignore\").strip()\n                    if decoded_line:\n                        logger.info(f\"LSP stderr: {decoded_line}\")\n                else:\n                    break\n            except Exception as e:\n                logger.error(f\"Error reading stderr: {e}\")\n                break\n\n    async def _read_messages(self) -> None:\n        \"\"\"Read messages from the LSP server\"\"\"\n        buffer = b\"\"\n\n        while self.running and self.process and self.process.stdout:\n            try:\n                # Read data\n                data = await asyncio.get_event_loop().run_in_executor(\n                    None, self.process.stdout.read, 4096\n                )\n\n                if not data:\n                    break\n\n                buffer += data\n\n                # Process complete messages\n                while b\"\\r\\n\\r\\n\" in buffer:\n                    header_end = buffer.find(b\"\\r\\n\\r\\n\")\n                    header = buffer[:header_end].decode(\"utf-8\")\n\n                    # Parse content length\n                    content_length = None\n                    for line in header.split(\"\\r\\n\"):\n                        if line.startswith(\"Content-Length:\"):\n                            content_length = int(line.split(\":\")[1].strip())\n                            break\n\n                    if content_length is None:\n                        logger.error(\"No Content-Length header found\")\n                        buffer = buffer[header_end + 4 :]\n                        continue\n\n                    # Check if we have the complete message\n                    message_start = header_end + 4\n                    if len(buffer) < message_start + content_length:\n                        break\n\n                    # Extract and process message\n                    message_data = buffer[\n                        message_start : message_start + content_length\n                    ]\n                    buffer = buffer[message_start + content_length :]\n\n                    try:\n                        message_str = message_data.decode(\"utf-8\")\n                        message = json.loads(message_str)\n                        await self._handle_message(message)\n                    except Exception as e:\n                        logger.error(f\"Error processing message: {e}\")\n\n            except Exception as e:\n                logger.error(f\"Error reading from LSP server: {e}\")\n                break\n\n    async def _handle_message(self, message: Dict[str, Any]) -> None:\n        \"\"\"Handle incoming LSP message\"\"\"\n        try:\n            if \"id\" in message and \"method\" not in message:\n                # Response\n                msg_id = message[\"id\"]\n                if msg_id in self.pending_requests:\n                    future = self.pending_requests.pop(msg_id)\n                    if \"error\" in message:\n                        error = message[\"error\"]\n                        future.set_exception(\n                            LSPError(\n                                error.get(\"code\", -1),\n                                error.get(\"message\", \"Unknown error\"),\n                                error.get(\"data\"),\n                            )\n                        )\n                    else:\n                        future.set_result(message.get(\"result\"))\n\n            elif \"method\" in message:\n                method = message[\"method\"]\n                params = message.get(\"params\", {})\n\n                if \"id\" in message:\n                    # Server request\n                    if method in self.request_handlers:\n                        try:\n                            result = await self.request_handlers[method](params)\n                            await self._send_response(message[\"id\"], result)\n                        except Exception as e:\n                            await self._send_error(message[\"id\"], -32603, str(e))\n                    else:\n                        await self._send_error(\n                            message[\"id\"], -32601, f\"Method not found: {method}\"\n                        )\n                else:\n                    # Notification\n                    if method in self.notification_handlers:\n                        try:\n                            await self.notification_handlers[method](params)\n                        except Exception as e:\n                            logger.error(f\"Error handling notification {method}: {e}\")\n\n                    # Handle built-in notifications\n                    await self._handle_builtin_notification(method, params)\n\n        except Exception as e:\n            logger.error(f\"Error handling message: {e}\")\n\n    async def _handle_builtin_notification(\n        self, method: str, params: Dict[str, Any]\n    ) -> None:\n        \"\"\"Handle built-in LSP notifications\"\"\"\n        if method == \"textDocument/publishDiagnostics\":\n            uri = params.get(\"uri\", \"\")\n            diagnostics_data = params.get(\"diagnostics\", [])\n\n            # Convert to Diagnostic objects\n            diagnostics = []\n            for diag_data in diagnostics_data:\n                range_data = diag_data[\"range\"]\n                diag = Diagnostic(\n                    range=Range(\n                        start=Position(\n                            line=range_data[\"start\"][\"line\"],\n                            character=range_data[\"start\"][\"character\"],\n                        ),\n                        end=Position(\n                            line=range_data[\"end\"][\"line\"],\n                            character=range_data[\"end\"][\"character\"],\n                        ),\n                    ),\n                    message=diag_data[\"message\"],\n                    severity=diag_data.get(\"severity\"),\n                    code=diag_data.get(\"code\"),\n                    source=diag_data.get(\"source\"),\n                )\n                diagnostics.append(diag)\n\n            self.diagnostics[uri] = diagnostics\n            logger.debug(\n                f\"Updated diagnostics for {uri}: {len(diagnostics)} diagnostics\"\n            )\n\n    async def _send_message(self, message: Dict[str, Any]) -> None:\n        \"\"\"Send message to LSP server\"\"\"\n        if not self.process or not self.process.stdin:\n            raise RuntimeError(\"LSP server not running\")\n\n        message_str = json.dumps(message, separators=(\",\", \":\"))\n        message_bytes = message_str.encode(\"utf-8\")\n\n        header = f\"Content-Length: {len(message_bytes)}\\r\\n\\r\\n\"\n        header_bytes = header.encode(\"utf-8\")\n\n        try:\n            self.process.stdin.write(header_bytes + message_bytes)\n            self.process.stdin.flush()\n        except Exception as e:\n            logger.error(f\"Error sending message: {e}\")\n            raise\n\n    async def _send_request(self, method: str, params: Any = None) -> Any:\n        \"\"\"Send request and wait for response\"\"\"\n        async with self.lock:\n            self.request_id += 1\n            request_id = self.request_id\n\n        message = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"method\": method,\n            \"params\": params or {},\n        }\n\n        future = asyncio.Future()\n        self.pending_requests[request_id] = future\n\n        await self._send_message(message)\n\n        try:\n            result = await asyncio.wait_for(future, timeout=30.0)\n            return result\n        except asyncio.TimeoutError:\n            self.pending_requests.pop(request_id, None)\n            raise LSPError(-32000, f\"Request timeout: {method}\")\n\n    async def _send_notification(self, method: str, params: Any = None) -> None:\n        \"\"\"Send notification\"\"\"\n        message = {\"jsonrpc\": \"2.0\", \"method\": method, \"params\": params or {}}\n        await self._send_message(message)\n\n    async def _send_response(self, request_id: Union[str, int], result: Any) -> None:\n        \"\"\"Send response to server request\"\"\"\n        message = {\"jsonrpc\": \"2.0\", \"id\": request_id, \"result\": result}\n        await self._send_message(message)\n\n    async def _send_error(\n        self, request_id: Union[str, int], code: int, message: str, data: Any = None\n    ) -> None:\n        \"\"\"Send error response to server request\"\"\"\n        error_msg = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"error\": {\"code\": code, \"message\": message},\n        }\n        if data is not None:\n            error_msg[\"error\"][\"data\"] = data\n        await self._send_message(error_msg)\n\n    # LSP Lifecycle Methods\n\n    async def initialize(self, workspace_path: str) -> Dict[str, Any]:\n        \"\"\"Initialize the LSP server\"\"\"\n        params = {\n            \"processId\": os.getpid(),\n            \"clientInfo\": {\"name\": \"python-lsp-client\", \"version\": \"1.0.0\"},\n            \"rootPath\": workspace_path,\n            \"rootUri\": self.path_to_uri(workspace_path),\n            \"capabilities\": {\n                \"workspace\": {\n                    \"configuration\": True,\n                    \"didChangeConfiguration\": {\"dynamicRegistration\": True},\n                    \"didChangeWatchedFiles\": {\n                        \"dynamicRegistration\": True,\n                        \"relativePatternSupport\": True,\n                    },\n                },\n                \"textDocument\": {\n                    \"synchronization\": {\"dynamicRegistration\": True, \"didSave\": True},\n                    \"completion\": {\"completionItem\": {}},\n                    \"hover\": {\n                        \"dynamicRegistration\": True,\n                        \"contentFormat\": [\"markdown\", \"plaintext\"],\n                    },\n                    \"signatureHelp\": {\"dynamicRegistration\": True},\n                    \"definition\": {\"dynamicRegistration\": True, \"linkSupport\": True},\n                    \"references\": {\"dynamicRegistration\": True},\n                    \"documentHighlight\": {\"dynamicRegistration\": True},\n                    \"documentSymbol\": {\n                        \"dynamicRegistration\": True,\n                        \"hierarchicalDocumentSymbolSupport\": True,\n                    },\n                    \"formatting\": {\"dynamicRegistration\": True},\n                    \"rangeFormatting\": {\"dynamicRegistration\": True},\n                    \"onTypeFormatting\": {\"dynamicRegistration\": True},\n                    \"rename\": {\"dynamicRegistration\": True, \"prepareSupport\": True},\n                    \"codeAction\": {\n                        \"dynamicRegistration\": True,\n                        \"codeActionLiteralSupport\": {\n                            \"codeActionKind\": {\"valueSet\": []}\n                        },\n                    },\n                    \"codeLens\": {\"dynamicRegistration\": True},\n                    \"documentLink\": {\"dynamicRegistration\": True},\n                    \"publishDiagnostics\": {\"versionSupport\": True},\n                },\n                \"window\": {},\n            },\n            \"initializationOptions\": {},\n            \"workspaceFolders\": [\n                {\n                    \"uri\": self.path_to_uri(workspace_path),\n                    \"name\": os.path.basename(workspace_path),\n                }\n            ],\n        }\n\n        result = await self._send_request(\"initialize\", params)\n        self.server_capabilities = result.get(\"capabilities\", {})\n        self.initialized = True\n\n        # Send initialized notification\n        await self._send_notification(\"initialized\", {})\n\n        logger.info(\"LSP server initialized successfully\")\n        return result\n\n    async def shutdown(self) -> None:\n        \"\"\"Shutdown the LSP server\"\"\"\n        if self.initialized:\n            await self._send_request(\"shutdown\")\n            await self._send_notification(\"exit\")\n            self.initialized = False\n\n    async def stop(self) -> None:\n        \"\"\"Stop the LSP client and server\"\"\"\n        if not self.running:\n            return\n\n        self.running = False\n\n        try:\n            if self.initialized:\n                await self.shutdown()\n        except Exception as e:\n            logger.error(f\"Error during shutdown: {e}\")\n\n        if self.read_task:\n            self.read_task.cancel()\n            try:\n                await self.read_task\n            except asyncio.CancelledError:\n                pass\n\n        if self.process:\n            try:\n                self.process.terminate()\n                self.process.wait(timeout=5)\n            except subprocess.TimeoutExpired:\n                self.process.kill()\n                self.process.wait()\n            except Exception as e:\n                logger.error(f\"Error stopping process: {e}\")\n\n        logger.info(\"LSP client stopped\")\n\n    # File Operations\n\n    async def did_open(self, file_path: str) -> None:\n        \"\"\"Notify server that a file is opened\"\"\"\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n\n        uri = self.path_to_uri(file_path)\n\n        params = {\n            \"textDocument\": {\n                \"uri\": uri,\n                \"languageId\": self.detect_language_id(file_path),\n                \"version\": 1,\n                \"text\": content,\n            }\n        }\n\n        self.open_files[uri] = {\n            \"version\": 1,\n            \"languageId\": self.detect_language_id(file_path),\n            \"path\": file_path,\n        }\n\n        await self._send_notification(\"textDocument/didOpen\", params)\n        logger.debug(f\"Opened file: {file_path}\")\n\n    async def did_change(self, file_path: str, content: str = None) -> None:\n        \"\"\"Notify server that a file has changed\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n            return\n\n        if content is None:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                content = f.read()\n\n        version = self.open_files[uri][\"version\"] + 1\n        self.open_files[uri][\"version\"] = version\n\n        params = {\n            \"textDocument\": {\"uri\": uri, \"version\": version},\n            \"contentChanges\": [{\"text\": content}],\n        }\n\n        await self._send_notification(\"textDocument/didChange\", params)\n\n    async def did_save(self, file_path: str) -> None:\n        \"\"\"Notify server that a file has been saved\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        await self._send_notification(\"textDocument/didSave\", params)\n\n    async def did_close(self, file_path: str) -> None:\n        \"\"\"Notify server that a file is closed\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            return\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        del self.open_files[uri]\n        await self._send_notification(\"textDocument/didClose\", params)\n        logger.debug(f\"Closed file: {file_path}\")\n\n    # Language Server Features\n\n    async def get_hover(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get hover information at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/hover\", params)\n        return result\n\n    async def get_definition(\n        self, file_path: str, line: int, character: int\n    ) -> List[Location]:\n        \"\"\"Get definition at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/definition\", params)\n\n        if not result:\n            return []\n\n        # Handle both single location and array of locations\n        locations = result if isinstance(result, list) else [result]\n\n        return [\n            Location(\n                uri=loc[\"uri\"],\n                range=Range(\n                    start=Position(\n                        line=loc[\"range\"][\"start\"][\"line\"],\n                        character=loc[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=loc[\"range\"][\"end\"][\"line\"],\n                        character=loc[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n            )\n            for loc in locations\n        ]\n\n    async def get_references(\n        self,\n        file_path: str,\n        line: int,\n        character: int,\n        include_declaration: bool = True,\n    ) -> List[Location]:\n        \"\"\"Get references at position\"\"\"\n        uri = self.path_to_uri(file_path)\n        print(uri)\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"context\": {\"includeDeclaration\": include_declaration},\n        }\n\n        result = await self._send_request(\"textDocument/references\", params)\n\n        if not result:\n            return []\n        return [\n            Location(\n                uri=loc[\"uri\"],\n                range=Range(\n                    start=Position(\n                        line=loc[\"range\"][\"start\"][\"line\"],\n                        character=loc[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=loc[\"range\"][\"end\"][\"line\"],\n                        character=loc[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n            )\n            for loc in result\n        ]\n\n    async def get_completion(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get completion suggestions at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/completion\", params)\n        return result\n\n    async def get_signature_help(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get signature help at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/signatureHelp\", params)\n        return result\n\n    async def get_document_symbols(self, file_path: str) -> List[Dict[str, Any]]:\n        \"\"\"Get document symbols\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        result = await self._send_request(\"textDocument/documentSymbol\", params)\n        return result or []\n\n    async def get_workspace_symbols(self, query: str = \"\") -> List[Dict[str, Any]]:\n        \"\"\"Get workspace symbols\"\"\"\n        params = {\"query\": query}\n\n        result = await self._send_request(\"workspace/symbol\", params)\n        return result or []\n\n    async def format_document(self, file_path: str) -> List[TextEdit]:\n        \"\"\"Format entire document\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }\n\n        result = await self._send_request(\"textDocument/formatting\", params)\n\n        if not result:\n            return []\n\n        return [\n            TextEdit(\n                range=Range(\n                    start=Position(\n                        line=edit[\"range\"][\"start\"][\"line\"],\n                        character=edit[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=edit[\"range\"][\"end\"][\"line\"],\n                        character=edit[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n                newText=edit[\"newText\"],\n            )\n            for edit in result\n        ]\n\n    async def format_range(\n        self,\n        file_path: str,\n        start_line: int,\n        start_char: int,\n        end_line: int,\n        end_char: int,\n    ) -> List[TextEdit]:\n        \"\"\"Format document range\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }\n\n        result = await self._send_request(\"textDocument/rangeFormatting\", params)\n\n        if not result:\n            return []\n\n        return [\n            TextEdit(\n                range=Range(\n                    start=Position(\n                        line=edit[\"range\"][\"start\"][\"line\"],\n                        character=edit[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=edit[\"range\"][\"end\"][\"line\"],\n                        character=edit[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n                newText=edit[\"newText\"],\n            )\n            for edit in result\n        ]\n\n    async def rename_symbol(\n        self, file_path: str, line: int, character: int, new_name: str\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Rename symbol at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"newName\": new_name,\n        }\n\n        result = await self._send_request(\"textDocument/rename\", params)\n        return result\n\n    async def get_code_actions(\n        self,\n        file_path: str,\n        start_line: int,\n        start_char: int,\n        end_line: int,\n        end_char: int,\n        diagnostics: List[Diagnostic] = None,\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Get code actions for range\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        diag_data = []\n        if diagnostics:\n            for diag in diagnostics:\n                diag_data.append(\n                    {\n                        \"range\": {\n                            \"start\": {\n                                \"line\": diag.range.start.line,\n                                \"character\": diag.range.start.character,\n                            },\n                            \"end\": {\n                                \"line\": diag.range.end.line,\n                                \"character\": diag.range.end.character,\n                            },\n                        },\n                        \"message\": diag.message,\n                        \"severity\": diag.severity,\n                        \"code\": diag.code,\n                        \"source\": diag.source,\n                    }\n                )\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"context\": {\"diagnostics\": diag_data},\n        }\n\n        result = await self._send_request(\"textDocument/codeAction\", params)\n        return result or []\n\n    async def get_code_lens(self, file_path: str) -> List[Dict[str, Any]]:\n        \"\"\"Get code lens for document\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        result = await self._send_request(\"textDocument/codeLens\", params)\n        return result or []\n\n    async def execute_command(self, command: str, arguments: List[Any] = None) -> Any:\n        \"\"\"Execute workspace command\"\"\"\n        params = {\"command\": command, \"arguments\": arguments or []}\n\n        result = await self._send_request(\"workspace/executeCommand\", params)\n        return result\n\n    # Utility methods for high-level operations\n\n    async def get_diagnostics(self, file_path: str) -> List[Diagnostic]:\n        \"\"\"Get cached diagnostics for a file\"\"\"\n        uri = self.path_to_uri(file_path)\n        return self.diagnostics.get(uri, [])\n\n    async def find_symbol_definition(\n        self, symbol_name: str, file_path: str = None\n    ) -> Optional[Location]:\n        \"\"\"Find the definition of a symbol by name\"\"\"\n        # First try workspace symbols\n        symbols = await self.get_workspace_symbols(symbol_name)\n\n        for symbol in symbols:\n            if symbol.get(\"name\") == symbol_name:\n                location_data = symbol.get(\"location\")\n                if location_data:\n                    return Location(\n                        uri=location_data[\"uri\"],\n                        range=Range(\n                            start=Position(\n                                line=location_data[\"range\"][\"start\"][\"line\"],\n                                character=location_data[\"range\"][\"start\"][\"character\"],\n                            ),\n                            end=Position(\n                                line=location_data[\"range\"][\"end\"][\"line\"],\n                                character=location_data[\"range\"][\"end\"][\"character\"],\n                            ),\n                        ),\n                    )\n\n        return None\n\n    async def apply_text_edits(self, edits: List[Tuple[str, List[TextEdit]]]) -> None:\n        \"\"\"Apply text edits to multiple files\"\"\"\n        for file_path, file_edits in edits:\n            # Read current file content\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            # Sort edits by position (reverse order to avoid offset issues)\n            sorted_edits = sorted(\n                file_edits,\n                key=lambda e: (e.range.start.line, e.range.start.character),\n                reverse=True,\n            )\n\n            # Apply edits\n            for edit in sorted_edits:\n                start_line = edit.range.start.line\n                start_char = edit.range.start.character\n                end_line = edit.range.end.line\n                end_char = edit.range.end.character\n\n                if start_line == end_line:\n                    # Single line edit\n                    line = lines[start_line]\n                    lines[start_line] = (\n                        line[:start_char] + edit.newText + line[end_char:]\n                    )\n                else:\n                    # Multi-line edit\n                    start_line_content = lines[start_line][:start_char]\n                    end_line_content = lines[end_line][end_char:]\n\n                    # Replace the range with new text\n                    new_content = start_line_content + edit.newText + end_line_content\n\n                    # Remove old lines and insert new content\n                    del lines[start_line : end_line + 1]\n                    if new_content:\n                        lines.insert(start_line, new_content)\n\n            # Write back to file\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n\n            # Notify server of change\n            await self.did_change(file_path)\n\n    def register_notification_handler(\n        self, method: str, handler: Callable[[Dict[str, Any]], None]\n    ) -> None:\n        \"\"\"Register custom notification handler\"\"\"\n        self.notification_handlers[method] = handler\n\n    def register_request_handler(\n        self, method: str, handler: Callable[[Dict[str, Any]], Any]\n    ) -> None:\n        \"\"\"Register custom request handler\"\"\"\n        self.request_handlers[method] = handler\n\n    async def __aenter__(self):\n        \"\"\"Async context manager entry\"\"\"\n        await self.start()\n        return self\n\n    async def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Async context manager exit\"\"\"\n        await self.stop()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__init__",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 90,
            "character": 4
          },
          "end": {
            "line": 114,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __init__(self, command: str, args: List[str] = None, cwd: str = None):\n        self.command = command\n        self.args = args or []\n        self.cwd = cwd or os.getcwd()\n\n        # Process management\n        self.process: Optional[subprocess.Popen] = None\n        self.running = False\n\n        # Message handling\n        self.request_id = 0\n        self.pending_requests: Dict[Union[str, int], asyncio.Future] = {}\n        self.notification_handlers: Dict[str, Callable] = {}\n        self.request_handlers: Dict[str, Callable] = {}\n\n        # State management\n        self.initialized = False\n        self.server_capabilities: Dict[str, Any] = {}\n        self.open_files: Dict[str, Dict[str, Any]] = {}\n        self.diagnostics: Dict[str, List[Diagnostic]] = {}\n\n        # Async management\n        self.read_task: Optional[asyncio.Task] = None\n        self.lock = asyncio.Lock()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "path_to_uri",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 115,
            "character": 4
          },
          "end": {
            "line": 119,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def path_to_uri(self, path: str) -> str:\n        \"\"\"Convert file path to URI\"\"\"\n        abs_path = os.path.abspath(path)\n        return f\"file://{urllib.parse.quote(abs_path)}\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri_to_path",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 120,
            "character": 4
          },
          "end": {
            "line": 125,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def uri_to_path(self, uri: str) -> str:\n        \"\"\"Convert URI to file path\"\"\"\n        if uri.startswith(\"file://\"):\n            return urllib.parse.unquote(uri[7:])\n        return uri\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "detect_language_id",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 126,
            "character": 4
          },
          "end": {
            "line": 174,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def detect_language_id(self, file_path: str) -> str:\n        \"\"\"Detect language ID from file extension\"\"\"\n        ext = Path(file_path).suffix.lower()\n        language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".java\": \"java\",\n            \".c\": \"c\",\n            \".cpp\": \"cpp\",\n            \".cc\": \"cpp\",\n            \".cxx\": \"cpp\",\n            \".h\": \"c\",\n            \".hpp\": \"cpp\",\n            \".cs\": \"csharp\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".clj\": \"clojure\",\n            \".dart\": \"dart\",\n            \".lua\": \"lua\",\n            \".sh\": \"shellscript\",\n            \".bash\": \"shellscript\",\n            \".zsh\": \"shellscript\",\n            \".fish\": \"shellscript\",\n            \".ps1\": \"powershell\",\n            \".sql\": \"sql\",\n            \".html\": \"html\",\n            \".htm\": \"html\",\n            \".css\": \"css\",\n            \".scss\": \"scss\",\n            \".sass\": \"sass\",\n            \".less\": \"less\",\n            \".xml\": \"xml\",\n            \".json\": \"json\",\n            \".yaml\": \"yaml\",\n            \".yml\": \"yaml\",\n            \".toml\": \"toml\",\n            \".md\": \"markdown\",\n            \".tex\": \"latex\",\n            \".r\": \"r\",\n            \".R\": \"r\",\n        }\n        return language_map.get(ext, \"plaintext\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "start",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 175,
            "character": 10
          },
          "end": {
            "line": 205,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def start(self) -> None:\n        \"\"\"Start the LSP server process\"\"\"\n        if self.running:\n            return\n\n        try:\n            # Start the language server process\n            cmd = [self.command] + self.args\n            self.process = subprocess.Popen(\n                cmd,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                cwd=self.cwd,\n                text=False,\n                bufsize=0,\n            )\n\n            self.running = True\n            logger.info(f\"Started LSP server: {' '.join(cmd)}\")\n\n            # Start reading messages\n            self.read_task = asyncio.create_task(self._read_messages())\n\n            # Start stderr monitoring\n            asyncio.create_task(self._monitor_stderr())\n\n        except Exception as e:\n            logger.error(f\"Failed to start LSP server: {e}\")\n            raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_monitor_stderr",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 206,
            "character": 10
          },
          "end": {
            "line": 224,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _monitor_stderr(self) -> None:\n        \"\"\"Monitor stderr output from the language server\"\"\"\n        if not self.process or not self.process.stderr:\n            return\n\n        loop = asyncio.get_event_loop()\n        while self.running:\n            try:\n                line = await loop.run_in_executor(None, self.process.stderr.readline)\n                if line:\n                    decoded_line = line.decode(\"utf-8\", errors=\"ignore\").strip()\n                    if decoded_line:\n                        logger.info(f\"LSP stderr: {decoded_line}\")\n                else:\n                    break\n            except Exception as e:\n                logger.error(f\"Error reading stderr: {e}\")\n                break\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_read_messages",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 225,
            "character": 10
          },
          "end": {
            "line": 279,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _read_messages(self) -> None:\n        \"\"\"Read messages from the LSP server\"\"\"\n        buffer = b\"\"\n\n        while self.running and self.process and self.process.stdout:\n            try:\n                # Read data\n                data = await asyncio.get_event_loop().run_in_executor(\n                    None, self.process.stdout.read, 4096\n                )\n\n                if not data:\n                    break\n\n                buffer += data\n\n                # Process complete messages\n                while b\"\\r\\n\\r\\n\" in buffer:\n                    header_end = buffer.find(b\"\\r\\n\\r\\n\")\n                    header = buffer[:header_end].decode(\"utf-8\")\n\n                    # Parse content length\n                    content_length = None\n                    for line in header.split(\"\\r\\n\"):\n                        if line.startswith(\"Content-Length:\"):\n                            content_length = int(line.split(\":\")[1].strip())\n                            break\n\n                    if content_length is None:\n                        logger.error(\"No Content-Length header found\")\n                        buffer = buffer[header_end + 4 :]\n                        continue\n\n                    # Check if we have the complete message\n                    message_start = header_end + 4\n                    if len(buffer) < message_start + content_length:\n                        break\n\n                    # Extract and process message\n                    message_data = buffer[\n                        message_start : message_start + content_length\n                    ]\n                    buffer = buffer[message_start + content_length :]\n\n                    try:\n                        message_str = message_data.decode(\"utf-8\")\n                        message = json.loads(message_str)\n                        await self._handle_message(message)\n                    except Exception as e:\n                        logger.error(f\"Error processing message: {e}\")\n\n            except Exception as e:\n                logger.error(f\"Error reading from LSP server: {e}\")\n                break\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_handle_message",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 280,
            "character": 10
          },
          "end": {
            "line": 329,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _handle_message(self, message: Dict[str, Any]) -> None:\n        \"\"\"Handle incoming LSP message\"\"\"\n        try:\n            if \"id\" in message and \"method\" not in message:\n                # Response\n                msg_id = message[\"id\"]\n                if msg_id in self.pending_requests:\n                    future = self.pending_requests.pop(msg_id)\n                    if \"error\" in message:\n                        error = message[\"error\"]\n                        future.set_exception(\n                            LSPError(\n                                error.get(\"code\", -1),\n                                error.get(\"message\", \"Unknown error\"),\n                                error.get(\"data\"),\n                            )\n                        )\n                    else:\n                        future.set_result(message.get(\"result\"))\n\n            elif \"method\" in message:\n                method = message[\"method\"]\n                params = message.get(\"params\", {})\n\n                if \"id\" in message:\n                    # Server request\n                    if method in self.request_handlers:\n                        try:\n                            result = await self.request_handlers[method](params)\n                            await self._send_response(message[\"id\"], result)\n                        except Exception as e:\n                            await self._send_error(message[\"id\"], -32603, str(e))\n                    else:\n                        await self._send_error(\n                            message[\"id\"], -32601, f\"Method not found: {method}\"\n                        )\n                else:\n                    # Notification\n                    if method in self.notification_handlers:\n                        try:\n                            await self.notification_handlers[method](params)\n                        except Exception as e:\n                            logger.error(f\"Error handling notification {method}: {e}\")\n\n                    # Handle built-in notifications\n                    await self._handle_builtin_notification(method, params)\n\n        except Exception as e:\n            logger.error(f\"Error handling message: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_handle_builtin_notification",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 330,
            "character": 10
          },
          "end": {
            "line": 364,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _handle_builtin_notification(\n        self, method: str, params: Dict[str, Any]\n    ) -> None:\n        \"\"\"Handle built-in LSP notifications\"\"\"\n        if method == \"textDocument/publishDiagnostics\":\n            uri = params.get(\"uri\", \"\")\n            diagnostics_data = params.get(\"diagnostics\", [])\n\n            # Convert to Diagnostic objects\n            diagnostics = []\n            for diag_data in diagnostics_data:\n                range_data = diag_data[\"range\"]\n                diag = Diagnostic(\n                    range=Range(\n                        start=Position(\n                            line=range_data[\"start\"][\"line\"],\n                            character=range_data[\"start\"][\"character\"],\n                        ),\n                        end=Position(\n                            line=range_data[\"end\"][\"line\"],\n                            character=range_data[\"end\"][\"character\"],\n                        ),\n                    ),\n                    message=diag_data[\"message\"],\n                    severity=diag_data.get(\"severity\"),\n                    code=diag_data.get(\"code\"),\n                    source=diag_data.get(\"source\"),\n                )\n                diagnostics.append(diag)\n\n            self.diagnostics[uri] = diagnostics\n            logger.debug(\n                f\"Updated diagnostics for {uri}: {len(diagnostics)} diagnostics\"\n            )\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_send_message",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 365,
            "character": 10
          },
          "end": {
            "line": 382,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _send_message(self, message: Dict[str, Any]) -> None:\n        \"\"\"Send message to LSP server\"\"\"\n        if not self.process or not self.process.stdin:\n            raise RuntimeError(\"LSP server not running\")\n\n        message_str = json.dumps(message, separators=(\",\", \":\"))\n        message_bytes = message_str.encode(\"utf-8\")\n\n        header = f\"Content-Length: {len(message_bytes)}\\r\\n\\r\\n\"\n        header_bytes = header.encode(\"utf-8\")\n\n        try:\n            self.process.stdin.write(header_bytes + message_bytes)\n            self.process.stdin.flush()\n        except Exception as e:\n            logger.error(f\"Error sending message: {e}\")\n            raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_send_request",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 383,
            "character": 10
          },
          "end": {
            "line": 407,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _send_request(self, method: str, params: Any = None) -> Any:\n        \"\"\"Send request and wait for response\"\"\"\n        async with self.lock:\n            self.request_id += 1\n            request_id = self.request_id\n\n        message = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"method\": method,\n            \"params\": params or {},\n        }\n\n        future = asyncio.Future()\n        self.pending_requests[request_id] = future\n\n        await self._send_message(message)\n\n        try:\n            result = await asyncio.wait_for(future, timeout=30.0)\n            return result\n        except asyncio.TimeoutError:\n            self.pending_requests.pop(request_id, None)\n            raise LSPError(-32000, f\"Request timeout: {method}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_send_notification",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 408,
            "character": 10
          },
          "end": {
            "line": 412,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _send_notification(self, method: str, params: Any = None) -> None:\n        \"\"\"Send notification\"\"\"\n        message = {\"jsonrpc\": \"2.0\", \"method\": method, \"params\": params or {}}\n        await self._send_message(message)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_send_response",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 413,
            "character": 10
          },
          "end": {
            "line": 417,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _send_response(self, request_id: Union[str, int], result: Any) -> None:\n        \"\"\"Send response to server request\"\"\"\n        message = {\"jsonrpc\": \"2.0\", \"id\": request_id, \"result\": result}\n        await self._send_message(message)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "_send_error",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 418,
            "character": 10
          },
          "end": {
            "line": 430,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def _send_error(\n        self, request_id: Union[str, int], code: int, message: str, data: Any = None\n    ) -> None:\n        \"\"\"Send error response to server request\"\"\"\n        error_msg = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"error\": {\"code\": code, \"message\": message},\n        }\n        if data is not None:\n            error_msg[\"error\"][\"data\"] = data\n        await self._send_message(error_msg)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "initialize",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 433,
            "character": 10
          },
          "end": {
            "line": 498,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def initialize(self, workspace_path: str) -> Dict[str, Any]:\n        \"\"\"Initialize the LSP server\"\"\"\n        params = {\n            \"processId\": os.getpid(),\n            \"clientInfo\": {\"name\": \"python-lsp-client\", \"version\": \"1.0.0\"},\n            \"rootPath\": workspace_path,\n            \"rootUri\": self.path_to_uri(workspace_path),\n            \"capabilities\": {\n                \"workspace\": {\n                    \"configuration\": True,\n                    \"didChangeConfiguration\": {\"dynamicRegistration\": True},\n                    \"didChangeWatchedFiles\": {\n                        \"dynamicRegistration\": True,\n                        \"relativePatternSupport\": True,\n                    },\n                },\n                \"textDocument\": {\n                    \"synchronization\": {\"dynamicRegistration\": True, \"didSave\": True},\n                    \"completion\": {\"completionItem\": {}},\n                    \"hover\": {\n                        \"dynamicRegistration\": True,\n                        \"contentFormat\": [\"markdown\", \"plaintext\"],\n                    },\n                    \"signatureHelp\": {\"dynamicRegistration\": True},\n                    \"definition\": {\"dynamicRegistration\": True, \"linkSupport\": True},\n                    \"references\": {\"dynamicRegistration\": True},\n                    \"documentHighlight\": {\"dynamicRegistration\": True},\n                    \"documentSymbol\": {\n                        \"dynamicRegistration\": True,\n                        \"hierarchicalDocumentSymbolSupport\": True,\n                    },\n                    \"formatting\": {\"dynamicRegistration\": True},\n                    \"rangeFormatting\": {\"dynamicRegistration\": True},\n                    \"onTypeFormatting\": {\"dynamicRegistration\": True},\n                    \"rename\": {\"dynamicRegistration\": True, \"prepareSupport\": True},\n                    \"codeAction\": {\n                        \"dynamicRegistration\": True,\n                        \"codeActionLiteralSupport\": {\n                            \"codeActionKind\": {\"valueSet\": []}\n                        },\n                    },\n                    \"codeLens\": {\"dynamicRegistration\": True},\n                    \"documentLink\": {\"dynamicRegistration\": True},\n                    \"publishDiagnostics\": {\"versionSupport\": True},\n                },\n                \"window\": {},\n            },\n            \"initializationOptions\": {},\n            \"workspaceFolders\": [\n                {\n                    \"uri\": self.path_to_uri(workspace_path),\n                    \"name\": os.path.basename(workspace_path),\n                }\n            ],\n        }\n\n        result = await self._send_request(\"initialize\", params)\n        self.server_capabilities = result.get(\"capabilities\", {})\n        self.initialized = True\n\n        # Send initialized notification\n        await self._send_notification(\"initialized\", {})\n\n        logger.info(\"LSP server initialized successfully\")\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "shutdown",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 499,
            "character": 10
          },
          "end": {
            "line": 505,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def shutdown(self) -> None:\n        \"\"\"Shutdown the LSP server\"\"\"\n        if self.initialized:\n            await self._send_request(\"shutdown\")\n            await self._send_notification(\"exit\")\n            self.initialized = False\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "stop",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 506,
            "character": 10
          },
          "end": {
            "line": 537,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def stop(self) -> None:\n        \"\"\"Stop the LSP client and server\"\"\"\n        if not self.running:\n            return\n\n        self.running = False\n\n        try:\n            if self.initialized:\n                await self.shutdown()\n        except Exception as e:\n            logger.error(f\"Error during shutdown: {e}\")\n\n        if self.read_task:\n            self.read_task.cancel()\n            try:\n                await self.read_task\n            except asyncio.CancelledError:\n                pass\n\n        if self.process:\n            try:\n                self.process.terminate()\n                self.process.wait(timeout=5)\n            except subprocess.TimeoutExpired:\n                self.process.kill()\n                self.process.wait()\n            except Exception as e:\n                logger.error(f\"Error stopping process: {e}\")\n\n        logger.info(\"LSP client stopped\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "did_open",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 540,
            "character": 10
          },
          "end": {
            "line": 567,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def did_open(self, file_path: str) -> None:\n        \"\"\"Notify server that a file is opened\"\"\"\n        if not os.path.exists(file_path):\n            raise FileNotFoundError(f\"File not found: {file_path}\")\n\n        with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n\n        uri = self.path_to_uri(file_path)\n\n        params = {\n            \"textDocument\": {\n                \"uri\": uri,\n                \"languageId\": self.detect_language_id(file_path),\n                \"version\": 1,\n                \"text\": content,\n            }\n        }\n\n        self.open_files[uri] = {\n            \"version\": 1,\n            \"languageId\": self.detect_language_id(file_path),\n            \"path\": file_path,\n        }\n\n        await self._send_notification(\"textDocument/didOpen\", params)\n        logger.debug(f\"Opened file: {file_path}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "did_change",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 568,
            "character": 10
          },
          "end": {
            "line": 589,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def did_change(self, file_path: str, content: str = None) -> None:\n        \"\"\"Notify server that a file has changed\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n            return\n\n        if content is None:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                content = f.read()\n\n        version = self.open_files[uri][\"version\"] + 1\n        self.open_files[uri][\"version\"] = version\n\n        params = {\n            \"textDocument\": {\"uri\": uri, \"version\": version},\n            \"contentChanges\": [{\"text\": content}],\n        }\n\n        await self._send_notification(\"textDocument/didChange\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "did_save",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 590,
            "character": 10
          },
          "end": {
            "line": 597,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def did_save(self, file_path: str) -> None:\n        \"\"\"Notify server that a file has been saved\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        await self._send_notification(\"textDocument/didSave\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "did_close",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 598,
            "character": 10
          },
          "end": {
            "line": 610,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def did_close(self, file_path: str) -> None:\n        \"\"\"Notify server that a file is closed\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            return\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        del self.open_files[uri]\n        await self._send_notification(\"textDocument/didClose\", params)\n        logger.debug(f\"Closed file: {file_path}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_hover",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 613,
            "character": 10
          },
          "end": {
            "line": 629,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_hover(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get hover information at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/hover\", params)\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_definition",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 630,
            "character": 10
          },
          "end": {
            "line": 668,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_definition(\n        self, file_path: str, line: int, character: int\n    ) -> List[Location]:\n        \"\"\"Get definition at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/definition\", params)\n\n        if not result:\n            return []\n\n        # Handle both single location and array of locations\n        locations = result if isinstance(result, list) else [result]\n\n        return [\n            Location(\n                uri=loc[\"uri\"],\n                range=Range(\n                    start=Position(\n                        line=loc[\"range\"][\"start\"][\"line\"],\n                        character=loc[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=loc[\"range\"][\"end\"][\"line\"],\n                        character=loc[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n            )\n            for loc in locations\n        ]\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_references",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 669,
            "character": 10
          },
          "end": {
            "line": 708,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_references(\n        self,\n        file_path: str,\n        line: int,\n        character: int,\n        include_declaration: bool = True,\n    ) -> List[Location]:\n        \"\"\"Get references at position\"\"\"\n        uri = self.path_to_uri(file_path)\n        print(uri)\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"context\": {\"includeDeclaration\": include_declaration},\n        }\n\n        result = await self._send_request(\"textDocument/references\", params)\n\n        if not result:\n            return []\n        return [\n            Location(\n                uri=loc[\"uri\"],\n                range=Range(\n                    start=Position(\n                        line=loc[\"range\"][\"start\"][\"line\"],\n                        character=loc[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=loc[\"range\"][\"end\"][\"line\"],\n                        character=loc[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n            )\n            for loc in result\n        ]\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_completion",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 709,
            "character": 10
          },
          "end": {
            "line": 725,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_completion(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get completion suggestions at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/completion\", params)\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_signature_help",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 726,
            "character": 10
          },
          "end": {
            "line": 742,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_signature_help(\n        self, file_path: str, line: int, character: int\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Get signature help at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }\n\n        result = await self._send_request(\"textDocument/signatureHelp\", params)\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_document_symbols",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 743,
            "character": 10
          },
          "end": {
            "line": 754,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_document_symbols(self, file_path: str) -> List[Dict[str, Any]]:\n        \"\"\"Get document symbols\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        result = await self._send_request(\"textDocument/documentSymbol\", params)\n        return result or []\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_workspace_symbols",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 755,
            "character": 10
          },
          "end": {
            "line": 761,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_workspace_symbols(self, query: str = \"\") -> List[Dict[str, Any]]:\n        \"\"\"Get workspace symbols\"\"\"\n        params = {\"query\": query}\n\n        result = await self._send_request(\"workspace/symbol\", params)\n        return result or []\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "format_document",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 762,
            "character": 10
          },
          "end": {
            "line": 795,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def format_document(self, file_path: str) -> List[TextEdit]:\n        \"\"\"Format entire document\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }\n\n        result = await self._send_request(\"textDocument/formatting\", params)\n\n        if not result:\n            return []\n\n        return [\n            TextEdit(\n                range=Range(\n                    start=Position(\n                        line=edit[\"range\"][\"start\"][\"line\"],\n                        character=edit[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=edit[\"range\"][\"end\"][\"line\"],\n                        character=edit[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n                newText=edit[\"newText\"],\n            )\n            for edit in result\n        ]\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "format_range",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 796,
            "character": 10
          },
          "end": {
            "line": 840,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def format_range(\n        self,\n        file_path: str,\n        start_line: int,\n        start_char: int,\n        end_line: int,\n        end_char: int,\n    ) -> List[TextEdit]:\n        \"\"\"Format document range\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }\n\n        result = await self._send_request(\"textDocument/rangeFormatting\", params)\n\n        if not result:\n            return []\n\n        return [\n            TextEdit(\n                range=Range(\n                    start=Position(\n                        line=edit[\"range\"][\"start\"][\"line\"],\n                        character=edit[\"range\"][\"start\"][\"character\"],\n                    ),\n                    end=Position(\n                        line=edit[\"range\"][\"end\"][\"line\"],\n                        character=edit[\"range\"][\"end\"][\"character\"],\n                    ),\n                ),\n                newText=edit[\"newText\"],\n            )\n            for edit in result\n        ]\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "rename_symbol",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 841,
            "character": 10
          },
          "end": {
            "line": 858,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def rename_symbol(\n        self, file_path: str, line: int, character: int, new_name: str\n    ) -> Optional[Dict[str, Any]]:\n        \"\"\"Rename symbol at position\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"newName\": new_name,\n        }\n\n        result = await self._send_request(\"textDocument/rename\", params)\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_code_actions",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 859,
            "character": 10
          },
          "end": {
            "line": 907,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_code_actions(\n        self,\n        file_path: str,\n        start_line: int,\n        start_char: int,\n        end_line: int,\n        end_char: int,\n        diagnostics: List[Diagnostic] = None,\n    ) -> List[Dict[str, Any]]:\n        \"\"\"Get code actions for range\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        diag_data = []\n        if diagnostics:\n            for diag in diagnostics:\n                diag_data.append(\n                    {\n                        \"range\": {\n                            \"start\": {\n                                \"line\": diag.range.start.line,\n                                \"character\": diag.range.start.character,\n                            },\n                            \"end\": {\n                                \"line\": diag.range.end.line,\n                                \"character\": diag.range.end.character,\n                            },\n                        },\n                        \"message\": diag.message,\n                        \"severity\": diag.severity,\n                        \"code\": diag.code,\n                        \"source\": diag.source,\n                    }\n                )\n\n        params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"context\": {\"diagnostics\": diag_data},\n        }\n\n        result = await self._send_request(\"textDocument/codeAction\", params)\n        return result or []\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_code_lens",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 908,
            "character": 10
          },
          "end": {
            "line": 919,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_code_lens(self, file_path: str) -> List[Dict[str, Any]]:\n        \"\"\"Get code lens for document\"\"\"\n        uri = self.path_to_uri(file_path)\n\n        if uri not in self.open_files:\n            await self.did_open(file_path)\n\n        params = {\"textDocument\": {\"uri\": uri}}\n\n        result = await self._send_request(\"textDocument/codeLens\", params)\n        return result or []\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "execute_command",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 920,
            "character": 10
          },
          "end": {
            "line": 926,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def execute_command(self, command: str, arguments: List[Any] = None) -> Any:\n        \"\"\"Execute workspace command\"\"\"\n        params = {\"command\": command, \"arguments\": arguments or []}\n\n        result = await self._send_request(\"workspace/executeCommand\", params)\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_diagnostics",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 929,
            "character": 10
          },
          "end": {
            "line": 933,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_diagnostics(self, file_path: str) -> List[Diagnostic]:\n        \"\"\"Get cached diagnostics for a file\"\"\"\n        uri = self.path_to_uri(file_path)\n        return self.diagnostics.get(uri, [])\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "find_symbol_definition",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 934,
            "character": 10
          },
          "end": {
            "line": 960,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def find_symbol_definition(\n        self, symbol_name: str, file_path: str = None\n    ) -> Optional[Location]:\n        \"\"\"Find the definition of a symbol by name\"\"\"\n        # First try workspace symbols\n        symbols = await self.get_workspace_symbols(symbol_name)\n\n        for symbol in symbols:\n            if symbol.get(\"name\") == symbol_name:\n                location_data = symbol.get(\"location\")\n                if location_data:\n                    return Location(\n                        uri=location_data[\"uri\"],\n                        range=Range(\n                            start=Position(\n                                line=location_data[\"range\"][\"start\"][\"line\"],\n                                character=location_data[\"range\"][\"start\"][\"character\"],\n                            ),\n                            end=Position(\n                                line=location_data[\"range\"][\"end\"][\"line\"],\n                                character=location_data[\"range\"][\"end\"][\"character\"],\n                            ),\n                        ),\n                    )\n\n        return None\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "apply_text_edits",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 961,
            "character": 10
          },
          "end": {
            "line": 1007,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def apply_text_edits(self, edits: List[Tuple[str, List[TextEdit]]]) -> None:\n        \"\"\"Apply text edits to multiple files\"\"\"\n        for file_path, file_edits in edits:\n            # Read current file content\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            # Sort edits by position (reverse order to avoid offset issues)\n            sorted_edits = sorted(\n                file_edits,\n                key=lambda e: (e.range.start.line, e.range.start.character),\n                reverse=True,\n            )\n\n            # Apply edits\n            for edit in sorted_edits:\n                start_line = edit.range.start.line\n                start_char = edit.range.start.character\n                end_line = edit.range.end.line\n                end_char = edit.range.end.character\n\n                if start_line == end_line:\n                    # Single line edit\n                    line = lines[start_line]\n                    lines[start_line] = (\n                        line[:start_char] + edit.newText + line[end_char:]\n                    )\n                else:\n                    # Multi-line edit\n                    start_line_content = lines[start_line][:start_char]\n                    end_line_content = lines[end_line][end_char:]\n\n                    # Replace the range with new text\n                    new_content = start_line_content + edit.newText + end_line_content\n\n                    # Remove old lines and insert new content\n                    del lines[start_line : end_line + 1]\n                    if new_content:\n                        lines.insert(start_line, new_content)\n\n            # Write back to file\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n\n            # Notify server of change\n            await self.did_change(file_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "register_notification_handler",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1008,
            "character": 4
          },
          "end": {
            "line": 1013,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def register_notification_handler(\n        self, method: str, handler: Callable[[Dict[str, Any]], None]\n    ) -> None:\n        \"\"\"Register custom notification handler\"\"\"\n        self.notification_handlers[method] = handler\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "register_request_handler",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1014,
            "character": 4
          },
          "end": {
            "line": 1019,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def register_request_handler(\n        self, method: str, handler: Callable[[Dict[str, Any]], Any]\n    ) -> None:\n        \"\"\"Register custom request handler\"\"\"\n        self.request_handlers[method] = handler\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__aenter__",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1020,
            "character": 10
          },
          "end": {
            "line": 1024,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __aenter__(self):\n        \"\"\"Async context manager entry\"\"\"\n        await self.start()\n        return self\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__aexit__",
      "containerName": "LSPClient",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1025,
            "character": 10
          },
          "end": {
            "line": 1028,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __aexit__(self, exc_type, exc_val, exc_tb):\n        \"\"\"Async context manager exit\"\"\"\n        await self.stop()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "command",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 91,
            "character": 8
          },
          "end": {
            "line": 91,
            "character": 30
          }
        }
      },
      "kind": "Field",
      "code_string": "self.command = command\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "args",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 92,
            "character": 8
          },
          "end": {
            "line": 92,
            "character": 30
          }
        }
      },
      "kind": "Field",
      "code_string": "self.args = args or []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "cwd",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 93,
            "character": 8
          },
          "end": {
            "line": 93,
            "character": 37
          }
        }
      },
      "kind": "Field",
      "code_string": "self.cwd = cwd or os.getcwd()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "process",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 96,
            "character": 8
          },
          "end": {
            "line": 96,
            "character": 55
          }
        }
      },
      "kind": "Field",
      "code_string": "self.process: Optional[subprocess.Popen] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "running",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 97,
            "character": 8
          },
          "end": {
            "line": 97,
            "character": 28
          }
        }
      },
      "kind": "Field",
      "code_string": "self.running = False\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "request_id",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 100,
            "character": 8
          },
          "end": {
            "line": 100,
            "character": 27
          }
        }
      },
      "kind": "Field",
      "code_string": "self.request_id = 0\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "pending_requests",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 101,
            "character": 8
          },
          "end": {
            "line": 101,
            "character": 73
          }
        }
      },
      "kind": "Field",
      "code_string": "self.pending_requests: Dict[Union[str, int], asyncio.Future] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "notification_handlers",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 102,
            "character": 8
          },
          "end": {
            "line": 102,
            "character": 60
          }
        }
      },
      "kind": "Field",
      "code_string": "self.notification_handlers: Dict[str, Callable] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "request_handlers",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 103,
            "character": 8
          },
          "end": {
            "line": 103,
            "character": 55
          }
        }
      },
      "kind": "Field",
      "code_string": "self.request_handlers: Dict[str, Callable] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "initialized",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 106,
            "character": 8
          },
          "end": {
            "line": 106,
            "character": 32
          }
        }
      },
      "kind": "Field",
      "code_string": "self.initialized = False\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "server_capabilities",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 107,
            "character": 8
          },
          "end": {
            "line": 107,
            "character": 53
          }
        }
      },
      "kind": "Field",
      "code_string": "self.server_capabilities: Dict[str, Any] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "open_files",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 108,
            "character": 8
          },
          "end": {
            "line": 108,
            "character": 55
          }
        }
      },
      "kind": "Field",
      "code_string": "self.open_files: Dict[str, Dict[str, Any]] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "diagnostics",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 109,
            "character": 8
          },
          "end": {
            "line": 109,
            "character": 58
          }
        }
      },
      "kind": "Field",
      "code_string": "self.diagnostics: Dict[str, List[Diagnostic]] = {}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "read_task",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 112,
            "character": 8
          },
          "end": {
            "line": 112,
            "character": 53
          }
        }
      },
      "kind": "Field",
      "code_string": "self.read_task: Optional[asyncio.Task] = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "lock",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 113,
            "character": 8
          },
          "end": {
            "line": 113,
            "character": 34
          }
        }
      },
      "kind": "Field",
      "code_string": "self.lock = asyncio.Lock()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 90,
              "character": 17
            },
            "end": {
              "line": 90,
              "character": 21
            }
          },
          "code_string": "self, command: str, a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 91,
              "character": 8
            },
            "end": {
              "line": 91,
              "character": 12
            }
          },
          "code_string": "self.command"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 92,
              "character": 8
            },
            "end": {
              "line": 92,
              "character": 12
            }
          },
          "code_string": "self.args = "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 93,
              "character": 8
            },
            "end": {
              "line": 93,
              "character": 12
            }
          },
          "code_string": "self.cwd = c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 96,
              "character": 8
            },
            "end": {
              "line": 96,
              "character": 12
            }
          },
          "code_string": "self.process"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 97,
              "character": 8
            },
            "end": {
              "line": 97,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 100,
              "character": 8
            },
            "end": {
              "line": 100,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 101,
              "character": 8
            },
            "end": {
              "line": 101,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 102,
              "character": 8
            },
            "end": {
              "line": 102,
              "character": 12
            }
          },
          "code_string": "self.notific"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 103,
              "character": 8
            },
            "end": {
              "line": 103,
              "character": 12
            }
          },
          "code_string": "self.request"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 106,
              "character": 8
            },
            "end": {
              "line": 106,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 107,
              "character": 8
            },
            "end": {
              "line": 107,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 108,
              "character": 8
            },
            "end": {
              "line": 108,
              "character": 12
            }
          },
          "code_string": "self.open_fi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 109,
              "character": 8
            },
            "end": {
              "line": 109,
              "character": 12
            }
          },
          "code_string": "self.diagnos"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 112,
              "character": 8
            },
            "end": {
              "line": 112,
              "character": 12
            }
          },
          "code_string": "self.read_ta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 113,
              "character": 8
            },
            "end": {
              "line": 113,
              "character": 12
            }
          },
          "code_string": "self.lock = "
        }
      ]
    },
    {
      "name": "abs_path",
      "containerName": "path_to_uri",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 117,
            "character": 8
          },
          "end": {
            "line": 117,
            "character": 40
          }
        }
      },
      "kind": "Variable",
      "code_string": "abs_path = os.path.abspath(path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 117,
              "character": 8
            },
            "end": {
              "line": 117,
              "character": 16
            }
          },
          "code_string": "abs_path = os.pa"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 118,
              "character": 44
            },
            "end": {
              "line": 118,
              "character": 52
            }
          },
          "code_string": "abs_path)}\"\n"
        }
      ]
    },
    {
      "name": "ext",
      "containerName": "detect_language_id",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 128,
            "character": 8
          },
          "end": {
            "line": 128,
            "character": 44
          }
        }
      },
      "kind": "Variable",
      "code_string": "ext = Path(file_path).suffix.lower()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 128,
              "character": 8
            },
            "end": {
              "line": 128,
              "character": 11
            }
          },
          "code_string": "ext = Path("
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 173,
              "character": 32
            },
            "end": {
              "line": 173,
              "character": 35
            }
          },
          "code_string": "ext, \"plaintext\")\n"
        }
      ]
    },
    {
      "name": "language_map",
      "containerName": "detect_language_id",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 129,
            "character": 8
          },
          "end": {
            "line": 172,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "language_map = {\n            \".py\": \"python\",\n            \".js\": \"javascript\",\n            \".ts\": \"typescript\",\n            \".go\": \"go\",\n            \".rs\": \"rust\",\n            \".java\": \"java\",\n            \".c\": \"c\",\n            \".cpp\": \"cpp\",\n            \".cc\": \"cpp\",\n            \".cxx\": \"cpp\",\n            \".h\": \"c\",\n            \".hpp\": \"cpp\",\n            \".cs\": \"csharp\",\n            \".rb\": \"ruby\",\n            \".php\": \"php\",\n            \".swift\": \"swift\",\n            \".kt\": \"kotlin\",\n            \".scala\": \"scala\",\n            \".clj\": \"clojure\",\n            \".dart\": \"dart\",\n            \".lua\": \"lua\",\n            \".sh\": \"shellscript\",\n            \".bash\": \"shellscript\",\n            \".zsh\": \"shellscript\",\n            \".fish\": \"shellscript\",\n            \".ps1\": \"powershell\",\n            \".sql\": \"sql\",\n            \".html\": \"html\",\n            \".htm\": \"html\",\n            \".css\": \"css\",\n            \".scss\": \"scss\",\n            \".sass\": \"sass\",\n            \".less\": \"less\",\n            \".xml\": \"xml\",\n            \".json\": \"json\",\n            \".yaml\": \"yaml\",\n            \".yml\": \"yaml\",\n            \".toml\": \"toml\",\n            \".md\": \"markdown\",\n            \".tex\": \"latex\",\n            \".r\": \"r\",\n            \".R\": \"r\",\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 129,
              "character": 8
            },
            "end": {
              "line": 129,
              "character": 20
            }
          },
          "code_string": "language_map = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 173,
              "character": 15
            },
            "end": {
              "line": 173,
              "character": 27
            }
          },
          "code_string": "language_map.get(ext, \"plai"
        }
      ]
    },
    {
      "name": "cmd",
      "containerName": "start",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 182,
            "character": 12
          },
          "end": {
            "line": 182,
            "character": 44
          }
        }
      },
      "kind": "Variable",
      "code_string": "cmd = [self.command] + self.args\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 12
            },
            "end": {
              "line": 182,
              "character": 15
            }
          },
          "code_string": "cmd = [self.com"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 184,
              "character": 16
            },
            "end": {
              "line": 184,
              "character": 19
            }
          },
          "code_string": "cmd,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 194,
              "character": 56
            },
            "end": {
              "line": 194,
              "character": 59
            }
          },
          "code_string": "cmd)}\")\n"
        }
      ]
    },
    {
      "name": "process",
      "containerName": "start",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 183,
            "character": 12
          },
          "end": {
            "line": 191,
            "character": 13
          }
        }
      },
      "kind": "Field",
      "code_string": "self.process = subprocess.Popen(\n                cmd,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                cwd=self.cwd,\n                text=False,\n                bufsize=0,\n            )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 175,
              "character": 20
            },
            "end": {
              "line": 175,
              "character": 24
            }
          },
          "code_string": "self) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 177,
              "character": 11
            },
            "end": {
              "line": 177,
              "character": 15
            }
          },
          "code_string": "self.running:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 19
            },
            "end": {
              "line": 182,
              "character": 23
            }
          },
          "code_string": "self.command] + self.ar"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 35
            },
            "end": {
              "line": 182,
              "character": 39
            }
          },
          "code_string": "self.args\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 183,
              "character": 12
            },
            "end": {
              "line": 183,
              "character": 16
            }
          },
          "code_string": "self.process = s"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 188,
              "character": 20
            },
            "end": {
              "line": 188,
              "character": 24
            }
          },
          "code_string": "self.cwd,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 193,
              "character": 12
            },
            "end": {
              "line": 193,
              "character": 16
            }
          },
          "code_string": "self.running = T"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 12
            },
            "end": {
              "line": 197,
              "character": 16
            }
          },
          "code_string": "self.read_task ="
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 49
            },
            "end": {
              "line": 197,
              "character": 53
            }
          },
          "code_string": "self._read_messages())\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 200,
              "character": 32
            },
            "end": {
              "line": 200,
              "character": 36
            }
          },
          "code_string": "self._monitor_stderr())\n"
        }
      ]
    },
    {
      "name": "running",
      "containerName": "start",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 193,
            "character": 12
          },
          "end": {
            "line": 193,
            "character": 31
          }
        }
      },
      "kind": "Field",
      "code_string": "self.running = True\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 175,
              "character": 20
            },
            "end": {
              "line": 175,
              "character": 24
            }
          },
          "code_string": "self) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 177,
              "character": 11
            },
            "end": {
              "line": 177,
              "character": 15
            }
          },
          "code_string": "self.running:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 19
            },
            "end": {
              "line": 182,
              "character": 23
            }
          },
          "code_string": "self.command] + self.ar"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 35
            },
            "end": {
              "line": 182,
              "character": 39
            }
          },
          "code_string": "self.args\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 183,
              "character": 12
            },
            "end": {
              "line": 183,
              "character": 16
            }
          },
          "code_string": "self.process = s"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 188,
              "character": 20
            },
            "end": {
              "line": 188,
              "character": 24
            }
          },
          "code_string": "self.cwd,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 193,
              "character": 12
            },
            "end": {
              "line": 193,
              "character": 16
            }
          },
          "code_string": "self.running = T"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 12
            },
            "end": {
              "line": 197,
              "character": 16
            }
          },
          "code_string": "self.read_task ="
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 49
            },
            "end": {
              "line": 197,
              "character": 53
            }
          },
          "code_string": "self._read_messages())\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 200,
              "character": 32
            },
            "end": {
              "line": 200,
              "character": 36
            }
          },
          "code_string": "self._monitor_stderr())\n"
        }
      ]
    },
    {
      "name": "read_task",
      "containerName": "start",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 197,
            "character": 12
          },
          "end": {
            "line": 197,
            "character": 71
          }
        }
      },
      "kind": "Field",
      "code_string": "self.read_task = asyncio.create_task(self._read_messages())\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 175,
              "character": 20
            },
            "end": {
              "line": 175,
              "character": 24
            }
          },
          "code_string": "self) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 177,
              "character": 11
            },
            "end": {
              "line": 177,
              "character": 15
            }
          },
          "code_string": "self.running:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 19
            },
            "end": {
              "line": 182,
              "character": 23
            }
          },
          "code_string": "self.command] + self.ar"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 182,
              "character": 35
            },
            "end": {
              "line": 182,
              "character": 39
            }
          },
          "code_string": "self.args\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 183,
              "character": 12
            },
            "end": {
              "line": 183,
              "character": 16
            }
          },
          "code_string": "self.process = s"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 188,
              "character": 20
            },
            "end": {
              "line": 188,
              "character": 24
            }
          },
          "code_string": "self.cwd,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 193,
              "character": 12
            },
            "end": {
              "line": 193,
              "character": 16
            }
          },
          "code_string": "self.running = T"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 12
            },
            "end": {
              "line": 197,
              "character": 16
            }
          },
          "code_string": "self.read_task ="
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 197,
              "character": 49
            },
            "end": {
              "line": 197,
              "character": 53
            }
          },
          "code_string": "self._read_messages())\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 200,
              "character": 32
            },
            "end": {
              "line": 200,
              "character": 36
            }
          },
          "code_string": "self._monitor_stderr())\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "start",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 180,
            "character": 8
          },
          "end": {
            "line": 205,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            # Start the language server process\n            cmd = [self.command] + self.args\n            self.process = subprocess.Popen(\n                cmd,\n                stdin=subprocess.PIPE,\n                stdout=subprocess.PIPE,\n                stderr=subprocess.PIPE,\n                cwd=self.cwd,\n                text=False,\n                bufsize=0,\n            )\n\n            self.running = True\n            logger.info(f\"Started LSP server: {' '.join(cmd)}\")\n\n            # Start reading messages\n            self.read_task = asyncio.create_task(self._read_messages())\n\n            # Start stderr monitoring\n            asyncio.create_task(self._monitor_stderr())\n\n        except Exception as e:\n            logger.error(f\"Failed to start LSP server: {e}\")\n            raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "loop",
      "containerName": "_monitor_stderr",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 211,
            "character": 8
          },
          "end": {
            "line": 211,
            "character": 39
          }
        }
      },
      "kind": "Variable",
      "code_string": "loop = asyncio.get_event_loop()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Abstract event loop."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 211,
              "character": 8
            },
            "end": {
              "line": 211,
              "character": 12
            }
          },
          "code_string": "loop = async"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 214,
              "character": 29
            },
            "end": {
              "line": 214,
              "character": 33
            }
          },
          "code_string": "loop.run_in_executor(None, self.p"
        }
      ]
    },
    {
      "name": "line",
      "containerName": "_monitor_stderr",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 214,
            "character": 16
          },
          "end": {
            "line": 214,
            "character": 85
          }
        }
      },
      "kind": "Variable",
      "code_string": "line = await loop.run_in_executor(None, self.process.stderr.readline)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 214,
              "character": 16
            },
            "end": {
              "line": 214,
              "character": 20
            }
          },
          "code_string": "line = await loop.ru"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 215,
              "character": 19
            },
            "end": {
              "line": 215,
              "character": 23
            }
          },
          "code_string": "line:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 216,
              "character": 35
            },
            "end": {
              "line": 216,
              "character": 39
            }
          },
          "code_string": "line.decode(\"utf-8\", errors=\"ignore\").s"
        }
      ]
    },
    {
      "name": "decoded_line",
      "containerName": "_monitor_stderr",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 216,
            "character": 20
          },
          "end": {
            "line": 216,
            "character": 80
          }
        }
      },
      "kind": "Variable",
      "code_string": "decoded_line = line.decode(\"utf-8\", errors=\"ignore\").strip()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 216,
              "character": 20
            },
            "end": {
              "line": 216,
              "character": 32
            }
          },
          "code_string": "decoded_line = line.decode(\"utf-"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 217,
              "character": 23
            },
            "end": {
              "line": 217,
              "character": 35
            }
          },
          "code_string": "decoded_line:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 218,
              "character": 51
            },
            "end": {
              "line": 218,
              "character": 63
            }
          },
          "code_string": "decoded_line}\")\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "_monitor_stderr",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 213,
            "character": 12
          },
          "end": {
            "line": 224,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                line = await loop.run_in_executor(None, self.process.stderr.readline)\n                if line:\n                    decoded_line = line.decode(\"utf-8\", errors=\"ignore\").strip()\n                    if decoded_line:\n                        logger.info(f\"LSP stderr: {decoded_line}\")\n                else:\n                    break\n            except Exception as e:\n                logger.error(f\"Error reading stderr: {e}\")\n                break\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "buffer",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 227,
            "character": 8
          },
          "end": {
            "line": 227,
            "character": 20
          }
        }
      },
      "kind": "Variable",
      "code_string": "buffer = b\"\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 227,
              "character": 8
            },
            "end": {
              "line": 227,
              "character": 14
            }
          },
          "code_string": "buffer = b\"\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 239,
              "character": 16
            },
            "end": {
              "line": 239,
              "character": 22
            }
          },
          "code_string": "buffer += data\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 242,
              "character": 37
            },
            "end": {
              "line": 242,
              "character": 43
            }
          },
          "code_string": "buffer:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 243,
              "character": 33
            },
            "end": {
              "line": 243,
              "character": 39
            }
          },
          "code_string": "buffer.find(b\"\\r\\n\\r\\n\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 29
            },
            "end": {
              "line": 244,
              "character": 35
            }
          },
          "code_string": "buffer[:header_end].decode(\"utf-8\")"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 24
            },
            "end": {
              "line": 255,
              "character": 30
            }
          },
          "code_string": "buffer = buffer[header_end + 4"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 33
            },
            "end": {
              "line": 255,
              "character": 39
            }
          },
          "code_string": "buffer[header_end + 4 :]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 27
            },
            "end": {
              "line": 260,
              "character": 33
            }
          },
          "code_string": "buffer) < message_start + content"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 264,
              "character": 35
            },
            "end": {
              "line": 264,
              "character": 41
            }
          },
          "code_string": "buffer[\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 20
            },
            "end": {
              "line": 267,
              "character": 26
            }
          },
          "code_string": "buffer = buffer[message_st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 29
            },
            "end": {
              "line": 267,
              "character": 35
            }
          },
          "code_string": "buffer[message_start + content_leng"
        }
      ]
    },
    {
      "name": "data",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 232,
            "character": 16
          },
          "end": {
            "line": 234,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "data = await asyncio.get_event_loop().run_in_executor(\n                    None, self.process.stdout.read, 4096\n                )",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 232,
              "character": 16
            },
            "end": {
              "line": 232,
              "character": 20
            }
          },
          "code_string": "data = await asyncio"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 236,
              "character": 23
            },
            "end": {
              "line": 236,
              "character": 27
            }
          },
          "code_string": "data:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 239,
              "character": 26
            },
            "end": {
              "line": 239,
              "character": 30
            }
          },
          "code_string": "data\n"
        }
      ]
    },
    {
      "name": "buffer",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 239,
            "character": 16
          },
          "end": {
            "line": 239,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "buffer += data\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 227,
              "character": 8
            },
            "end": {
              "line": 227,
              "character": 14
            }
          },
          "code_string": "buffer = b\"\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 239,
              "character": 16
            },
            "end": {
              "line": 239,
              "character": 22
            }
          },
          "code_string": "buffer += data\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 242,
              "character": 37
            },
            "end": {
              "line": 242,
              "character": 43
            }
          },
          "code_string": "buffer:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 243,
              "character": 33
            },
            "end": {
              "line": 243,
              "character": 39
            }
          },
          "code_string": "buffer.find(b\"\\r\\n\\r\\n\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 29
            },
            "end": {
              "line": 244,
              "character": 35
            }
          },
          "code_string": "buffer[:header_end].decode(\"utf-8\")"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 24
            },
            "end": {
              "line": 255,
              "character": 30
            }
          },
          "code_string": "buffer = buffer[header_end + 4"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 33
            },
            "end": {
              "line": 255,
              "character": 39
            }
          },
          "code_string": "buffer[header_end + 4 :]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 27
            },
            "end": {
              "line": 260,
              "character": 33
            }
          },
          "code_string": "buffer) < message_start + content"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 264,
              "character": 35
            },
            "end": {
              "line": 264,
              "character": 41
            }
          },
          "code_string": "buffer[\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 20
            },
            "end": {
              "line": 267,
              "character": 26
            }
          },
          "code_string": "buffer = buffer[message_st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 29
            },
            "end": {
              "line": 267,
              "character": 35
            }
          },
          "code_string": "buffer[message_start + content_leng"
        }
      ]
    },
    {
      "name": "header_end",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 243,
            "character": 20
          },
          "end": {
            "line": 243,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "header_end = buffer.find(b\"\\r\\n\\r\\n\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 243,
              "character": 20
            },
            "end": {
              "line": 243,
              "character": 30
            }
          },
          "code_string": "header_end = buffer.find(b\"\\r\\"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 37
            },
            "end": {
              "line": 244,
              "character": 47
            }
          },
          "code_string": "header_end].decode(\"utf-8\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 40
            },
            "end": {
              "line": 255,
              "character": 50
            }
          },
          "code_string": "header_end + 4 :]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 259,
              "character": 36
            },
            "end": {
              "line": 259,
              "character": 46
            }
          },
          "code_string": "header_end + 4\n"
        }
      ]
    },
    {
      "name": "header",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 244,
            "character": 20
          },
          "end": {
            "line": 244,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "header = buffer[:header_end].decode(\"utf-8\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 20
            },
            "end": {
              "line": 244,
              "character": 26
            }
          },
          "code_string": "header = buffer[:header_en"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 248,
              "character": 32
            },
            "end": {
              "line": 248,
              "character": 38
            }
          },
          "code_string": "header.split(\"\\r\\n\"):\n"
        }
      ]
    },
    {
      "name": "content_length",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 247,
            "character": 20
          },
          "end": {
            "line": 247,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "content_length = None\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 247,
              "character": 20
            },
            "end": {
              "line": 247,
              "character": 34
            }
          },
          "code_string": "content_length = None\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 250,
              "character": 28
            },
            "end": {
              "line": 250,
              "character": 42
            }
          },
          "code_string": "content_length = int(line.split(\":\")[1].st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 253,
              "character": 23
            },
            "end": {
              "line": 253,
              "character": 37
            }
          },
          "code_string": "content_length is None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 53
            },
            "end": {
              "line": 260,
              "character": 67
            }
          },
          "code_string": "content_length:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 265,
              "character": 56
            },
            "end": {
              "line": 265,
              "character": 70
            }
          },
          "code_string": "content_length\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 52
            },
            "end": {
              "line": 267,
              "character": 66
            }
          },
          "code_string": "content_length :]\n"
        }
      ]
    },
    {
      "name": "line",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 248,
            "character": 20
          },
          "end": {
            "line": 252,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for line in header.split(\"\\r\\n\"):\n                        if line.startswith(\"Content-Length:\"):\n                            content_length = int(line.split(\":\")[1].strip())\n                            break\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "content_length",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 250,
            "character": 28
          },
          "end": {
            "line": 250,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "content_length = int(line.split(\":\")[1].strip())\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 247,
              "character": 20
            },
            "end": {
              "line": 247,
              "character": 34
            }
          },
          "code_string": "content_length = None\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 250,
              "character": 28
            },
            "end": {
              "line": 250,
              "character": 42
            }
          },
          "code_string": "content_length = int(line.split(\":\")[1].st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 253,
              "character": 23
            },
            "end": {
              "line": 253,
              "character": 37
            }
          },
          "code_string": "content_length is None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 53
            },
            "end": {
              "line": 260,
              "character": 67
            }
          },
          "code_string": "content_length:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 265,
              "character": 56
            },
            "end": {
              "line": 265,
              "character": 70
            }
          },
          "code_string": "content_length\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 52
            },
            "end": {
              "line": 267,
              "character": 66
            }
          },
          "code_string": "content_length :]\n"
        }
      ]
    },
    {
      "name": "buffer",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 255,
            "character": 24
          },
          "end": {
            "line": 255,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "buffer = buffer[header_end + 4 :]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 227,
              "character": 8
            },
            "end": {
              "line": 227,
              "character": 14
            }
          },
          "code_string": "buffer = b\"\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 239,
              "character": 16
            },
            "end": {
              "line": 239,
              "character": 22
            }
          },
          "code_string": "buffer += data\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 242,
              "character": 37
            },
            "end": {
              "line": 242,
              "character": 43
            }
          },
          "code_string": "buffer:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 243,
              "character": 33
            },
            "end": {
              "line": 243,
              "character": 39
            }
          },
          "code_string": "buffer.find(b\"\\r\\n\\r\\n\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 29
            },
            "end": {
              "line": 244,
              "character": 35
            }
          },
          "code_string": "buffer[:header_end].decode(\"utf-8\")"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 24
            },
            "end": {
              "line": 255,
              "character": 30
            }
          },
          "code_string": "buffer = buffer[header_end + 4"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 33
            },
            "end": {
              "line": 255,
              "character": 39
            }
          },
          "code_string": "buffer[header_end + 4 :]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 27
            },
            "end": {
              "line": 260,
              "character": 33
            }
          },
          "code_string": "buffer) < message_start + content"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 264,
              "character": 35
            },
            "end": {
              "line": 264,
              "character": 41
            }
          },
          "code_string": "buffer[\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 20
            },
            "end": {
              "line": 267,
              "character": 26
            }
          },
          "code_string": "buffer = buffer[message_st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 29
            },
            "end": {
              "line": 267,
              "character": 35
            }
          },
          "code_string": "buffer[message_start + content_leng"
        }
      ]
    },
    {
      "name": "message_start",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 259,
            "character": 20
          },
          "end": {
            "line": 259,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "message_start = header_end + 4\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 259,
              "character": 20
            },
            "end": {
              "line": 259,
              "character": 33
            }
          },
          "code_string": "message_start = header_end + 4\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 37
            },
            "end": {
              "line": 260,
              "character": 50
            }
          },
          "code_string": "message_start + content_length:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 265,
              "character": 24
            },
            "end": {
              "line": 265,
              "character": 37
            }
          },
          "code_string": "message_start : message_start + conte"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 265,
              "character": 40
            },
            "end": {
              "line": 265,
              "character": 53
            }
          },
          "code_string": "message_start + content_length\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 36
            },
            "end": {
              "line": 267,
              "character": 49
            }
          },
          "code_string": "message_start + content_length :]\n"
        }
      ]
    },
    {
      "name": "message_data",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 264,
            "character": 20
          },
          "end": {
            "line": 266,
            "character": 21
          }
        }
      },
      "kind": "Variable",
      "code_string": "message_data = buffer[\n                        message_start : message_start + content_length\n                    ]",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 264,
              "character": 20
            },
            "end": {
              "line": 264,
              "character": 32
            }
          },
          "code_string": "message_data = buffer[\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 270,
              "character": 38
            },
            "end": {
              "line": 270,
              "character": 50
            }
          },
          "code_string": "message_data.decode(\"utf-8\")\n"
        }
      ]
    },
    {
      "name": "buffer",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 267,
            "character": 20
          },
          "end": {
            "line": 267,
            "character": 69
          }
        }
      },
      "kind": "Variable",
      "code_string": "buffer = buffer[message_start + content_length :]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 227,
              "character": 8
            },
            "end": {
              "line": 227,
              "character": 14
            }
          },
          "code_string": "buffer = b\"\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 239,
              "character": 16
            },
            "end": {
              "line": 239,
              "character": 22
            }
          },
          "code_string": "buffer += data\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 242,
              "character": 37
            },
            "end": {
              "line": 242,
              "character": 43
            }
          },
          "code_string": "buffer:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 243,
              "character": 33
            },
            "end": {
              "line": 243,
              "character": 39
            }
          },
          "code_string": "buffer.find(b\"\\r\\n\\r\\n\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 244,
              "character": 29
            },
            "end": {
              "line": 244,
              "character": 35
            }
          },
          "code_string": "buffer[:header_end].decode(\"utf-8\")"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 24
            },
            "end": {
              "line": 255,
              "character": 30
            }
          },
          "code_string": "buffer = buffer[header_end + 4"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 255,
              "character": 33
            },
            "end": {
              "line": 255,
              "character": 39
            }
          },
          "code_string": "buffer[header_end + 4 :]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 260,
              "character": 27
            },
            "end": {
              "line": 260,
              "character": 33
            }
          },
          "code_string": "buffer) < message_start + content"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 264,
              "character": 35
            },
            "end": {
              "line": 264,
              "character": 41
            }
          },
          "code_string": "buffer[\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 20
            },
            "end": {
              "line": 267,
              "character": 26
            }
          },
          "code_string": "buffer = buffer[message_st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 267,
              "character": 29
            },
            "end": {
              "line": 267,
              "character": 35
            }
          },
          "code_string": "buffer[message_start + content_leng"
        }
      ]
    },
    {
      "name": "message_str",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 270,
            "character": 24
          },
          "end": {
            "line": 270,
            "character": 66
          }
        }
      },
      "kind": "Variable",
      "code_string": "message_str = message_data.decode(\"utf-8\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 270,
              "character": 24
            },
            "end": {
              "line": 270,
              "character": 35
            }
          },
          "code_string": "message_str = message_data.decode(\""
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 271,
              "character": 45
            },
            "end": {
              "line": 271,
              "character": 56
            }
          },
          "code_string": "message_str)\n"
        }
      ]
    },
    {
      "name": "message",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 271,
            "character": 24
          },
          "end": {
            "line": 271,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "message = json.loads(message_str)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 271,
              "character": 24
            },
            "end": {
              "line": 271,
              "character": 31
            }
          },
          "code_string": "message = json.loads(message_st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 272,
              "character": 51
            },
            "end": {
              "line": 272,
              "character": 58
            }
          },
          "code_string": "message)\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 269,
            "character": 20
          },
          "end": {
            "line": 275,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                        message_str = message_data.decode(\"utf-8\")\n                        message = json.loads(message_str)\n                        await self._handle_message(message)\n                    except Exception as e:\n                        logger.error(f\"Error processing message: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "_read_messages",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 230,
            "character": 12
          },
          "end": {
            "line": 279,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                # Read data\n                data = await asyncio.get_event_loop().run_in_executor(\n                    None, self.process.stdout.read, 4096\n                )\n\n                if not data:\n                    break\n\n                buffer += data\n\n                # Process complete messages\n                while b\"\\r\\n\\r\\n\" in buffer:\n                    header_end = buffer.find(b\"\\r\\n\\r\\n\")\n                    header = buffer[:header_end].decode(\"utf-8\")\n\n                    # Parse content length\n                    content_length = None\n                    for line in header.split(\"\\r\\n\"):\n                        if line.startswith(\"Content-Length:\"):\n                            content_length = int(line.split(\":\")[1].strip())\n                            break\n\n                    if content_length is None:\n                        logger.error(\"No Content-Length header found\")\n                        buffer = buffer[header_end + 4 :]\n                        continue\n\n                    # Check if we have the complete message\n                    message_start = header_end + 4\n                    if len(buffer) < message_start + content_length:\n                        break\n\n                    # Extract and process message\n                    message_data = buffer[\n                        message_start : message_start + content_length\n                    ]\n                    buffer = buffer[message_start + content_length :]\n\n                    try:\n                        message_str = message_data.decode(\"utf-8\")\n                        message = json.loads(message_str)\n                        await self._handle_message(message)\n                    except Exception as e:\n                        logger.error(f\"Error processing message: {e}\")\n\n            except Exception as e:\n                logger.error(f\"Error reading from LSP server: {e}\")\n                break\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "msg_id",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 285,
            "character": 16
          },
          "end": {
            "line": 285,
            "character": 38
          }
        }
      },
      "kind": "Variable",
      "code_string": "msg_id = message[\"id\"]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 285,
              "character": 16
            },
            "end": {
              "line": 285,
              "character": 22
            }
          },
          "code_string": "msg_id = message[\"id\"]"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 286,
              "character": 19
            },
            "end": {
              "line": 286,
              "character": 25
            }
          },
          "code_string": "msg_id in self.pending_re"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 287,
              "character": 55
            },
            "end": {
              "line": 287,
              "character": 61
            }
          },
          "code_string": "msg_id)\n"
        }
      ]
    },
    {
      "name": "future",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 287,
            "character": 20
          },
          "end": {
            "line": 287,
            "character": 62
          }
        }
      },
      "kind": "Variable",
      "code_string": "future = self.pending_requests.pop(msg_id)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 287,
              "character": 20
            },
            "end": {
              "line": 287,
              "character": 26
            }
          },
          "code_string": "future = self.pending_requ"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 290,
              "character": 24
            },
            "end": {
              "line": 290,
              "character": 30
            }
          },
          "code_string": "future.set_exception(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 298,
              "character": 24
            },
            "end": {
              "line": 298,
              "character": 30
            }
          },
          "code_string": "future.set_result(message.get("
        }
      ]
    },
    {
      "name": "error",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 289,
            "character": 24
          },
          "end": {
            "line": 289,
            "character": 48
          }
        }
      },
      "kind": "Variable",
      "code_string": "error = message[\"error\"]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 289,
              "character": 24
            },
            "end": {
              "line": 289,
              "character": 29
            }
          },
          "code_string": "error = message[\"error\"]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 292,
              "character": 32
            },
            "end": {
              "line": 292,
              "character": 37
            }
          },
          "code_string": "error.get(\"code\", -1),\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 293,
              "character": 32
            },
            "end": {
              "line": 293,
              "character": 37
            }
          },
          "code_string": "error.get(\"message\", \"Unknown error\")"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 294,
              "character": 32
            },
            "end": {
              "line": 294,
              "character": 37
            }
          },
          "code_string": "error.get(\"data\"),\n"
        }
      ]
    },
    {
      "name": "method",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 301,
            "character": 16
          },
          "end": {
            "line": 301,
            "character": 42
          }
        }
      },
      "kind": "Variable",
      "code_string": "method = message[\"method\"]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 301,
              "character": 16
            },
            "end": {
              "line": 301,
              "character": 22
            }
          },
          "code_string": "method = message[\"meth"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 306,
              "character": 23
            },
            "end": {
              "line": 306,
              "character": 29
            }
          },
          "code_string": "method in self.request_handle"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 308,
              "character": 65
            },
            "end": {
              "line": 308,
              "character": 71
            }
          },
          "code_string": "method](params)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 314,
              "character": 72
            },
            "end": {
              "line": 314,
              "character": 78
            }
          },
          "code_string": "method}\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 318,
              "character": 23
            },
            "end": {
              "line": 318,
              "character": 29
            }
          },
          "code_string": "method in self.notification_h"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 320,
              "character": 61
            },
            "end": {
              "line": 320,
              "character": 67
            }
          },
          "code_string": "method](params)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 322,
              "character": 72
            },
            "end": {
              "line": 322,
              "character": 78
            }
          },
          "code_string": "method}: {e}\")\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 325,
              "character": 60
            },
            "end": {
              "line": 325,
              "character": 66
            }
          },
          "code_string": "method, params)\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 302,
            "character": 16
          },
          "end": {
            "line": 302,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = message.get(\"params\", {})\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 302,
              "character": 16
            },
            "end": {
              "line": 302,
              "character": 22
            }
          },
          "code_string": "params = message.get(\""
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 308,
              "character": 73
            },
            "end": {
              "line": 308,
              "character": 79
            }
          },
          "code_string": "params)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 320,
              "character": 69
            },
            "end": {
              "line": 320,
              "character": 75
            }
          },
          "code_string": "params)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 325,
              "character": 68
            },
            "end": {
              "line": 325,
              "character": 74
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 308,
            "character": 28
          },
          "end": {
            "line": 308,
            "character": 80
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self.request_handlers[method](params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 308,
              "character": 28
            },
            "end": {
              "line": 308,
              "character": 34
            }
          },
          "code_string": "result = await self.request_handle"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 309,
              "character": 69
            },
            "end": {
              "line": 309,
              "character": 75
            }
          },
          "code_string": "result)\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 307,
            "character": 24
          },
          "end": {
            "line": 312,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                            result = await self.request_handlers[method](params)\n                            await self._send_response(message[\"id\"], result)\n                        except Exception as e:\n                            await self._send_error(message[\"id\"], -32603, str(e))\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 319,
            "character": 24
          },
          "end": {
            "line": 323,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                            await self.notification_handlers[method](params)\n                        except Exception as e:\n                            logger.error(f\"Error handling notification {method}: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "_handle_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 282,
            "character": 8
          },
          "end": {
            "line": 329,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            if \"id\" in message and \"method\" not in message:\n                # Response\n                msg_id = message[\"id\"]\n                if msg_id in self.pending_requests:\n                    future = self.pending_requests.pop(msg_id)\n                    if \"error\" in message:\n                        error = message[\"error\"]\n                        future.set_exception(\n                            LSPError(\n                                error.get(\"code\", -1),\n                                error.get(\"message\", \"Unknown error\"),\n                                error.get(\"data\"),\n                            )\n                        )\n                    else:\n                        future.set_result(message.get(\"result\"))\n\n            elif \"method\" in message:\n                method = message[\"method\"]\n                params = message.get(\"params\", {})\n\n                if \"id\" in message:\n                    # Server request\n                    if method in self.request_handlers:\n                        try:\n                            result = await self.request_handlers[method](params)\n                            await self._send_response(message[\"id\"], result)\n                        except Exception as e:\n                            await self._send_error(message[\"id\"], -32603, str(e))\n                    else:\n                        await self._send_error(\n                            message[\"id\"], -32601, f\"Method not found: {method}\"\n                        )\n                else:\n                    # Notification\n                    if method in self.notification_handlers:\n                        try:\n                            await self.notification_handlers[method](params)\n                        except Exception as e:\n                            logger.error(f\"Error handling notification {method}: {e}\")\n\n                    # Handle built-in notifications\n                    await self._handle_builtin_notification(method, params)\n\n        except Exception as e:\n            logger.error(f\"Error handling message: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 335,
            "character": 12
          },
          "end": {
            "line": 335,
            "character": 39
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = params.get(\"uri\", \"\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 335,
              "character": 12
            },
            "end": {
              "line": 335,
              "character": 15
            }
          },
          "code_string": "uri = params.ge"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 360,
              "character": 29
            },
            "end": {
              "line": 360,
              "character": 32
            }
          },
          "code_string": "uri] = diagnostics\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 362,
              "character": 43
            },
            "end": {
              "line": 362,
              "character": 46
            }
          },
          "code_string": "uri}: {len(diagnostics)} diagnostics\"\n"
        }
      ]
    },
    {
      "name": "diagnostics_data",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 336,
            "character": 12
          },
          "end": {
            "line": 336,
            "character": 60
          }
        }
      },
      "kind": "Variable",
      "code_string": "diagnostics_data = params.get(\"diagnostics\", [])\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 336,
              "character": 12
            },
            "end": {
              "line": 336,
              "character": 28
            }
          },
          "code_string": "diagnostics_data = params.ge"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 340,
              "character": 29
            },
            "end": {
              "line": 340,
              "character": 45
            }
          },
          "code_string": "diagnostics_data:\n"
        }
      ]
    },
    {
      "name": "diagnostics",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 339,
            "character": 12
          },
          "end": {
            "line": 339,
            "character": 28
          }
        }
      },
      "kind": "Variable",
      "code_string": "diagnostics = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 339,
              "character": 12
            },
            "end": {
              "line": 339,
              "character": 23
            }
          },
          "code_string": "diagnostics = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 358,
              "character": 16
            },
            "end": {
              "line": 358,
              "character": 27
            }
          },
          "code_string": "diagnostics.append(diag)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 360,
              "character": 36
            },
            "end": {
              "line": 360,
              "character": 47
            }
          },
          "code_string": "diagnostics\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 362,
              "character": 54
            },
            "end": {
              "line": 362,
              "character": 65
            }
          },
          "code_string": "diagnostics)} diagnostics\"\n"
        }
      ]
    },
    {
      "name": "diag_data",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 340,
            "character": 12
          },
          "end": {
            "line": 359,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for diag_data in diagnostics_data:\n                range_data = diag_data[\"range\"]\n                diag = Diagnostic(\n                    range=Range(\n                        start=Position(\n                            line=range_data[\"start\"][\"line\"],\n                            character=range_data[\"start\"][\"character\"],\n                        ),\n                        end=Position(\n                            line=range_data[\"end\"][\"line\"],\n                            character=range_data[\"end\"][\"character\"],\n                        ),\n                    ),\n                    message=diag_data[\"message\"],\n                    severity=diag_data.get(\"severity\"),\n                    code=diag_data.get(\"code\"),\n                    source=diag_data.get(\"source\"),\n                )\n                diagnostics.append(diag)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "range_data",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 341,
            "character": 16
          },
          "end": {
            "line": 341,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "range_data = diag_data[\"range\"]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 341,
              "character": 16
            },
            "end": {
              "line": 341,
              "character": 26
            }
          },
          "code_string": "range_data = diag_data[\"ra"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 345,
              "character": 33
            },
            "end": {
              "line": 345,
              "character": 43
            }
          },
          "code_string": "range_data[\"start\"][\"line\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 346,
              "character": 38
            },
            "end": {
              "line": 346,
              "character": 48
            }
          },
          "code_string": "range_data[\"start\"][\"character\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 349,
              "character": 33
            },
            "end": {
              "line": 349,
              "character": 43
            }
          },
          "code_string": "range_data[\"end\"][\"line\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 350,
              "character": 38
            },
            "end": {
              "line": 350,
              "character": 48
            }
          },
          "code_string": "range_data[\"end\"][\"character\"],\n"
        }
      ]
    },
    {
      "name": "diag",
      "containerName": "_handle_builtin_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 342,
            "character": 16
          },
          "end": {
            "line": 357,
            "character": 17
          }
        }
      },
      "kind": "Variable",
      "code_string": "diag = Diagnostic(\n                    range=Range(\n                        start=Position(\n                            line=range_data[\"start\"][\"line\"],\n                            character=range_data[\"start\"][\"character\"],\n                        ),\n                        end=Position(\n                            line=range_data[\"end\"][\"line\"],\n                            character=range_data[\"end\"][\"character\"],\n                        ),\n                    ),\n                    message=diag_data[\"message\"],\n                    severity=diag_data.get(\"severity\"),\n                    code=diag_data.get(\"code\"),\n                    source=diag_data.get(\"source\"),\n                )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "LSP Diagnostic structure"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 342,
              "character": 16
            },
            "end": {
              "line": 342,
              "character": 20
            }
          },
          "code_string": "diag = Diagnostic(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 358,
              "character": 35
            },
            "end": {
              "line": 358,
              "character": 39
            }
          },
          "code_string": "diag)\n"
        }
      ]
    },
    {
      "name": "message_str",
      "containerName": "_send_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 370,
            "character": 8
          },
          "end": {
            "line": 370,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "message_str = json.dumps(message, separators=(\",\", \":\"))\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 370,
              "character": 8
            },
            "end": {
              "line": 370,
              "character": 19
            }
          },
          "code_string": "message_str = json."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 371,
              "character": 24
            },
            "end": {
              "line": 371,
              "character": 35
            }
          },
          "code_string": "message_str.encode(\"utf-8\")\n"
        }
      ]
    },
    {
      "name": "message_bytes",
      "containerName": "_send_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 371,
            "character": 8
          },
          "end": {
            "line": 371,
            "character": 51
          }
        }
      },
      "kind": "Variable",
      "code_string": "message_bytes = message_str.encode(\"utf-8\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 371,
              "character": 8
            },
            "end": {
              "line": 371,
              "character": 21
            }
          },
          "code_string": "message_bytes = messa"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 373,
              "character": 40
            },
            "end": {
              "line": 373,
              "character": 53
            }
          },
          "code_string": "message_bytes)}\\r\\n\\r\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 377,
              "character": 52
            },
            "end": {
              "line": 377,
              "character": 65
            }
          },
          "code_string": "message_bytes)\n"
        }
      ]
    },
    {
      "name": "header",
      "containerName": "_send_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 373,
            "character": 8
          },
          "end": {
            "line": 373,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "header = f\"Content-Length: {len(message_bytes)}\\r\\n\\r\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 373,
              "character": 8
            },
            "end": {
              "line": 373,
              "character": 14
            }
          },
          "code_string": "header = f\"Con"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 374,
              "character": 23
            },
            "end": {
              "line": 374,
              "character": 29
            }
          },
          "code_string": "header.encode(\"utf-8\")\n"
        }
      ]
    },
    {
      "name": "header_bytes",
      "containerName": "_send_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 374,
            "character": 8
          },
          "end": {
            "line": 374,
            "character": 45
          }
        }
      },
      "kind": "Variable",
      "code_string": "header_bytes = header.encode(\"utf-8\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nbytes(iterable_of_ints) -> bytes\nbytes(string, encoding[, errors]) -> bytes\nbytes(bytes_or_buffer) -> immutable copy of bytes_or_buffer\nbytes(int) -> bytes object of size given by the parameter initialized with null bytes\nbytes() -> empty bytes object\n```\n\nConstruct an immutable array of bytes from:\n  - an iterable yielding integers in range(256)\n  - a text string encoded using the specified encoding\n  - any object implementing the buffer API.\n  - an integer"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 374,
              "character": 8
            },
            "end": {
              "line": 374,
              "character": 20
            }
          },
          "code_string": "header_bytes = heade"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 377,
              "character": 37
            },
            "end": {
              "line": 377,
              "character": 49
            }
          },
          "code_string": "header_bytes + message_bytes)\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "_send_message",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 376,
            "character": 8
          },
          "end": {
            "line": 382,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            self.process.stdin.write(header_bytes + message_bytes)\n            self.process.stdin.flush()\n        except Exception as e:\n            logger.error(f\"Error sending message: {e}\")\n            raise\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "request_id",
      "containerName": "_send_request",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 386,
            "character": 12
          },
          "end": {
            "line": 386,
            "character": 32
          }
        }
      },
      "kind": "Field",
      "code_string": "self.request_id += 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 383,
              "character": 28
            },
            "end": {
              "line": 383,
              "character": 32
            }
          },
          "code_string": "self, method: str, params: Any ="
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 385,
              "character": 19
            },
            "end": {
              "line": 385,
              "character": 23
            }
          },
          "code_string": "self.lock:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 386,
              "character": 12
            },
            "end": {
              "line": 386,
              "character": 16
            }
          },
          "code_string": "self.request_id "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 387,
              "character": 25
            },
            "end": {
              "line": 387,
              "character": 29
            }
          },
          "code_string": "self.request_id\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 397,
              "character": 8
            },
            "end": {
              "line": 397,
              "character": 12
            }
          },
          "code_string": "self.pending"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 399,
              "character": 14
            },
            "end": {
              "line": 399,
              "character": 18
            }
          },
          "code_string": "self._send_message"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 405,
              "character": 12
            },
            "end": {
              "line": 405,
              "character": 16
            }
          },
          "code_string": "self.pending_req"
        }
      ]
    },
    {
      "name": "request_id",
      "containerName": "_send_request",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 387,
            "character": 12
          },
          "end": {
            "line": 387,
            "character": 40
          }
        }
      },
      "kind": "Variable",
      "code_string": "request_id = self.request_id\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 387,
              "character": 12
            },
            "end": {
              "line": 387,
              "character": 22
            }
          },
          "code_string": "request_id = self.requ"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 391,
              "character": 18
            },
            "end": {
              "line": 391,
              "character": 28
            }
          },
          "code_string": "request_id,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 397,
              "character": 30
            },
            "end": {
              "line": 397,
              "character": 40
            }
          },
          "code_string": "request_id] = future\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 405,
              "character": 38
            },
            "end": {
              "line": 405,
              "character": 48
            }
          },
          "code_string": "request_id, None)\n"
        }
      ]
    },
    {
      "name": "message",
      "containerName": "_send_request",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 389,
            "character": 8
          },
          "end": {
            "line": 394,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "message = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"method\": method,\n            \"params\": params or {},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 389,
              "character": 8
            },
            "end": {
              "line": 389,
              "character": 15
            }
          },
          "code_string": "message = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 399,
              "character": 33
            },
            "end": {
              "line": 399,
              "character": 40
            }
          },
          "code_string": "message)\n"
        }
      ]
    },
    {
      "name": "future",
      "containerName": "_send_request",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 396,
            "character": 8
          },
          "end": {
            "line": 396,
            "character": 33
          }
        }
      },
      "kind": "Variable",
      "code_string": "future = asyncio.Future()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 396,
              "character": 8
            },
            "end": {
              "line": 396,
              "character": 14
            }
          },
          "code_string": "future = async"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 397,
              "character": 44
            },
            "end": {
              "line": 397,
              "character": 50
            }
          },
          "code_string": "future\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 402,
              "character": 44
            },
            "end": {
              "line": 402,
              "character": 50
            }
          },
          "code_string": "future, timeout=30.0)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "_send_request",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 402,
            "character": 12
          },
          "end": {
            "line": 402,
            "character": 65
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await asyncio.wait_for(future, timeout=30.0)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 402,
              "character": 12
            },
            "end": {
              "line": 402,
              "character": 18
            }
          },
          "code_string": "result = await asy"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 403,
              "character": 19
            },
            "end": {
              "line": 403,
              "character": 25
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "message",
      "containerName": "_send_notification",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 410,
            "character": 8
          },
          "end": {
            "line": 410,
            "character": 78
          }
        }
      },
      "kind": "Variable",
      "code_string": "message = {\"jsonrpc\": \"2.0\", \"method\": method, \"params\": params or {}}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 410,
              "character": 8
            },
            "end": {
              "line": 410,
              "character": 15
            }
          },
          "code_string": "message = {\"jso"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 411,
              "character": 33
            },
            "end": {
              "line": 411,
              "character": 40
            }
          },
          "code_string": "message)\n"
        }
      ]
    },
    {
      "name": "message",
      "containerName": "_send_response",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 415,
            "character": 8
          },
          "end": {
            "line": 415,
            "character": 72
          }
        }
      },
      "kind": "Variable",
      "code_string": "message = {\"jsonrpc\": \"2.0\", \"id\": request_id, \"result\": result}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 415,
              "character": 8
            },
            "end": {
              "line": 415,
              "character": 15
            }
          },
          "code_string": "message = {\"jso"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 416,
              "character": 33
            },
            "end": {
              "line": 416,
              "character": 40
            }
          },
          "code_string": "message)\n"
        }
      ]
    },
    {
      "name": "error_msg",
      "containerName": "_send_error",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 422,
            "character": 8
          },
          "end": {
            "line": 426,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "error_msg = {\n            \"jsonrpc\": \"2.0\",\n            \"id\": request_id,\n            \"error\": {\"code\": code, \"message\": message},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 422,
              "character": 8
            },
            "end": {
              "line": 422,
              "character": 17
            }
          },
          "code_string": "error_msg = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 428,
              "character": 12
            },
            "end": {
              "line": 428,
              "character": 21
            }
          },
          "code_string": "error_msg[\"error\"][\"d"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 429,
              "character": 33
            },
            "end": {
              "line": 429,
              "character": 42
            }
          },
          "code_string": "error_msg)\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "initialize",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 435,
            "character": 8
          },
          "end": {
            "line": 487,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"processId\": os.getpid(),\n            \"clientInfo\": {\"name\": \"python-lsp-client\", \"version\": \"1.0.0\"},\n            \"rootPath\": workspace_path,\n            \"rootUri\": self.path_to_uri(workspace_path),\n            \"capabilities\": {\n                \"workspace\": {\n                    \"configuration\": True,\n                    \"didChangeConfiguration\": {\"dynamicRegistration\": True},\n                    \"didChangeWatchedFiles\": {\n                        \"dynamicRegistration\": True,\n                        \"relativePatternSupport\": True,\n                    },\n                },\n                \"textDocument\": {\n                    \"synchronization\": {\"dynamicRegistration\": True, \"didSave\": True},\n                    \"completion\": {\"completionItem\": {}},\n                    \"hover\": {\n                        \"dynamicRegistration\": True,\n                        \"contentFormat\": [\"markdown\", \"plaintext\"],\n                    },\n                    \"signatureHelp\": {\"dynamicRegistration\": True},\n                    \"definition\": {\"dynamicRegistration\": True, \"linkSupport\": True},\n                    \"references\": {\"dynamicRegistration\": True},\n                    \"documentHighlight\": {\"dynamicRegistration\": True},\n                    \"documentSymbol\": {\n                        \"dynamicRegistration\": True,\n                        \"hierarchicalDocumentSymbolSupport\": True,\n                    },\n                    \"formatting\": {\"dynamicRegistration\": True},\n                    \"rangeFormatting\": {\"dynamicRegistration\": True},\n                    \"onTypeFormatting\": {\"dynamicRegistration\": True},\n                    \"rename\": {\"dynamicRegistration\": True, \"prepareSupport\": True},\n                    \"codeAction\": {\n                        \"dynamicRegistration\": True,\n                        \"codeActionLiteralSupport\": {\n                            \"codeActionKind\": {\"valueSet\": []}\n                        },\n                    },\n                    \"codeLens\": {\"dynamicRegistration\": True},\n                    \"documentLink\": {\"dynamicRegistration\": True},\n                    \"publishDiagnostics\": {\"versionSupport\": True},\n                },\n                \"window\": {},\n            },\n            \"initializationOptions\": {},\n            \"workspaceFolders\": [\n                {\n                    \"uri\": self.path_to_uri(workspace_path),\n                    \"name\": os.path.basename(workspace_path),\n                }\n            ],\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 435,
              "character": 8
            },
            "end": {
              "line": 435,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 489,
              "character": 56
            },
            "end": {
              "line": 489,
              "character": 62
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "initialize",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 489,
            "character": 8
          },
          "end": {
            "line": 489,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"initialize\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 489,
              "character": 8
            },
            "end": {
              "line": 489,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 490,
              "character": 35
            },
            "end": {
              "line": 490,
              "character": 41
            }
          },
          "code_string": "result.get(\"capabilities\", {})\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 497,
              "character": 15
            },
            "end": {
              "line": 497,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "server_capabilities",
      "containerName": "initialize",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 490,
            "character": 8
          },
          "end": {
            "line": 490,
            "character": 65
          }
        }
      },
      "kind": "Field",
      "code_string": "self.server_capabilities = result.get(\"capabilities\", {})\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 433,
              "character": 25
            },
            "end": {
              "line": 433,
              "character": 29
            }
          },
          "code_string": "self, workspace_path: str) ->"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 439,
              "character": 23
            },
            "end": {
              "line": 439,
              "character": 27
            }
          },
          "code_string": "self.path_to_uri(workspace_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 483,
              "character": 27
            },
            "end": {
              "line": 483,
              "character": 31
            }
          },
          "code_string": "self.path_to_uri(workspace_path"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 489,
              "character": 23
            },
            "end": {
              "line": 489,
              "character": 27
            }
          },
          "code_string": "self._send_request(\"initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 490,
              "character": 8
            },
            "end": {
              "line": 490,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 491,
              "character": 8
            },
            "end": {
              "line": 491,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 494,
              "character": 14
            },
            "end": {
              "line": 494,
              "character": 18
            }
          },
          "code_string": "self._send_notific"
        }
      ]
    },
    {
      "name": "initialized",
      "containerName": "initialize",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 491,
            "character": 8
          },
          "end": {
            "line": 491,
            "character": 31
          }
        }
      },
      "kind": "Field",
      "code_string": "self.initialized = True\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 433,
              "character": 25
            },
            "end": {
              "line": 433,
              "character": 29
            }
          },
          "code_string": "self, workspace_path: str) ->"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 439,
              "character": 23
            },
            "end": {
              "line": 439,
              "character": 27
            }
          },
          "code_string": "self.path_to_uri(workspace_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 483,
              "character": 27
            },
            "end": {
              "line": 483,
              "character": 31
            }
          },
          "code_string": "self.path_to_uri(workspace_path"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 489,
              "character": 23
            },
            "end": {
              "line": 489,
              "character": 27
            }
          },
          "code_string": "self._send_request(\"initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 490,
              "character": 8
            },
            "end": {
              "line": 490,
              "character": 12
            }
          },
          "code_string": "self.server_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 491,
              "character": 8
            },
            "end": {
              "line": 491,
              "character": 12
            }
          },
          "code_string": "self.initial"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 494,
              "character": 14
            },
            "end": {
              "line": 494,
              "character": 18
            }
          },
          "code_string": "self._send_notific"
        }
      ]
    },
    {
      "name": "initialized",
      "containerName": "shutdown",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 504,
            "character": 12
          },
          "end": {
            "line": 504,
            "character": 36
          }
        }
      },
      "kind": "Field",
      "code_string": "self.initialized = False\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 499,
              "character": 23
            },
            "end": {
              "line": 499,
              "character": 27
            }
          },
          "code_string": "self) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 501,
              "character": 11
            },
            "end": {
              "line": 501,
              "character": 15
            }
          },
          "code_string": "self.initialize"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 502,
              "character": 18
            },
            "end": {
              "line": 502,
              "character": 22
            }
          },
          "code_string": "self._send_request(\"sh"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 503,
              "character": 18
            },
            "end": {
              "line": 503,
              "character": 22
            }
          },
          "code_string": "self._send_notificatio"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 504,
              "character": 12
            },
            "end": {
              "line": 504,
              "character": 16
            }
          },
          "code_string": "self.initialized"
        }
      ]
    },
    {
      "name": "running",
      "containerName": "stop",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 511,
            "character": 8
          },
          "end": {
            "line": 511,
            "character": 28
          }
        }
      },
      "kind": "Field",
      "code_string": "self.running = False\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 506,
              "character": 19
            },
            "end": {
              "line": 506,
              "character": 23
            }
          },
          "code_string": "self) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 508,
              "character": 15
            },
            "end": {
              "line": 508,
              "character": 19
            }
          },
          "code_string": "self.running:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 511,
              "character": 8
            },
            "end": {
              "line": 511,
              "character": 12
            }
          },
          "code_string": "self.running"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 514,
              "character": 15
            },
            "end": {
              "line": 514,
              "character": 19
            }
          },
          "code_string": "self.initialized:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 515,
              "character": 22
            },
            "end": {
              "line": 515,
              "character": 26
            }
          },
          "code_string": "self.shutdown()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 519,
              "character": 11
            },
            "end": {
              "line": 519,
              "character": 15
            }
          },
          "code_string": "self.read_task:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 520,
              "character": 12
            },
            "end": {
              "line": 520,
              "character": 16
            }
          },
          "code_string": "self.read_task.c"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 522,
              "character": 22
            },
            "end": {
              "line": 522,
              "character": 26
            }
          },
          "code_string": "self.read_task\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 526,
              "character": 11
            },
            "end": {
              "line": 526,
              "character": 15
            }
          },
          "code_string": "self.process:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 528,
              "character": 16
            },
            "end": {
              "line": 528,
              "character": 20
            }
          },
          "code_string": "self.process.termina"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 529,
              "character": 16
            },
            "end": {
              "line": 529,
              "character": 20
            }
          },
          "code_string": "self.process.wait(ti"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 531,
              "character": 16
            },
            "end": {
              "line": 531,
              "character": 20
            }
          },
          "code_string": "self.process.kill()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 532,
              "character": 16
            },
            "end": {
              "line": 532,
              "character": 20
            }
          },
          "code_string": "self.process.wait()\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "stop",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 513,
            "character": 8
          },
          "end": {
            "line": 518,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            if self.initialized:\n                await self.shutdown()\n        except Exception as e:\n            logger.error(f\"Error during shutdown: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "e",
      "containerName": "stop",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 527,
            "character": 12
          },
          "end": {
            "line": 535,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                self.process.terminate()\n                self.process.wait(timeout=5)\n            except subprocess.TimeoutExpired:\n                self.process.kill()\n                self.process.wait()\n            except Exception as e:\n                logger.error(f\"Error stopping process: {e}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "f",
      "containerName": "did_open",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 545,
            "character": 8
          },
          "end": {
            "line": 547,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n            content = f.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "content",
      "containerName": "did_open",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 546,
            "character": 12
          },
          "end": {
            "line": 546,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "content = f.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 546,
              "character": 12
            },
            "end": {
              "line": 546,
              "character": 19
            }
          },
          "code_string": "content = f.read()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 555,
              "character": 24
            },
            "end": {
              "line": 555,
              "character": 31
            }
          },
          "code_string": "content,\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "did_open",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 548,
            "character": 8
          },
          "end": {
            "line": 548,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 548,
              "character": 8
            },
            "end": {
              "line": 548,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 552,
              "character": 23
            },
            "end": {
              "line": 552,
              "character": 26
            }
          },
          "code_string": "uri,\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 559,
              "character": 24
            },
            "end": {
              "line": 559,
              "character": 27
            }
          },
          "code_string": "uri] = {\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "did_open",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 550,
            "character": 8
          },
          "end": {
            "line": 557,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\n                \"uri\": uri,\n                \"languageId\": self.detect_language_id(file_path),\n                \"version\": 1,\n                \"text\": content,\n            }\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 550,
              "character": 8
            },
            "end": {
              "line": 550,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 565,
              "character": 62
            },
            "end": {
              "line": 565,
              "character": 68
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "did_change",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 570,
            "character": 8
          },
          "end": {
            "line": 570,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 570,
              "character": 8
            },
            "end": {
              "line": 570,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 572,
              "character": 11
            },
            "end": {
              "line": 572,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 580,
              "character": 34
            },
            "end": {
              "line": 580,
              "character": 37
            }
          },
          "code_string": "uri][\"version\"] + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 581,
              "character": 24
            },
            "end": {
              "line": 581,
              "character": 27
            }
          },
          "code_string": "uri][\"version\"] = version\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 584,
              "character": 36
            },
            "end": {
              "line": 584,
              "character": 39
            }
          },
          "code_string": "uri, \"version\": version},\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "did_change",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 577,
            "character": 12
          },
          "end": {
            "line": 579,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                content = f.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "content",
      "containerName": "did_change",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 578,
            "character": 16
          },
          "end": {
            "line": 578,
            "character": 34
          }
        }
      },
      "kind": "Variable",
      "code_string": "content = f.read()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 568,
              "character": 47
            },
            "end": {
              "line": 568,
              "character": 54
            }
          },
          "code_string": "content: str = None) -> None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 576,
              "character": 11
            },
            "end": {
              "line": 576,
              "character": 18
            }
          },
          "code_string": "content is None:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 578,
              "character": 16
            },
            "end": {
              "line": 578,
              "character": 23
            }
          },
          "code_string": "content = f.read()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 585,
              "character": 40
            },
            "end": {
              "line": 585,
              "character": 47
            }
          },
          "code_string": "content}],\n"
        }
      ]
    },
    {
      "name": "version",
      "containerName": "did_change",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 580,
            "character": 8
          },
          "end": {
            "line": 580,
            "character": 53
          }
        }
      },
      "kind": "Variable",
      "code_string": "version = self.open_files[uri][\"version\"] + 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 580,
              "character": 8
            },
            "end": {
              "line": 580,
              "character": 15
            }
          },
          "code_string": "version = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 581,
              "character": 42
            },
            "end": {
              "line": 581,
              "character": 49
            }
          },
          "code_string": "version\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 584,
              "character": 52
            },
            "end": {
              "line": 584,
              "character": 59
            }
          },
          "code_string": "version},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "did_change",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 583,
            "character": 8
          },
          "end": {
            "line": 586,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri, \"version\": version},\n            \"contentChanges\": [{\"text\": content}],\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 583,
              "character": 8
            },
            "end": {
              "line": 583,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 588,
              "character": 64
            },
            "end": {
              "line": 588,
              "character": 70
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "did_save",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 592,
            "character": 8
          },
          "end": {
            "line": 592,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 592,
              "character": 8
            },
            "end": {
              "line": 592,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 594,
              "character": 42
            },
            "end": {
              "line": 594,
              "character": 45
            }
          },
          "code_string": "uri}}\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "did_save",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 594,
            "character": 8
          },
          "end": {
            "line": 594,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"textDocument\": {\"uri\": uri}}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 594,
              "character": 8
            },
            "end": {
              "line": 594,
              "character": 14
            }
          },
          "code_string": "params = {\"tex"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 596,
              "character": 62
            },
            "end": {
              "line": 596,
              "character": 68
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "did_close",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 600,
            "character": 8
          },
          "end": {
            "line": 600,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 600,
              "character": 8
            },
            "end": {
              "line": 600,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 602,
              "character": 11
            },
            "end": {
              "line": 602,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 605,
              "character": 42
            },
            "end": {
              "line": 605,
              "character": 45
            }
          },
          "code_string": "uri}}\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 607,
              "character": 28
            },
            "end": {
              "line": 607,
              "character": 31
            }
          },
          "code_string": "uri]\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "did_close",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 605,
            "character": 8
          },
          "end": {
            "line": 605,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"textDocument\": {\"uri\": uri}}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 605,
              "character": 8
            },
            "end": {
              "line": 605,
              "character": 14
            }
          },
          "code_string": "params = {\"tex"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 608,
              "character": 63
            },
            "end": {
              "line": 608,
              "character": 69
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_hover",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 617,
            "character": 8
          },
          "end": {
            "line": 617,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 617,
              "character": 8
            },
            "end": {
              "line": 617,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 619,
              "character": 11
            },
            "end": {
              "line": 619,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 623,
              "character": 36
            },
            "end": {
              "line": 623,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_hover",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 622,
            "character": 8
          },
          "end": {
            "line": 625,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 622,
              "character": 8
            },
            "end": {
              "line": 622,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 627,
              "character": 64
            },
            "end": {
              "line": 627,
              "character": 70
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_hover",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 627,
            "character": 8
          },
          "end": {
            "line": 627,
            "character": 71
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/hover\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 627,
              "character": 8
            },
            "end": {
              "line": 627,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 628,
              "character": 15
            },
            "end": {
              "line": 628,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 634,
            "character": 8
          },
          "end": {
            "line": 634,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 634,
              "character": 8
            },
            "end": {
              "line": 634,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 636,
              "character": 11
            },
            "end": {
              "line": 636,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 640,
              "character": 36
            },
            "end": {
              "line": 640,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 639,
            "character": 8
          },
          "end": {
            "line": 642,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 639,
              "character": 8
            },
            "end": {
              "line": 639,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 644,
              "character": 69
            },
            "end": {
              "line": 644,
              "character": 75
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 644,
            "character": 8
          },
          "end": {
            "line": 644,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/definition\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 644,
              "character": 8
            },
            "end": {
              "line": 644,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 646,
              "character": 15
            },
            "end": {
              "line": 646,
              "character": 21
            }
          },
          "code_string": "result:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 650,
              "character": 20
            },
            "end": {
              "line": 650,
              "character": 26
            }
          },
          "code_string": "result if isinstance(resul"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 650,
              "character": 41
            },
            "end": {
              "line": 650,
              "character": 47
            }
          },
          "code_string": "result, list) else [result]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 650,
              "character": 61
            },
            "end": {
              "line": 650,
              "character": 67
            }
          },
          "code_string": "result]\n"
        }
      ]
    },
    {
      "name": "locations",
      "containerName": "get_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 650,
            "character": 8
          },
          "end": {
            "line": 650,
            "character": 68
          }
        }
      },
      "kind": "Variable",
      "code_string": "locations = result if isinstance(result, list) else [result]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 650,
              "character": 8
            },
            "end": {
              "line": 650,
              "character": 17
            }
          },
          "code_string": "locations = resul"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 666,
              "character": 23
            },
            "end": {
              "line": 666,
              "character": 32
            }
          },
          "code_string": "locations\n"
        }
      ]
    },
    {
      "name": "loc",
      "containerName": "get_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 666,
            "character": 12
          },
          "end": {
            "line": 666,
            "character": 32
          }
        }
      },
      "kind": "Variable",
      "code_string": "for loc in locations\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "get_references",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 677,
            "character": 8
          },
          "end": {
            "line": 677,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 677,
              "character": 8
            },
            "end": {
              "line": 677,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 678,
              "character": 14
            },
            "end": {
              "line": 678,
              "character": 17
            }
          },
          "code_string": "uri)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 679,
              "character": 11
            },
            "end": {
              "line": 679,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 683,
              "character": 36
            },
            "end": {
              "line": 683,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_references",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 682,
            "character": 8
          },
          "end": {
            "line": 686,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"context\": {\"includeDeclaration\": include_declaration},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 682,
              "character": 8
            },
            "end": {
              "line": 682,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 688,
              "character": 69
            },
            "end": {
              "line": 688,
              "character": 75
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_references",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 688,
            "character": 8
          },
          "end": {
            "line": 688,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/references\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 688,
              "character": 8
            },
            "end": {
              "line": 688,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 690,
              "character": 15
            },
            "end": {
              "line": 690,
              "character": 21
            }
          },
          "code_string": "result:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 706,
              "character": 23
            },
            "end": {
              "line": 706,
              "character": 29
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "loc",
      "containerName": "get_references",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 706,
            "character": 12
          },
          "end": {
            "line": 706,
            "character": 29
          }
        }
      },
      "kind": "Variable",
      "code_string": "for loc in result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "get_completion",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 713,
            "character": 8
          },
          "end": {
            "line": 713,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 713,
              "character": 8
            },
            "end": {
              "line": 713,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 715,
              "character": 11
            },
            "end": {
              "line": 715,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 719,
              "character": 36
            },
            "end": {
              "line": 719,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_completion",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 718,
            "character": 8
          },
          "end": {
            "line": 721,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 718,
              "character": 8
            },
            "end": {
              "line": 718,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 723,
              "character": 69
            },
            "end": {
              "line": 723,
              "character": 75
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_completion",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 723,
            "character": 8
          },
          "end": {
            "line": 723,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/completion\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 723,
              "character": 8
            },
            "end": {
              "line": 723,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 724,
              "character": 15
            },
            "end": {
              "line": 724,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_signature_help",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 730,
            "character": 8
          },
          "end": {
            "line": 730,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 730,
              "character": 8
            },
            "end": {
              "line": 730,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 732,
              "character": 11
            },
            "end": {
              "line": 732,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 736,
              "character": 36
            },
            "end": {
              "line": 736,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_signature_help",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 735,
            "character": 8
          },
          "end": {
            "line": 738,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 735,
              "character": 8
            },
            "end": {
              "line": 735,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 740,
              "character": 72
            },
            "end": {
              "line": 740,
              "character": 78
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_signature_help",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 740,
            "character": 8
          },
          "end": {
            "line": 740,
            "character": 79
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/signatureHelp\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 740,
              "character": 8
            },
            "end": {
              "line": 740,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 741,
              "character": 15
            },
            "end": {
              "line": 741,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_document_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 745,
            "character": 8
          },
          "end": {
            "line": 745,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 745,
              "character": 8
            },
            "end": {
              "line": 745,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 747,
              "character": 11
            },
            "end": {
              "line": 747,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 750,
              "character": 42
            },
            "end": {
              "line": 750,
              "character": 45
            }
          },
          "code_string": "uri}}\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_document_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 750,
            "character": 8
          },
          "end": {
            "line": 750,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"textDocument\": {\"uri\": uri}}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 750,
              "character": 8
            },
            "end": {
              "line": 750,
              "character": 14
            }
          },
          "code_string": "params = {\"tex"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 752,
              "character": 73
            },
            "end": {
              "line": 752,
              "character": 79
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_document_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 752,
            "character": 8
          },
          "end": {
            "line": 752,
            "character": 80
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/documentSymbol\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 752,
              "character": 8
            },
            "end": {
              "line": 752,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 753,
              "character": 15
            },
            "end": {
              "line": 753,
              "character": 21
            }
          },
          "code_string": "result or []\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_workspace_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 757,
            "character": 8
          },
          "end": {
            "line": 757,
            "character": 33
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"query\": query}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 757,
              "character": 8
            },
            "end": {
              "line": 757,
              "character": 14
            }
          },
          "code_string": "params = {\"que"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 759,
              "character": 62
            },
            "end": {
              "line": 759,
              "character": 68
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_workspace_symbols",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 759,
            "character": 8
          },
          "end": {
            "line": 759,
            "character": 69
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"workspace/symbol\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 759,
              "character": 8
            },
            "end": {
              "line": 759,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 760,
              "character": 15
            },
            "end": {
              "line": 760,
              "character": 21
            }
          },
          "code_string": "result or []\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "format_document",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 764,
            "character": 8
          },
          "end": {
            "line": 764,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 764,
              "character": 8
            },
            "end": {
              "line": 764,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 766,
              "character": 11
            },
            "end": {
              "line": 766,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 770,
              "character": 36
            },
            "end": {
              "line": 770,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "format_document",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 769,
            "character": 8
          },
          "end": {
            "line": 772,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 769,
              "character": 8
            },
            "end": {
              "line": 769,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 774,
              "character": 69
            },
            "end": {
              "line": 774,
              "character": 75
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "format_document",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 774,
            "character": 8
          },
          "end": {
            "line": 774,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/formatting\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 774,
              "character": 8
            },
            "end": {
              "line": 774,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 776,
              "character": 15
            },
            "end": {
              "line": 776,
              "character": 21
            }
          },
          "code_string": "result:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 793,
              "character": 24
            },
            "end": {
              "line": 793,
              "character": 30
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "edit",
      "containerName": "format_document",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 793,
            "character": 12
          },
          "end": {
            "line": 793,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "for edit in result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "format_range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 805,
            "character": 8
          },
          "end": {
            "line": 805,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 805,
              "character": 8
            },
            "end": {
              "line": 805,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 807,
              "character": 11
            },
            "end": {
              "line": 807,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 811,
              "character": 36
            },
            "end": {
              "line": 811,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "format_range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 810,
            "character": 8
          },
          "end": {
            "line": 817,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"options\": {\"tabSize\": 4, \"insertSpaces\": True},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 810,
              "character": 8
            },
            "end": {
              "line": 810,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 819,
              "character": 74
            },
            "end": {
              "line": 819,
              "character": 80
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "format_range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 819,
            "character": 8
          },
          "end": {
            "line": 819,
            "character": 81
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/rangeFormatting\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 819,
              "character": 8
            },
            "end": {
              "line": 819,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 821,
              "character": 15
            },
            "end": {
              "line": 821,
              "character": 21
            }
          },
          "code_string": "result:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 838,
              "character": 24
            },
            "end": {
              "line": 838,
              "character": 30
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "edit",
      "containerName": "format_range",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 838,
            "character": 12
          },
          "end": {
            "line": 838,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "for edit in result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "uri",
      "containerName": "rename_symbol",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 845,
            "character": 8
          },
          "end": {
            "line": 845,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 845,
              "character": 8
            },
            "end": {
              "line": 845,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 847,
              "character": 11
            },
            "end": {
              "line": 847,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 851,
              "character": 36
            },
            "end": {
              "line": 851,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "rename_symbol",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 850,
            "character": 8
          },
          "end": {
            "line": 854,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"position\": {\"line\": line, \"character\": character},\n            \"newName\": new_name,\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 850,
              "character": 8
            },
            "end": {
              "line": 850,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 856,
              "character": 65
            },
            "end": {
              "line": 856,
              "character": 71
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "rename_symbol",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 856,
            "character": 8
          },
          "end": {
            "line": 856,
            "character": 72
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/rename\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 856,
              "character": 8
            },
            "end": {
              "line": 856,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 857,
              "character": 15
            },
            "end": {
              "line": 857,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_code_actions",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 869,
            "character": 8
          },
          "end": {
            "line": 869,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 869,
              "character": 8
            },
            "end": {
              "line": 869,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 871,
              "character": 11
            },
            "end": {
              "line": 871,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 897,
              "character": 36
            },
            "end": {
              "line": 897,
              "character": 39
            }
          },
          "code_string": "uri},\n"
        }
      ]
    },
    {
      "name": "diag_data",
      "containerName": "get_code_actions",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 874,
            "character": 8
          },
          "end": {
            "line": 874,
            "character": 22
          }
        }
      },
      "kind": "Variable",
      "code_string": "diag_data = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 874,
              "character": 8
            },
            "end": {
              "line": 874,
              "character": 17
            }
          },
          "code_string": "diag_data = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 877,
              "character": 16
            },
            "end": {
              "line": 877,
              "character": 25
            }
          },
          "code_string": "diag_data.append(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 902,
              "character": 39
            },
            "end": {
              "line": 902,
              "character": 48
            }
          },
          "code_string": "diag_data},\n"
        }
      ]
    },
    {
      "name": "diag",
      "containerName": "get_code_actions",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 876,
            "character": 12
          },
          "end": {
            "line": 895,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for diag in diagnostics:\n                diag_data.append(\n                    {\n                        \"range\": {\n                            \"start\": {\n                                \"line\": diag.range.start.line,\n                                \"character\": diag.range.start.character,\n                            },\n                            \"end\": {\n                                \"line\": diag.range.end.line,\n                                \"character\": diag.range.end.character,\n                            },\n                        },\n                        \"message\": diag.message,\n                        \"severity\": diag.severity,\n                        \"code\": diag.code,\n                        \"source\": diag.source,\n                    }\n                )\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "params",
      "containerName": "get_code_actions",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 896,
            "character": 8
          },
          "end": {
            "line": 903,
            "character": 9
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\n            \"textDocument\": {\"uri\": uri},\n            \"range\": {\n                \"start\": {\"line\": start_line, \"character\": start_char},\n                \"end\": {\"line\": end_line, \"character\": end_char},\n            },\n            \"context\": {\"diagnostics\": diag_data},\n        }",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 896,
              "character": 8
            },
            "end": {
              "line": 896,
              "character": 14
            }
          },
          "code_string": "params = {\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 905,
              "character": 69
            },
            "end": {
              "line": 905,
              "character": 75
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_code_actions",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 905,
            "character": 8
          },
          "end": {
            "line": 905,
            "character": 76
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/codeAction\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 905,
              "character": 8
            },
            "end": {
              "line": 905,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 906,
              "character": 15
            },
            "end": {
              "line": 906,
              "character": 21
            }
          },
          "code_string": "result or []\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_code_lens",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 910,
            "character": 8
          },
          "end": {
            "line": 910,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 910,
              "character": 8
            },
            "end": {
              "line": 910,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 912,
              "character": 11
            },
            "end": {
              "line": 912,
              "character": 14
            }
          },
          "code_string": "uri not in sel"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 915,
              "character": 42
            },
            "end": {
              "line": 915,
              "character": 45
            }
          },
          "code_string": "uri}}\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "get_code_lens",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 915,
            "character": 8
          },
          "end": {
            "line": 915,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"textDocument\": {\"uri\": uri}}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 915,
              "character": 8
            },
            "end": {
              "line": 915,
              "character": 14
            }
          },
          "code_string": "params = {\"tex"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 917,
              "character": 67
            },
            "end": {
              "line": 917,
              "character": 73
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_code_lens",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 917,
            "character": 8
          },
          "end": {
            "line": 917,
            "character": 74
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"textDocument/codeLens\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 917,
              "character": 8
            },
            "end": {
              "line": 917,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 918,
              "character": 15
            },
            "end": {
              "line": 918,
              "character": 21
            }
          },
          "code_string": "result or []\n"
        }
      ]
    },
    {
      "name": "params",
      "containerName": "execute_command",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 922,
            "character": 8
          },
          "end": {
            "line": 922,
            "character": 67
          }
        }
      },
      "kind": "Variable",
      "code_string": "params = {\"command\": command, \"arguments\": arguments or []}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 922,
              "character": 8
            },
            "end": {
              "line": 922,
              "character": 14
            }
          },
          "code_string": "params = {\"com"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 924,
              "character": 70
            },
            "end": {
              "line": 924,
              "character": 76
            }
          },
          "code_string": "params)\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "execute_command",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 924,
            "character": 8
          },
          "end": {
            "line": 924,
            "character": 77
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = await self._send_request(\"workspace/executeCommand\", params)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 924,
              "character": 8
            },
            "end": {
              "line": 924,
              "character": 14
            }
          },
          "code_string": "result = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 925,
              "character": 15
            },
            "end": {
              "line": 925,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "uri",
      "containerName": "get_diagnostics",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 931,
            "character": 8
          },
          "end": {
            "line": 931,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "uri = self.path_to_uri(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 931,
              "character": 8
            },
            "end": {
              "line": 931,
              "character": 11
            }
          },
          "code_string": "uri = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 932,
              "character": 36
            },
            "end": {
              "line": 932,
              "character": 39
            }
          },
          "code_string": "uri, [])\n"
        }
      ]
    },
    {
      "name": "symbols",
      "containerName": "find_symbol_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 939,
            "character": 8
          },
          "end": {
            "line": 939,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "symbols = await self.get_workspace_symbols(symbol_name)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 939,
              "character": 8
            },
            "end": {
              "line": 939,
              "character": 15
            }
          },
          "code_string": "symbols = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 941,
              "character": 22
            },
            "end": {
              "line": 941,
              "character": 29
            }
          },
          "code_string": "symbols:\n"
        }
      ]
    },
    {
      "name": "symbol",
      "containerName": "find_symbol_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 941,
            "character": 8
          },
          "end": {
            "line": 958,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for symbol in symbols:\n            if symbol.get(\"name\") == symbol_name:\n                location_data = symbol.get(\"location\")\n                if location_data:\n                    return Location(\n                        uri=location_data[\"uri\"],\n                        range=Range(\n                            start=Position(\n                                line=location_data[\"range\"][\"start\"][\"line\"],\n                                character=location_data[\"range\"][\"start\"][\"character\"],\n                            ),\n                            end=Position(\n                                line=location_data[\"range\"][\"end\"][\"line\"],\n                                character=location_data[\"range\"][\"end\"][\"character\"],\n                            ),\n                        ),\n                    )\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "location_data",
      "containerName": "find_symbol_definition",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 943,
            "character": 16
          },
          "end": {
            "line": 943,
            "character": 54
          }
        }
      },
      "kind": "Variable",
      "code_string": "location_data = symbol.get(\"location\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 943,
              "character": 16
            },
            "end": {
              "line": 943,
              "character": 29
            }
          },
          "code_string": "location_data = symbol.get(\"l"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 944,
              "character": 19
            },
            "end": {
              "line": 944,
              "character": 32
            }
          },
          "code_string": "location_data:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 946,
              "character": 28
            },
            "end": {
              "line": 946,
              "character": 41
            }
          },
          "code_string": "location_data[\"uri\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 949,
              "character": 37
            },
            "end": {
              "line": 949,
              "character": 50
            }
          },
          "code_string": "location_data[\"range\"][\"start\"][\"line\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 950,
              "character": 42
            },
            "end": {
              "line": 950,
              "character": 55
            }
          },
          "code_string": "location_data[\"range\"][\"start\"][\"character\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 953,
              "character": 37
            },
            "end": {
              "line": 953,
              "character": 50
            }
          },
          "code_string": "location_data[\"range\"][\"end\"][\"line\"],\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 954,
              "character": 42
            },
            "end": {
              "line": 954,
              "character": 55
            }
          },
          "code_string": "location_data[\"range\"][\"end\"][\"character\"],\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 963,
            "character": 8
          },
          "end": {
            "line": 1007,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for file_path, file_edits in edits:\n            # Read current file content\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            # Sort edits by position (reverse order to avoid offset issues)\n            sorted_edits = sorted(\n                file_edits,\n                key=lambda e: (e.range.start.line, e.range.start.character),\n                reverse=True,\n            )\n\n            # Apply edits\n            for edit in sorted_edits:\n                start_line = edit.range.start.line\n                start_char = edit.range.start.character\n                end_line = edit.range.end.line\n                end_char = edit.range.end.character\n\n                if start_line == end_line:\n                    # Single line edit\n                    line = lines[start_line]\n                    lines[start_line] = (\n                        line[:start_char] + edit.newText + line[end_char:]\n                    )\n                else:\n                    # Multi-line edit\n                    start_line_content = lines[start_line][:start_char]\n                    end_line_content = lines[end_line][end_char:]\n\n                    # Replace the range with new text\n                    new_content = start_line_content + edit.newText + end_line_content\n\n                    # Remove old lines and insert new content\n                    del lines[start_line : end_line + 1]\n                    if new_content:\n                        lines.insert(start_line, new_content)\n\n            # Write back to file\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n\n            # Notify server of change\n            await self.did_change(file_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "file_edits",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 963,
            "character": 8
          },
          "end": {
            "line": 1007,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for file_path, file_edits in edits:\n            # Read current file content\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            # Sort edits by position (reverse order to avoid offset issues)\n            sorted_edits = sorted(\n                file_edits,\n                key=lambda e: (e.range.start.line, e.range.start.character),\n                reverse=True,\n            )\n\n            # Apply edits\n            for edit in sorted_edits:\n                start_line = edit.range.start.line\n                start_char = edit.range.start.character\n                end_line = edit.range.end.line\n                end_char = edit.range.end.character\n\n                if start_line == end_line:\n                    # Single line edit\n                    line = lines[start_line]\n                    lines[start_line] = (\n                        line[:start_char] + edit.newText + line[end_char:]\n                    )\n                else:\n                    # Multi-line edit\n                    start_line_content = lines[start_line][:start_char]\n                    end_line_content = lines[end_line][end_char:]\n\n                    # Replace the range with new text\n                    new_content = start_line_content + edit.newText + end_line_content\n\n                    # Remove old lines and insert new content\n                    del lines[start_line : end_line + 1]\n                    if new_content:\n                        lines.insert(start_line, new_content)\n\n            # Write back to file\n            with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n\n            # Notify server of change\n            await self.did_change(file_path)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "f",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 965,
            "character": 12
          },
          "end": {
            "line": 967,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lines",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 966,
            "character": 16
          },
          "end": {
            "line": 966,
            "character": 37
          }
        }
      },
      "kind": "Variable",
      "code_string": "lines = f.readlines()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 966,
              "character": 16
            },
            "end": {
              "line": 966,
              "character": 21
            }
          },
          "code_string": "lines = f.readlines()"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 984,
              "character": 27
            },
            "end": {
              "line": 984,
              "character": 32
            }
          },
          "code_string": "lines[start_line]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 985,
              "character": 20
            },
            "end": {
              "line": 985,
              "character": 25
            }
          },
          "code_string": "lines[start_line] = (\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 990,
              "character": 41
            },
            "end": {
              "line": 990,
              "character": 46
            }
          },
          "code_string": "lines[start_line][:start_char]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 991,
              "character": 39
            },
            "end": {
              "line": 991,
              "character": 44
            }
          },
          "code_string": "lines[end_line][end_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 997,
              "character": 24
            },
            "end": {
              "line": 997,
              "character": 29
            }
          },
          "code_string": "lines[start_line : end_line +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 999,
              "character": 24
            },
            "end": {
              "line": 999,
              "character": 29
            }
          },
          "code_string": "lines.insert(start_line, new_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1003,
              "character": 29
            },
            "end": {
              "line": 1003,
              "character": 34
            }
          },
          "code_string": "lines)\n"
        }
      ]
    },
    {
      "name": "sorted_edits",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 969,
            "character": 12
          },
          "end": {
            "line": 973,
            "character": 13
          }
        }
      },
      "kind": "Variable",
      "code_string": "sorted_edits = sorted(\n                file_edits,\n                key=lambda e: (e.range.start.line, e.range.start.character),\n                reverse=True,\n            )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 969,
              "character": 12
            },
            "end": {
              "line": 969,
              "character": 24
            }
          },
          "code_string": "sorted_edits = sorted(\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 976,
              "character": 24
            },
            "end": {
              "line": 976,
              "character": 36
            }
          },
          "code_string": "sorted_edits:\n"
        }
      ]
    },
    {
      "name": "edit",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 976,
            "character": 12
          },
          "end": {
            "line": 1000,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for edit in sorted_edits:\n                start_line = edit.range.start.line\n                start_char = edit.range.start.character\n                end_line = edit.range.end.line\n                end_char = edit.range.end.character\n\n                if start_line == end_line:\n                    # Single line edit\n                    line = lines[start_line]\n                    lines[start_line] = (\n                        line[:start_char] + edit.newText + line[end_char:]\n                    )\n                else:\n                    # Multi-line edit\n                    start_line_content = lines[start_line][:start_char]\n                    end_line_content = lines[end_line][end_char:]\n\n                    # Replace the range with new text\n                    new_content = start_line_content + edit.newText + end_line_content\n\n                    # Remove old lines and insert new content\n                    del lines[start_line : end_line + 1]\n                    if new_content:\n                        lines.insert(start_line, new_content)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "start_line",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 977,
            "character": 16
          },
          "end": {
            "line": 977,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_line = edit.range.start.line\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 977,
              "character": 16
            },
            "end": {
              "line": 977,
              "character": 26
            }
          },
          "code_string": "start_line = edit.range.st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 982,
              "character": 19
            },
            "end": {
              "line": 982,
              "character": 29
            }
          },
          "code_string": "start_line == end_line:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 984,
              "character": 33
            },
            "end": {
              "line": 984,
              "character": 43
            }
          },
          "code_string": "start_line]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 985,
              "character": 26
            },
            "end": {
              "line": 985,
              "character": 36
            }
          },
          "code_string": "start_line] = (\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 990,
              "character": 47
            },
            "end": {
              "line": 990,
              "character": 57
            }
          },
          "code_string": "start_line][:start_char]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 997,
              "character": 30
            },
            "end": {
              "line": 997,
              "character": 40
            }
          },
          "code_string": "start_line : end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 999,
              "character": 37
            },
            "end": {
              "line": 999,
              "character": 47
            }
          },
          "code_string": "start_line, new_content)\n"
        }
      ]
    },
    {
      "name": "start_char",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 978,
            "character": 16
          },
          "end": {
            "line": 978,
            "character": 55
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_char = edit.range.start.character\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 978,
              "character": 16
            },
            "end": {
              "line": 978,
              "character": 26
            }
          },
          "code_string": "start_char = edit.range.st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 986,
              "character": 30
            },
            "end": {
              "line": 986,
              "character": 40
            }
          },
          "code_string": "start_char] + edit.newText + line[end_ch"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 990,
              "character": 60
            },
            "end": {
              "line": 990,
              "character": 70
            }
          },
          "code_string": "start_char]\n"
        }
      ]
    },
    {
      "name": "end_line",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 979,
            "character": 16
          },
          "end": {
            "line": 979,
            "character": 46
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_line = edit.range.end.line\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 979,
              "character": 16
            },
            "end": {
              "line": 979,
              "character": 24
            }
          },
          "code_string": "end_line = edit.range.en"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 982,
              "character": 33
            },
            "end": {
              "line": 982,
              "character": 41
            }
          },
          "code_string": "end_line:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 991,
              "character": 45
            },
            "end": {
              "line": 991,
              "character": 53
            }
          },
          "code_string": "end_line][end_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 997,
              "character": 43
            },
            "end": {
              "line": 997,
              "character": 51
            }
          },
          "code_string": "end_line + 1]\n"
        }
      ]
    },
    {
      "name": "end_char",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 980,
            "character": 16
          },
          "end": {
            "line": 980,
            "character": 51
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_char = edit.range.end.character\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 980,
              "character": 16
            },
            "end": {
              "line": 980,
              "character": 24
            }
          },
          "code_string": "end_char = edit.range.en"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 986,
              "character": 64
            },
            "end": {
              "line": 986,
              "character": 72
            }
          },
          "code_string": "end_char:]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 991,
              "character": 55
            },
            "end": {
              "line": 991,
              "character": 63
            }
          },
          "code_string": "end_char:]\n"
        }
      ]
    },
    {
      "name": "line",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 984,
            "character": 20
          },
          "end": {
            "line": 984,
            "character": 44
          }
        }
      },
      "kind": "Variable",
      "code_string": "line = lines[start_line]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 984,
              "character": 20
            },
            "end": {
              "line": 984,
              "character": 24
            }
          },
          "code_string": "line = lines[start_line]"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 986,
              "character": 24
            },
            "end": {
              "line": 986,
              "character": 28
            }
          },
          "code_string": "line[:start_char] + edit.new"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 986,
              "character": 59
            },
            "end": {
              "line": 986,
              "character": 63
            }
          },
          "code_string": "line[end_char:]\n"
        }
      ]
    },
    {
      "name": "start_line_content",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 990,
            "character": 20
          },
          "end": {
            "line": 990,
            "character": 71
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_line_content = lines[start_line][:start_char]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 990,
              "character": 20
            },
            "end": {
              "line": 990,
              "character": 38
            }
          },
          "code_string": "start_line_content = lines[start_line]"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 994,
              "character": 34
            },
            "end": {
              "line": 994,
              "character": 52
            }
          },
          "code_string": "start_line_content + edit.newText + end_line_content"
        }
      ]
    },
    {
      "name": "end_line_content",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 991,
            "character": 20
          },
          "end": {
            "line": 991,
            "character": 65
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_line_content = lines[end_line][end_char:]\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 991,
              "character": 20
            },
            "end": {
              "line": 991,
              "character": 36
            }
          },
          "code_string": "end_line_content = lines[end_line][e"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 994,
              "character": 70
            },
            "end": {
              "line": 994,
              "character": 86
            }
          },
          "code_string": "end_line_content\n"
        }
      ]
    },
    {
      "name": "new_content",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 994,
            "character": 20
          },
          "end": {
            "line": 994,
            "character": 86
          }
        }
      },
      "kind": "Variable",
      "code_string": "new_content = start_line_content + edit.newText + end_line_content\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 994,
              "character": 20
            },
            "end": {
              "line": 994,
              "character": 31
            }
          },
          "code_string": "new_content = start_line_conten"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 998,
              "character": 23
            },
            "end": {
              "line": 998,
              "character": 34
            }
          },
          "code_string": "new_content:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 999,
              "character": 49
            },
            "end": {
              "line": 999,
              "character": 60
            }
          },
          "code_string": "new_content)\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "apply_text_edits",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1002,
            "character": 12
          },
          "end": {
            "line": 1004,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"w\", encoding=\"utf-8\") as f:\n                f.writelines(lines)\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "create_lsp_client",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1033,
            "character": 6
          },
          "end": {
            "line": 1044,
            "character": 0
          }
        }
      },
      "kind": "Function",
      "code_string": "def create_lsp_client(\n    command: str, args: List[str] = None, workspace_path: str = None\n) -> LSPClient:\n    \"\"\"Create and initialize an LSP client\"\"\"\n    client = LSPClient(command, args, workspace_path)\n    await client.start()\n\n    if workspace_path:\n        await client.initialize(workspace_path)\n\n    return client\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "client",
      "containerName": "create_lsp_client",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1037,
            "character": 4
          },
          "end": {
            "line": 1037,
            "character": 53
          }
        }
      },
      "kind": "Variable",
      "code_string": "client = LSPClient(command, args, workspace_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Language Server Protocol Client implementation"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1037,
              "character": 4
            },
            "end": {
              "line": 1037,
              "character": 10
            }
          },
          "code_string": "client = L"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1038,
              "character": 10
            },
            "end": {
              "line": 1038,
              "character": 16
            }
          },
          "code_string": "client.start()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1041,
              "character": 14
            },
            "end": {
              "line": 1041,
              "character": 20
            }
          },
          "code_string": "client.initialize(wo"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1043,
              "character": 11
            },
            "end": {
              "line": 1043,
              "character": 17
            }
          },
          "code_string": "client\n"
        }
      ]
    },
    {
      "name": "LSPTools",
      "containerName": null,
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1046,
            "character": 0
          },
          "end": {
            "line": 1175,
            "character": 0
          }
        }
      },
      "kind": "Class",
      "code_string": "class LSPTools:\n    \"\"\"High-level tools for LSP operations\"\"\"\n\n    def __init__(self, client: LSPClient):\n        self.client = client\n\n    async def get_symbol_definition_content(self, symbol_name: str) -> str:\n        \"\"\"Get the source code content of a symbol definition\"\"\"\n        location = await self.client.find_symbol_definition(symbol_name)\n\n        if not location:\n            return f\"Symbol '{symbol_name}' not found\"\n\n        file_path = self.client.uri_to_path(location.uri)\n\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            start_line = location.range.start.line\n            end_line = location.range.end.line\n\n            # Get the definition content\n            definition_lines = lines[start_line : end_line + 1]\n\n            # Add line numbers\n            numbered_lines = []\n            for i, line in enumerate(definition_lines):\n                line_num = start_line + i + 1\n                numbered_lines.append(f\"{line_num:4d}: {line.rstrip()}\")\n\n            result = f\"Symbol: {symbol_name}\\n\"\n            result += f\"File: {file_path}\\n\"\n            result += f\"Range: L{start_line + 1}:C{location.range.start.character + 1} - L{end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n            result += \"\\n\".join(numbered_lines)\n\n            return result\n\n        except Exception as e:\n            return f\"Error reading definition: {e}\"\n\n    async def get_all_references_content(\n        self, file_path: str, line: int, character: int\n    ) -> str:\n        \"\"\"Get all references to a symbol with surrounding context\"\"\"\n        references = await self.client.get_references(file_path, line, character)\n\n        if not references:\n            return \"No references found\"\n\n        result = f\"Found {len(references)} reference(s):\\n\\n\"\n\n        for i, ref in enumerate(references):\n            ref_file = self.client.uri_to_path(ref.uri)\n            ref_line = ref.range.start.line\n            ref_char = ref.range.start.character\n\n            try:\n                with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n\n                # Get context lines\n                context_start = max(0, ref_line - 2)\n                context_end = min(len(lines), ref_line + 3)\n                context_lines = lines[context_start:context_end]\n\n                result += f\"Reference {i + 1}:\\n\"\n                result += f\"File: {ref_file}\\n\"\n                result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n\n                for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n\n                result += \"\\n\"\n\n            except Exception as e:\n                result += f\"Error reading reference: {e}\\n\\n\"\n\n        return result\n\n    async def get_diagnostics_report(self, file_path: str) -> str:\n        \"\"\"Get a formatted diagnostics report for a file\"\"\"\n        diagnostics = await self.client.get_diagnostics(file_path)\n\n        if not diagnostics:\n            return f\"No diagnostics found for {file_path}\"\n\n        severity_map = {1: \"ERROR\", 2: \"WARNING\", 3: \"INFO\", 4: \"HINT\"}\n\n        result = f\"Diagnostics for {file_path} ({len(diagnostics)} issue(s)):\\n\\n\"\n\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            for i, diag in enumerate(diagnostics):\n                severity = severity_map.get(diag.severity, \"UNKNOWN\")\n                line_num = diag.range.start.line + 1\n                char_num = diag.range.start.character + 1\n\n                result += f\"Issue {i + 1}: {severity}\\n\"\n                result += f\"Position: L{line_num}:C{char_num}\\n\"\n                result += f\"Message: {diag.message}\\n\"\n\n                if diag.code:\n                    result += f\"Code: {diag.code}\\n\"\n                if diag.source:\n                    result += f\"Source: {diag.source}\\n\"\n\n                # Show the problematic line\n                if diag.range.start.line < len(lines):\n                    problem_line = lines[diag.range.start.line].rstrip()\n                    result += f\"Line: {problem_line}\\n\"\n\n                    # Show pointer to the problem area\n                    pointer = \" \" * (char_num - 1) + \"^\"\n                    if diag.range.end.character > diag.range.start.character:\n                        pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )\n                    result += f\"      {pointer}\\n\"\n\n                result += \"\\n\"\n\n        except Exception as e:\n            result += f\"Error reading file: {e}\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "__init__",
      "containerName": "LSPTools",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1049,
            "character": 4
          },
          "end": {
            "line": 1051,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def __init__(self, client: LSPClient):\n        self.client = client\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_symbol_definition_content",
      "containerName": "LSPTools",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1052,
            "character": 10
          },
          "end": {
            "line": 1086,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_symbol_definition_content(self, symbol_name: str) -> str:\n        \"\"\"Get the source code content of a symbol definition\"\"\"\n        location = await self.client.find_symbol_definition(symbol_name)\n\n        if not location:\n            return f\"Symbol '{symbol_name}' not found\"\n\n        file_path = self.client.uri_to_path(location.uri)\n\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            start_line = location.range.start.line\n            end_line = location.range.end.line\n\n            # Get the definition content\n            definition_lines = lines[start_line : end_line + 1]\n\n            # Add line numbers\n            numbered_lines = []\n            for i, line in enumerate(definition_lines):\n                line_num = start_line + i + 1\n                numbered_lines.append(f\"{line_num:4d}: {line.rstrip()}\")\n\n            result = f\"Symbol: {symbol_name}\\n\"\n            result += f\"File: {file_path}\\n\"\n            result += f\"Range: L{start_line + 1}:C{location.range.start.character + 1} - L{end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n            result += \"\\n\".join(numbered_lines)\n\n            return result\n\n        except Exception as e:\n            return f\"Error reading definition: {e}\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_all_references_content",
      "containerName": "LSPTools",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1087,
            "character": 10
          },
          "end": {
            "line": 1127,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_all_references_content(\n        self, file_path: str, line: int, character: int\n    ) -> str:\n        \"\"\"Get all references to a symbol with surrounding context\"\"\"\n        references = await self.client.get_references(file_path, line, character)\n\n        if not references:\n            return \"No references found\"\n\n        result = f\"Found {len(references)} reference(s):\\n\\n\"\n\n        for i, ref in enumerate(references):\n            ref_file = self.client.uri_to_path(ref.uri)\n            ref_line = ref.range.start.line\n            ref_char = ref.range.start.character\n\n            try:\n                with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n\n                # Get context lines\n                context_start = max(0, ref_line - 2)\n                context_end = min(len(lines), ref_line + 3)\n                context_lines = lines[context_start:context_end]\n\n                result += f\"Reference {i + 1}:\\n\"\n                result += f\"File: {ref_file}\\n\"\n                result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n\n                for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n\n                result += \"\\n\"\n\n            except Exception as e:\n                result += f\"Error reading reference: {e}\\n\\n\"\n\n        return result\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "get_diagnostics_report",
      "containerName": "LSPTools",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1128,
            "character": 10
          },
          "end": {
            "line": 1175,
            "character": 0
          }
        }
      },
      "kind": "Method",
      "code_string": "def get_diagnostics_report(self, file_path: str) -> str:\n        \"\"\"Get a formatted diagnostics report for a file\"\"\"\n        diagnostics = await self.client.get_diagnostics(file_path)\n\n        if not diagnostics:\n            return f\"No diagnostics found for {file_path}\"\n\n        severity_map = {1: \"ERROR\", 2: \"WARNING\", 3: \"INFO\", 4: \"HINT\"}\n\n        result = f\"Diagnostics for {file_path} ({len(diagnostics)} issue(s)):\\n\\n\"\n\n        try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            for i, diag in enumerate(diagnostics):\n                severity = severity_map.get(diag.severity, \"UNKNOWN\")\n                line_num = diag.range.start.line + 1\n                char_num = diag.range.start.character + 1\n\n                result += f\"Issue {i + 1}: {severity}\\n\"\n                result += f\"Position: L{line_num}:C{char_num}\\n\"\n                result += f\"Message: {diag.message}\\n\"\n\n                if diag.code:\n                    result += f\"Code: {diag.code}\\n\"\n                if diag.source:\n                    result += f\"Source: {diag.source}\\n\"\n\n                # Show the problematic line\n                if diag.range.start.line < len(lines):\n                    problem_line = lines[diag.range.start.line].rstrip()\n                    result += f\"Line: {problem_line}\\n\"\n\n                    # Show pointer to the problem area\n                    pointer = \" \" * (char_num - 1) + \"^\"\n                    if diag.range.end.character > diag.range.start.character:\n                        pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )\n                    result += f\"      {pointer}\\n\"\n\n                result += \"\\n\"\n\n        except Exception as e:\n            result += f\"Error reading file: {e}\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "client",
      "containerName": "__init__",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1050,
            "character": 8
          },
          "end": {
            "line": 1050,
            "character": 28
          }
        }
      },
      "kind": "Field",
      "code_string": "self.client = client\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\n\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1049,
              "character": 17
            },
            "end": {
              "line": 1049,
              "character": 21
            }
          },
          "code_string": "self, client: LSPClie"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1050,
              "character": 8
            },
            "end": {
              "line": 1050,
              "character": 12
            }
          },
          "code_string": "self.client "
        }
      ]
    },
    {
      "name": "location",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1054,
            "character": 8
          },
          "end": {
            "line": 1054,
            "character": 72
          }
        }
      },
      "kind": "Variable",
      "code_string": "location = await self.client.find_symbol_definition(symbol_name)\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1054,
              "character": 8
            },
            "end": {
              "line": 1054,
              "character": 16
            }
          },
          "code_string": "location = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1056,
              "character": 15
            },
            "end": {
              "line": 1056,
              "character": 23
            }
          },
          "code_string": "location:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1059,
              "character": 44
            },
            "end": {
              "line": 1059,
              "character": 52
            }
          },
          "code_string": "location.uri)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1065,
              "character": 25
            },
            "end": {
              "line": 1065,
              "character": 33
            }
          },
          "code_string": "location.range.start.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1066,
              "character": 23
            },
            "end": {
              "line": 1066,
              "character": 31
            }
          },
          "code_string": "location.range.end.line\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 51
            },
            "end": {
              "line": 1079,
              "character": 59
            }
          },
          "code_string": "location.range.start.character + 1} - L{end_line + 1}:C{loc"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 107
            },
            "end": {
              "line": 1079,
              "character": 115
            }
          },
          "code_string": "location.range.end.character + 1}\\n\\n\"\n"
        }
      ]
    },
    {
      "name": "file_path",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1059,
            "character": 8
          },
          "end": {
            "line": 1059,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "file_path = self.client.uri_to_path(location.uri)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1059,
              "character": 8
            },
            "end": {
              "line": 1059,
              "character": 17
            }
          },
          "code_string": "file_path = self."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1062,
              "character": 22
            },
            "end": {
              "line": 1062,
              "character": 31
            }
          },
          "code_string": "file_path, \"r\", encoding=\"utf-8"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1078,
              "character": 31
            },
            "end": {
              "line": 1078,
              "character": 40
            }
          },
          "code_string": "file_path}\\n\"\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1062,
            "character": 12
          },
          "end": {
            "line": 1064,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lines",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1063,
            "character": 16
          },
          "end": {
            "line": 1063,
            "character": 37
          }
        }
      },
      "kind": "Variable",
      "code_string": "lines = f.readlines()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1063,
              "character": 16
            },
            "end": {
              "line": 1063,
              "character": 21
            }
          },
          "code_string": "lines = f.readlines()"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1069,
              "character": 31
            },
            "end": {
              "line": 1069,
              "character": 36
            }
          },
          "code_string": "lines[start_line : end_line + 1]\n"
        }
      ]
    },
    {
      "name": "start_line",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1065,
            "character": 12
          },
          "end": {
            "line": 1065,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "start_line = location.range.start.line\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1065,
              "character": 12
            },
            "end": {
              "line": 1065,
              "character": 22
            }
          },
          "code_string": "start_line = location."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1069,
              "character": 37
            },
            "end": {
              "line": 1069,
              "character": 47
            }
          },
          "code_string": "start_line : end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1074,
              "character": 27
            },
            "end": {
              "line": 1074,
              "character": 37
            }
          },
          "code_string": "start_line + i + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 33
            },
            "end": {
              "line": 1079,
              "character": 43
            }
          },
          "code_string": "start_line + 1}:C{location.range.start.char"
        }
      ]
    },
    {
      "name": "end_line",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1066,
            "character": 12
          },
          "end": {
            "line": 1066,
            "character": 46
          }
        }
      },
      "kind": "Variable",
      "code_string": "end_line = location.range.end.line\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1066,
              "character": 12
            },
            "end": {
              "line": 1066,
              "character": 20
            }
          },
          "code_string": "end_line = location."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1069,
              "character": 50
            },
            "end": {
              "line": 1069,
              "character": 58
            }
          },
          "code_string": "end_line + 1]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 91
            },
            "end": {
              "line": 1079,
              "character": 99
            }
          },
          "code_string": "end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n"
        }
      ]
    },
    {
      "name": "definition_lines",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1069,
            "character": 12
          },
          "end": {
            "line": 1069,
            "character": 63
          }
        }
      },
      "kind": "Variable",
      "code_string": "definition_lines = lines[start_line : end_line + 1]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1069,
              "character": 12
            },
            "end": {
              "line": 1069,
              "character": 28
            }
          },
          "code_string": "definition_lines = lines[sta"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1073,
              "character": 37
            },
            "end": {
              "line": 1073,
              "character": 53
            }
          },
          "code_string": "definition_lines):\n"
        }
      ]
    },
    {
      "name": "numbered_lines",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1072,
            "character": 12
          },
          "end": {
            "line": 1072,
            "character": 31
          }
        }
      },
      "kind": "Variable",
      "code_string": "numbered_lines = []\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1072,
              "character": 12
            },
            "end": {
              "line": 1072,
              "character": 26
            }
          },
          "code_string": "numbered_lines = []\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1075,
              "character": 16
            },
            "end": {
              "line": 1075,
              "character": 30
            }
          },
          "code_string": "numbered_lines.append(f\"{line_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1080,
              "character": 32
            },
            "end": {
              "line": 1080,
              "character": 46
            }
          },
          "code_string": "numbered_lines)\n"
        }
      ]
    },
    {
      "name": "i",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1073,
            "character": 12
          },
          "end": {
            "line": 1076,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, line in enumerate(definition_lines):\n                line_num = start_line + i + 1\n                numbered_lines.append(f\"{line_num:4d}: {line.rstrip()}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "line",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1073,
            "character": 12
          },
          "end": {
            "line": 1076,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, line in enumerate(definition_lines):\n                line_num = start_line + i + 1\n                numbered_lines.append(f\"{line_num:4d}: {line.rstrip()}\")\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "line_num",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1074,
            "character": 16
          },
          "end": {
            "line": 1074,
            "character": 45
          }
        }
      },
      "kind": "Variable",
      "code_string": "line_num = start_line + i + 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1074,
              "character": 16
            },
            "end": {
              "line": 1074,
              "character": 24
            }
          },
          "code_string": "line_num = start_line + "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1075,
              "character": 41
            },
            "end": {
              "line": 1075,
              "character": 49
            }
          },
          "code_string": "line_num:4d}: {line.rstrip()}\")\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1077,
            "character": 12
          },
          "end": {
            "line": 1077,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = f\"Symbol: {symbol_name}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1077,
              "character": 12
            },
            "end": {
              "line": 1077,
              "character": 18
            }
          },
          "code_string": "result = f\"Symbol:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1078,
              "character": 12
            },
            "end": {
              "line": 1078,
              "character": 18
            }
          },
          "code_string": "result += f\"File: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 12
            },
            "end": {
              "line": 1079,
              "character": 18
            }
          },
          "code_string": "result += f\"Range:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1080,
              "character": 12
            },
            "end": {
              "line": 1080,
              "character": 18
            }
          },
          "code_string": "result += \"\\n\".joi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1082,
              "character": 19
            },
            "end": {
              "line": 1082,
              "character": 25
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1078,
            "character": 12
          },
          "end": {
            "line": 1078,
            "character": 44
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"File: {file_path}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1077,
              "character": 12
            },
            "end": {
              "line": 1077,
              "character": 18
            }
          },
          "code_string": "result = f\"Symbol:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1078,
              "character": 12
            },
            "end": {
              "line": 1078,
              "character": 18
            }
          },
          "code_string": "result += f\"File: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 12
            },
            "end": {
              "line": 1079,
              "character": 18
            }
          },
          "code_string": "result += f\"Range:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1080,
              "character": 12
            },
            "end": {
              "line": 1080,
              "character": 18
            }
          },
          "code_string": "result += \"\\n\".joi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1082,
              "character": 19
            },
            "end": {
              "line": 1082,
              "character": 25
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1079,
            "character": 12
          },
          "end": {
            "line": 1079,
            "character": 145
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Range: L{start_line + 1}:C{location.range.start.character + 1} - L{end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1077,
              "character": 12
            },
            "end": {
              "line": 1077,
              "character": 18
            }
          },
          "code_string": "result = f\"Symbol:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1078,
              "character": 12
            },
            "end": {
              "line": 1078,
              "character": 18
            }
          },
          "code_string": "result += f\"File: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 12
            },
            "end": {
              "line": 1079,
              "character": 18
            }
          },
          "code_string": "result += f\"Range:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1080,
              "character": 12
            },
            "end": {
              "line": 1080,
              "character": 18
            }
          },
          "code_string": "result += \"\\n\".joi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1082,
              "character": 19
            },
            "end": {
              "line": 1082,
              "character": 25
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1080,
            "character": 12
          },
          "end": {
            "line": 1080,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += \"\\n\".join(numbered_lines)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1077,
              "character": 12
            },
            "end": {
              "line": 1077,
              "character": 18
            }
          },
          "code_string": "result = f\"Symbol:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1078,
              "character": 12
            },
            "end": {
              "line": 1078,
              "character": 18
            }
          },
          "code_string": "result += f\"File: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1079,
              "character": 12
            },
            "end": {
              "line": 1079,
              "character": 18
            }
          },
          "code_string": "result += f\"Range:"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1080,
              "character": 12
            },
            "end": {
              "line": 1080,
              "character": 18
            }
          },
          "code_string": "result += \"\\n\".joi"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1082,
              "character": 19
            },
            "end": {
              "line": 1082,
              "character": 25
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "get_symbol_definition_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1061,
            "character": 8
          },
          "end": {
            "line": 1086,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            start_line = location.range.start.line\n            end_line = location.range.end.line\n\n            # Get the definition content\n            definition_lines = lines[start_line : end_line + 1]\n\n            # Add line numbers\n            numbered_lines = []\n            for i, line in enumerate(definition_lines):\n                line_num = start_line + i + 1\n                numbered_lines.append(f\"{line_num:4d}: {line.rstrip()}\")\n\n            result = f\"Symbol: {symbol_name}\\n\"\n            result += f\"File: {file_path}\\n\"\n            result += f\"Range: L{start_line + 1}:C{location.range.start.character + 1} - L{end_line + 1}:C{location.range.end.character + 1}\\n\\n\"\n            result += \"\\n\".join(numbered_lines)\n\n            return result\n\n        except Exception as e:\n            return f\"Error reading definition: {e}\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "references",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1091,
            "character": 8
          },
          "end": {
            "line": 1091,
            "character": 81
          }
        }
      },
      "kind": "Variable",
      "code_string": "references = await self.client.get_references(file_path, line, character)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1091,
              "character": 8
            },
            "end": {
              "line": 1091,
              "character": 18
            }
          },
          "code_string": "references = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1093,
              "character": 15
            },
            "end": {
              "line": 1093,
              "character": 25
            }
          },
          "code_string": "references:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 30
            },
            "end": {
              "line": 1096,
              "character": 40
            }
          },
          "code_string": "references)} reference(s):\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1098,
              "character": 32
            },
            "end": {
              "line": 1098,
              "character": 42
            }
          },
          "code_string": "references):\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1096,
            "character": 8
          },
          "end": {
            "line": 1096,
            "character": 61
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = f\"Found {len(references)} reference(s):\\n\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "i",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1098,
            "character": 8
          },
          "end": {
            "line": 1125,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, ref in enumerate(references):\n            ref_file = self.client.uri_to_path(ref.uri)\n            ref_line = ref.range.start.line\n            ref_char = ref.range.start.character\n\n            try:\n                with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n\n                # Get context lines\n                context_start = max(0, ref_line - 2)\n                context_end = min(len(lines), ref_line + 3)\n                context_lines = lines[context_start:context_end]\n\n                result += f\"Reference {i + 1}:\\n\"\n                result += f\"File: {ref_file}\\n\"\n                result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n\n                for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n\n                result += \"\\n\"\n\n            except Exception as e:\n                result += f\"Error reading reference: {e}\\n\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "ref",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1098,
            "character": 8
          },
          "end": {
            "line": 1125,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, ref in enumerate(references):\n            ref_file = self.client.uri_to_path(ref.uri)\n            ref_line = ref.range.start.line\n            ref_char = ref.range.start.character\n\n            try:\n                with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n\n                # Get context lines\n                context_start = max(0, ref_line - 2)\n                context_end = min(len(lines), ref_line + 3)\n                context_lines = lines[context_start:context_end]\n\n                result += f\"Reference {i + 1}:\\n\"\n                result += f\"File: {ref_file}\\n\"\n                result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n\n                for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n\n                result += \"\\n\"\n\n            except Exception as e:\n                result += f\"Error reading reference: {e}\\n\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "ref_file",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1099,
            "character": 12
          },
          "end": {
            "line": 1099,
            "character": 55
          }
        }
      },
      "kind": "Variable",
      "code_string": "ref_file = self.client.uri_to_path(ref.uri)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1099,
              "character": 12
            },
            "end": {
              "line": 1099,
              "character": 20
            }
          },
          "code_string": "ref_file = self.clie"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1104,
              "character": 26
            },
            "end": {
              "line": 1104,
              "character": 34
            }
          },
          "code_string": "ref_file, \"r\", encoding=\"utf-8\") a"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 35
            },
            "end": {
              "line": 1113,
              "character": 43
            }
          },
          "code_string": "ref_file}\\n\"\n"
        }
      ]
    },
    {
      "name": "ref_line",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1100,
            "character": 12
          },
          "end": {
            "line": 1100,
            "character": 43
          }
        }
      },
      "kind": "Variable",
      "code_string": "ref_line = ref.range.start.line\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1100,
              "character": 12
            },
            "end": {
              "line": 1100,
              "character": 20
            }
          },
          "code_string": "ref_line = ref.range"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1108,
              "character": 39
            },
            "end": {
              "line": 1108,
              "character": 47
            }
          },
          "code_string": "ref_line - 2)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1109,
              "character": 46
            },
            "end": {
              "line": 1109,
              "character": 54
            }
          },
          "code_string": "ref_line + 3)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 40
            },
            "end": {
              "line": 1114,
              "character": 48
            }
          },
          "code_string": "ref_line + 1}:C{ref_char + 1}\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1118,
              "character": 59
            },
            "end": {
              "line": 1118,
              "character": 67
            }
          },
          "code_string": "ref_line else \"   \"\n"
        }
      ]
    },
    {
      "name": "ref_char",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1101,
            "character": 12
          },
          "end": {
            "line": 1101,
            "character": 48
          }
        }
      },
      "kind": "Variable",
      "code_string": "ref_char = ref.range.start.character\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1101,
              "character": 12
            },
            "end": {
              "line": 1101,
              "character": 20
            }
          },
          "code_string": "ref_char = ref.range"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 56
            },
            "end": {
              "line": 1114,
              "character": 64
            }
          },
          "code_string": "ref_char + 1}\\n\\n\"\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1104,
            "character": 16
          },
          "end": {
            "line": 1106,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lines",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1105,
            "character": 20
          },
          "end": {
            "line": 1105,
            "character": 41
          }
        }
      },
      "kind": "Variable",
      "code_string": "lines = f.readlines()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1105,
              "character": 20
            },
            "end": {
              "line": 1105,
              "character": 25
            }
          },
          "code_string": "lines = f.readlines()\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1109,
              "character": 38
            },
            "end": {
              "line": 1109,
              "character": 43
            }
          },
          "code_string": "lines), ref_line + 3)\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1110,
              "character": 32
            },
            "end": {
              "line": 1110,
              "character": 37
            }
          },
          "code_string": "lines[context_start:context_end]\n"
        }
      ]
    },
    {
      "name": "context_start",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1108,
            "character": 16
          },
          "end": {
            "line": 1108,
            "character": 52
          }
        }
      },
      "kind": "Variable",
      "code_string": "context_start = max(0, ref_line - 2)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1108,
              "character": 16
            },
            "end": {
              "line": 1108,
              "character": 29
            }
          },
          "code_string": "context_start = max(0, ref_li"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1110,
              "character": 38
            },
            "end": {
              "line": 1110,
              "character": 51
            }
          },
          "code_string": "context_start:context_end]\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1117,
              "character": 31
            },
            "end": {
              "line": 1117,
              "character": 44
            }
          },
          "code_string": "context_start + j + 1\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1118,
              "character": 38
            },
            "end": {
              "line": 1118,
              "character": 51
            }
          },
          "code_string": "context_start + j == ref_line else \"   \"\n"
        }
      ]
    },
    {
      "name": "context_end",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1109,
            "character": 16
          },
          "end": {
            "line": 1109,
            "character": 59
          }
        }
      },
      "kind": "Variable",
      "code_string": "context_end = min(len(lines), ref_line + 3)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1109,
              "character": 16
            },
            "end": {
              "line": 1109,
              "character": 27
            }
          },
          "code_string": "context_end = min(len(lines"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1110,
              "character": 52
            },
            "end": {
              "line": 1110,
              "character": 63
            }
          },
          "code_string": "context_end]\n"
        }
      ]
    },
    {
      "name": "context_lines",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1110,
            "character": 16
          },
          "end": {
            "line": 1110,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "context_lines = lines[context_start:context_end]\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1110,
              "character": 16
            },
            "end": {
              "line": 1110,
              "character": 29
            }
          },
          "code_string": "context_lines = lines[context"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1116,
              "character": 41
            },
            "end": {
              "line": 1116,
              "character": 54
            }
          },
          "code_string": "context_lines):\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1112,
            "character": 16
          },
          "end": {
            "line": 1112,
            "character": 49
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Reference {i + 1}:\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1113,
            "character": 16
          },
          "end": {
            "line": 1113,
            "character": 47
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"File: {ref_file}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1114,
            "character": 16
          },
          "end": {
            "line": 1114,
            "character": 74
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "j",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1116,
            "character": 16
          },
          "end": {
            "line": 1120,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "line",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1116,
            "character": 16
          },
          "end": {
            "line": 1120,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "line_num",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1117,
            "character": 20
          },
          "end": {
            "line": 1117,
            "character": 52
          }
        }
      },
      "kind": "Variable",
      "code_string": "line_num = context_start + j + 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1117,
              "character": 20
            },
            "end": {
              "line": 1117,
              "character": 28
            }
          },
          "code_string": "line_num = context_start + j"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 42
            },
            "end": {
              "line": 1119,
              "character": 50
            }
          },
          "code_string": "line_num:4d}: {line.rstrip()}\\n\"\n"
        }
      ]
    },
    {
      "name": "marker",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1118,
            "character": 20
          },
          "end": {
            "line": 1118,
            "character": 78
          }
        }
      },
      "kind": "Variable",
      "code_string": "marker = \">>>\" if context_start + j == ref_line else \"   \"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1118,
              "character": 20
            },
            "end": {
              "line": 1118,
              "character": 26
            }
          },
          "code_string": "marker = \">>>\" if context_"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 33
            },
            "end": {
              "line": 1119,
              "character": 39
            }
          },
          "code_string": "marker} {line_num:4d}: {line.rstrip()}\\"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1119,
            "character": 20
          },
          "end": {
            "line": 1119,
            "character": 74
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1121,
            "character": 16
          },
          "end": {
            "line": 1121,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += \"\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1103,
            "character": 12
          },
          "end": {
            "line": 1125,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n                with open(ref_file, \"r\", encoding=\"utf-8\") as f:\n                    lines = f.readlines()\n\n                # Get context lines\n                context_start = max(0, ref_line - 2)\n                context_end = min(len(lines), ref_line + 3)\n                context_lines = lines[context_start:context_end]\n\n                result += f\"Reference {i + 1}:\\n\"\n                result += f\"File: {ref_file}\\n\"\n                result += f\"Position: L{ref_line + 1}:C{ref_char + 1}\\n\\n\"\n\n                for j, line in enumerate(context_lines):\n                    line_num = context_start + j + 1\n                    marker = \">>>\" if context_start + j == ref_line else \"   \"\n                    result += f\"{marker} {line_num:4d}: {line.rstrip()}\\n\"\n\n                result += \"\\n\"\n\n            except Exception as e:\n                result += f\"Error reading reference: {e}\\n\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "result",
      "containerName": "get_all_references_content",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1124,
            "character": 16
          },
          "end": {
            "line": 1124,
            "character": 61
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Error reading reference: {e}\\n\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1096,
              "character": 8
            },
            "end": {
              "line": 1096,
              "character": 14
            }
          },
          "code_string": "result = f\"Fou"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1112,
              "character": 16
            },
            "end": {
              "line": 1112,
              "character": 22
            }
          },
          "code_string": "result += f\"Reference "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1113,
              "character": 16
            },
            "end": {
              "line": 1113,
              "character": 22
            }
          },
          "code_string": "result += f\"File: {ref"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1114,
              "character": 16
            },
            "end": {
              "line": 1114,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1119,
              "character": 20
            },
            "end": {
              "line": 1119,
              "character": 26
            }
          },
          "code_string": "result += f\"{marker} {line"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1121,
              "character": 16
            },
            "end": {
              "line": 1121,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1124,
              "character": 16
            },
            "end": {
              "line": 1124,
              "character": 22
            }
          },
          "code_string": "result += f\"Error read"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1126,
              "character": 15
            },
            "end": {
              "line": 1126,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "diagnostics",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1130,
            "character": 8
          },
          "end": {
            "line": 1130,
            "character": 66
          }
        }
      },
      "kind": "Variable",
      "code_string": "diagnostics = await self.client.get_diagnostics(file_path)\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1130,
              "character": 8
            },
            "end": {
              "line": 1130,
              "character": 19
            }
          },
          "code_string": "diagnostics = await"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1132,
              "character": 15
            },
            "end": {
              "line": 1132,
              "character": 26
            }
          },
          "code_string": "diagnostics:\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 53
            },
            "end": {
              "line": 1137,
              "character": 64
            }
          },
          "code_string": "diagnostics)} issue(s)):\\n\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1143,
              "character": 37
            },
            "end": {
              "line": 1143,
              "character": 48
            }
          },
          "code_string": "diagnostics):\n"
        }
      ]
    },
    {
      "name": "severity_map",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1135,
            "character": 8
          },
          "end": {
            "line": 1135,
            "character": 71
          }
        }
      },
      "kind": "Variable",
      "code_string": "severity_map = {1: \"ERROR\", 2: \"WARNING\", 3: \"INFO\", 4: \"HINT\"}\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\ndict() -> new empty dictionary\ndict(mapping) -> new dictionary initialized from a mapping object's\n    (key, value) pairs\ndict(iterable) -> new dictionary initialized as if via:\n    d = {}\n    for k, v in iterable:\n        d[k] = v\ndict(**kwargs) -> new dictionary initialized with the name=value pairs\n    in the keyword argument list.  For example:  dict(one=1, two=2)\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1135,
              "character": 8
            },
            "end": {
              "line": 1135,
              "character": 20
            }
          },
          "code_string": "severity_map = {1: \""
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1144,
              "character": 27
            },
            "end": {
              "line": 1144,
              "character": 39
            }
          },
          "code_string": "severity_map.get(diag.severity, \"UNKNOW"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1137,
            "character": 8
          },
          "end": {
            "line": 1137,
            "character": 82
          }
        }
      },
      "kind": "Variable",
      "code_string": "result = f\"Diagnostics for {file_path} ({len(diagnostics)} issue(s)):\\n\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "f",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1140,
            "character": 12
          },
          "end": {
            "line": 1142,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "lines",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1141,
            "character": 16
          },
          "end": {
            "line": 1141,
            "character": 37
          }
        }
      },
      "kind": "Variable",
      "code_string": "lines = f.readlines()\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "Built-in mutable sequence.\n\nIf no argument is given, the constructor creates a new empty list.\nThe argument must be an iterable if specified."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1141,
              "character": 16
            },
            "end": {
              "line": 1141,
              "character": 21
            }
          },
          "code_string": "lines = f.readlines()"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1158,
              "character": 47
            },
            "end": {
              "line": 1158,
              "character": 52
            }
          },
          "code_string": "lines):\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1159,
              "character": 35
            },
            "end": {
              "line": 1159,
              "character": 40
            }
          },
          "code_string": "lines[diag.range.start.line].rstrip()\n"
        }
      ]
    },
    {
      "name": "i",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1143,
            "character": 12
          },
          "end": {
            "line": 1171,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, diag in enumerate(diagnostics):\n                severity = severity_map.get(diag.severity, \"UNKNOWN\")\n                line_num = diag.range.start.line + 1\n                char_num = diag.range.start.character + 1\n\n                result += f\"Issue {i + 1}: {severity}\\n\"\n                result += f\"Position: L{line_num}:C{char_num}\\n\"\n                result += f\"Message: {diag.message}\\n\"\n\n                if diag.code:\n                    result += f\"Code: {diag.code}\\n\"\n                if diag.source:\n                    result += f\"Source: {diag.source}\\n\"\n\n                # Show the problematic line\n                if diag.range.start.line < len(lines):\n                    problem_line = lines[diag.range.start.line].rstrip()\n                    result += f\"Line: {problem_line}\\n\"\n\n                    # Show pointer to the problem area\n                    pointer = \" \" * (char_num - 1) + \"^\"\n                    if diag.range.end.character > diag.range.start.character:\n                        pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )\n                    result += f\"      {pointer}\\n\"\n\n                result += \"\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "diag",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1143,
            "character": 12
          },
          "end": {
            "line": 1171,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "for i, diag in enumerate(diagnostics):\n                severity = severity_map.get(diag.severity, \"UNKNOWN\")\n                line_num = diag.range.start.line + 1\n                char_num = diag.range.start.character + 1\n\n                result += f\"Issue {i + 1}: {severity}\\n\"\n                result += f\"Position: L{line_num}:C{char_num}\\n\"\n                result += f\"Message: {diag.message}\\n\"\n\n                if diag.code:\n                    result += f\"Code: {diag.code}\\n\"\n                if diag.source:\n                    result += f\"Source: {diag.source}\\n\"\n\n                # Show the problematic line\n                if diag.range.start.line < len(lines):\n                    problem_line = lines[diag.range.start.line].rstrip()\n                    result += f\"Line: {problem_line}\\n\"\n\n                    # Show pointer to the problem area\n                    pointer = \" \" * (char_num - 1) + \"^\"\n                    if diag.range.end.character > diag.range.start.character:\n                        pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )\n                    result += f\"      {pointer}\\n\"\n\n                result += \"\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "severity",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1144,
            "character": 16
          },
          "end": {
            "line": 1144,
            "character": 69
          }
        }
      },
      "kind": "Variable",
      "code_string": "severity = severity_map.get(diag.severity, \"UNKNOWN\")\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1144,
              "character": 16
            },
            "end": {
              "line": 1144,
              "character": 24
            }
          },
          "code_string": "severity = severity_map."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 44
            },
            "end": {
              "line": 1148,
              "character": 52
            }
          },
          "code_string": "severity}\\n\"\n"
        }
      ]
    },
    {
      "name": "line_num",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1145,
            "character": 16
          },
          "end": {
            "line": 1145,
            "character": 52
          }
        }
      },
      "kind": "Variable",
      "code_string": "line_num = diag.range.start.line + 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1145,
              "character": 16
            },
            "end": {
              "line": 1145,
              "character": 24
            }
          },
          "code_string": "line_num = diag.range.st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 40
            },
            "end": {
              "line": 1149,
              "character": 48
            }
          },
          "code_string": "line_num}:C{char_num}\\n\"\n"
        }
      ]
    },
    {
      "name": "char_num",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1146,
            "character": 16
          },
          "end": {
            "line": 1146,
            "character": 57
          }
        }
      },
      "kind": "Variable",
      "code_string": "char_num = diag.range.start.character + 1\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "int([x]) -> integer\nint(x, base=10) -> integer\n\nConvert a number or string to an integer, or return 0 if no arguments\nare given.  If x is a number, return x.\\_\\_int\\_\\_().  For floating-point\nnumbers, this truncates towards zero.\n\nIf x is not a number or if base is given, then x must be a string,\nbytes, or bytearray instance representing an integer literal in the\ngiven base.  The literal can be preceded by '+' or '-' and be surrounded\nby whitespace.  The base defaults to 10.  Valid bases are 0 and 2-36.\nBase 0 means to interpret the base from the string as an integer literal.\n```python\nint('0b100', base=0)\n```\n\n```\n4\n```\n"
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1146,
              "character": 16
            },
            "end": {
              "line": 1146,
              "character": 24
            }
          },
          "code_string": "char_num = diag.range.st"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 52
            },
            "end": {
              "line": 1149,
              "character": 60
            }
          },
          "code_string": "char_num}\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1163,
              "character": 37
            },
            "end": {
              "line": 1163,
              "character": 45
            }
          },
          "code_string": "char_num - 1) + \"^\"\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1148,
            "character": 16
          },
          "end": {
            "line": 1148,
            "character": 56
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Issue {i + 1}: {severity}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1149,
            "character": 16
          },
          "end": {
            "line": 1149,
            "character": 64
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Position: L{line_num}:C{char_num}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1150,
            "character": 16
          },
          "end": {
            "line": 1150,
            "character": 54
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Message: {diag.message}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1153,
            "character": 20
          },
          "end": {
            "line": 1153,
            "character": 52
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Code: {diag.code}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1155,
            "character": 20
          },
          "end": {
            "line": 1155,
            "character": 56
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Source: {diag.source}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "problem_line",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1159,
            "character": 20
          },
          "end": {
            "line": 1159,
            "character": 72
          }
        }
      },
      "kind": "Variable",
      "code_string": "problem_line = lines[diag.range.start.line].rstrip()\n",
      "hover_details": {
        "contents": ""
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1159,
              "character": 20
            },
            "end": {
              "line": 1159,
              "character": 32
            }
          },
          "code_string": "problem_line = lines[diag.range."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 39
            },
            "end": {
              "line": 1160,
              "character": 51
            }
          },
          "code_string": "problem_line}\\n\"\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1160,
            "character": 20
          },
          "end": {
            "line": 1160,
            "character": 55
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Line: {problem_line}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "pointer",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1163,
            "character": 20
          },
          "end": {
            "line": 1163,
            "character": 56
          }
        }
      },
      "kind": "Variable",
      "code_string": "pointer = \" \" * (char_num - 1) + \"^\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1163,
              "character": 20
            },
            "end": {
              "line": 1163,
              "character": 27
            }
          },
          "code_string": "pointer = \" \" * (char_num -"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1165,
              "character": 24
            },
            "end": {
              "line": 1165,
              "character": 31
            }
          },
          "code_string": "pointer += \"~\" * (\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 39
            },
            "end": {
              "line": 1168,
              "character": 46
            }
          },
          "code_string": "pointer}\\n\"\n"
        }
      ]
    },
    {
      "name": "pointer",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1165,
            "character": 24
          },
          "end": {
            "line": 1167,
            "character": 25
          }
        }
      },
      "kind": "Variable",
      "code_string": "pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1163,
              "character": 20
            },
            "end": {
              "line": 1163,
              "character": 27
            }
          },
          "code_string": "pointer = \" \" * (char_num -"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1165,
              "character": 24
            },
            "end": {
              "line": 1165,
              "character": 31
            }
          },
          "code_string": "pointer += \"~\" * (\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 39
            },
            "end": {
              "line": 1168,
              "character": 46
            }
          },
          "code_string": "pointer}\\n\"\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1168,
            "character": 20
          },
          "end": {
            "line": 1168,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"      {pointer}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1170,
            "character": 16
          },
          "end": {
            "line": 1170,
            "character": 30
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += \"\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    },
    {
      "name": "e",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1139,
            "character": 8
          },
          "end": {
            "line": 1174,
            "character": 0
          }
        }
      },
      "kind": "Variable",
      "code_string": "try:\n            with open(file_path, \"r\", encoding=\"utf-8\") as f:\n                lines = f.readlines()\n\n            for i, diag in enumerate(diagnostics):\n                severity = severity_map.get(diag.severity, \"UNKNOWN\")\n                line_num = diag.range.start.line + 1\n                char_num = diag.range.start.character + 1\n\n                result += f\"Issue {i + 1}: {severity}\\n\"\n                result += f\"Position: L{line_num}:C{char_num}\\n\"\n                result += f\"Message: {diag.message}\\n\"\n\n                if diag.code:\n                    result += f\"Code: {diag.code}\\n\"\n                if diag.source:\n                    result += f\"Source: {diag.source}\\n\"\n\n                # Show the problematic line\n                if diag.range.start.line < len(lines):\n                    problem_line = lines[diag.range.start.line].rstrip()\n                    result += f\"Line: {problem_line}\\n\"\n\n                    # Show pointer to the problem area\n                    pointer = \" \" * (char_num - 1) + \"^\"\n                    if diag.range.end.character > diag.range.start.character:\n                        pointer += \"~\" * (\n                            diag.range.end.character - diag.range.start.character - 1\n                        )\n                    result += f\"      {pointer}\\n\"\n\n                result += \"\\n\"\n\n        except Exception as e:\n            result += f\"Error reading file: {e}\\n\"\n",
      "hover_details": {
        "contents": ""
      },
      "references": []
    },
    {
      "name": "result",
      "containerName": "get_diagnostics_report",
      "location": {
        "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
        "range": {
          "start": {
            "line": 1173,
            "character": 12
          },
          "end": {
            "line": 1173,
            "character": 50
          }
        }
      },
      "kind": "Variable",
      "code_string": "result += f\"Error reading file: {e}\\n\"\n",
      "hover_details": {
        "contents": {
          "kind": "markdown",
          "value": "```\nstr(object='') -> str\nstr(bytes_or_buffer[, encoding[, errors]]) -> str\n```\n\nCreate a new string object from the given object. If encoding or\nerrors is specified, then the object must expose a data buffer\nthat will be decoded using the given encoding and error handler.\nOtherwise, returns the result of object.\\_\\_str\\_\\_() (if defined)\nor repr(object).\nencoding defaults to sys.getdefaultencoding().\nerrors defaults to 'strict'."
        }
      },
      "references": [
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1137,
              "character": 8
            },
            "end": {
              "line": 1137,
              "character": 14
            }
          },
          "code_string": "result = f\"Dia"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1148,
              "character": 16
            },
            "end": {
              "line": 1148,
              "character": 22
            }
          },
          "code_string": "result += f\"Issue {i +"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1149,
              "character": 16
            },
            "end": {
              "line": 1149,
              "character": 22
            }
          },
          "code_string": "result += f\"Position: "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1150,
              "character": 16
            },
            "end": {
              "line": 1150,
              "character": 22
            }
          },
          "code_string": "result += f\"Message: {"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1153,
              "character": 20
            },
            "end": {
              "line": 1153,
              "character": 26
            }
          },
          "code_string": "result += f\"Code: {diag.co"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1155,
              "character": 20
            },
            "end": {
              "line": 1155,
              "character": 26
            }
          },
          "code_string": "result += f\"Source: {diag."
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1160,
              "character": 20
            },
            "end": {
              "line": 1160,
              "character": 26
            }
          },
          "code_string": "result += f\"Line: {problem"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1168,
              "character": 20
            },
            "end": {
              "line": 1168,
              "character": 26
            }
          },
          "code_string": "result += f\"      {pointer"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1170,
              "character": 16
            },
            "end": {
              "line": 1170,
              "character": 22
            }
          },
          "code_string": "result += \"\\n\"\n"
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1173,
              "character": 12
            },
            "end": {
              "line": 1173,
              "character": 18
            }
          },
          "code_string": "result += f\"Error "
        },
        {
          "uri": "file:///Users/eswar.tadiparth/Documents/open-source/lsp-2-graph/lsp2graph/lsp_client.py",
          "range": {
            "start": {
              "line": 1174,
              "character": 15
            },
            "end": {
              "line": 1174,
              "character": 21
            }
          },
          "code_string": "result\n"
        }
      ]
    }
  ]
]